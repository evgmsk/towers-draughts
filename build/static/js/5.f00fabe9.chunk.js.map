{"version":3,"sources":["store/boardOptions/actions.ts","pages/gameAnalize/AnalysisPageMenu.tsx","pages/gameAnalize/AnalysisBoard.tsx","pages/gameAnalize/GameAnalyzePage.tsx"],"names":["reverseBoard","payload","type","BoardOptionActions","REVERSE_BOARD","dispatchMap","downloadGame","settingBoard","setGameVariant","setDepth","evaluatePosition","analyzeLastGame","removePiece","setStartPosition","analysisMenuConnector","connect","state","analysis","analyze","towerTouched","board","reversedBoard","boardOptions","history","gameResult","movesHistory","GV","gameOptions","gameVariant","props","settingPosition","ALG","handleClick","et","console","log","className","length","title","onClick","name","defaultValue","onChange","e","value","target","disabled","UnusedTowers","color","towers","subStr","PieceColor","w","number","keys","filter","key","includes","mapDispatch","updateAnalysisState","makeMove","makeNewMove","updateBoardState","clearHistory","finishGameSetup","GameBoardCompopnent","windowSize","app","gameAnalizeConnector","boardRef","React","createRef","mmr","tur","bms","createBoardToAnalysis","positionsTree","size","createAnalysisBoard","createEmptyBoardForCustomPosition","updateCurrentPositionWhileSettingBoard","tower","wPiecesQuantity","bPiecesQuantity","currentColor","currentType","onBoardPosition","onBoardTower","newOnBoardTower","currentPosition","copyObj","handleUpToMove","cellKey","mandatoryMoves","mandatoryMoveStep","mouseDown","from","move","nCP","_mandatoryMoves","_mandatoryMoveStep","fitMoves","m","split","takenPieces","tP","moveToSave","updateTowersOnMandatoryMoveStep","position","makeFreeMove","updateTowersAfterMoveAnimation","handleMouseUp","event","moveDone","cellsMap","cellSize","changedTouches","clientX","clientY","cellsToCheck","posibleMoves","checkMoveTargetCell","x","y","get","handleSettingPieces","cancelTowerTransition","reversed","mergeTowers","t1","t2","delete","set","setTowerOnBoard","positionInDOM","calcTowerPosition","_towers","copyMap","handleSettingTowers","mergingTower","case1","case2","case3","TT","index","parseInt","slice","nextKey","handleRemoveTower","towersKeysArray","whiteUnusedQuantity","v","blackUnusedQuantity","i","calcPositionOutboardTowers","wTower","TowerConstructor","bTower","b","handleRemovePiece","error","outboardKey","outboardPicesNumber","values","t","TowerType","handleMouseMove","SCP","startCursorPosition","STP","startTowerPosition","newPosition","pos","Math","abs","handleSettingPositionMouseDown","towerKey","getAttribute","Map","towerColor","towerType","handleMouseDown","pieceOrder","classList","contains","possibleOutOfMandatory","manTowerFreeMoves","kingTowerFreeMoves","contextMenuHandler","preventDefault","k","Props","boardSize","setProps","setCalBack","window","this","depth","setTimeout","updateCellsPosition","current","bestMoveCB","maxDepth","evaluationStarted","resetProps","prevProps","startPosition","lastMove","lookForMandatoryMoves","JSON","stringify","updateTowersToBoard","updateTowersPosition","movesMainLine","movesCurrentLine","createEmptyBoard","lastMoveSquares","boardProps","boardTheme","WrapperClass","mandatoryTowers","map","Towers","Array","mt","mandatory","onContextMenu","onMouseMove","onMouseUp","onMouseDown","onTouchStart","onTouchMove","onTouchEnd","ref","Board","Component","AnalysisPage","portrait","useSelector","MainClass","fallback","Spinner","side","AnalysisPageMenu","AnalysisBoard","MovesHistory"],"mappings":"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","file":"static/js/5.f00fabe9.chunk.js","sourcesContent":["import { BoardNotation, IBoardOptions } from \"../app-interface\";\r\nimport { BoardOptionActions, BoardOptionActionTypes } from \"./types\";\r\n\r\n\r\nexport function setBaordTheme(payload: string): BoardOptionActionTypes {\r\n    return {\r\n        type: BoardOptionActions.SET_GAME_BOARD_OPTIONS,\r\n        payload\r\n    }\r\n}\r\nexport function updateBoardOptions(payload: Partial<IBoardOptions>): BoardOptionActionTypes {\r\n    return {\r\n        type: BoardOptionActions.SET_GAME_BOARD_OPTIONS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setBoardSize(payload: number): BoardOptionActionTypes {\r\n    return {\r\n        type: BoardOptionActions.SET_BOARD_SIZE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setBoardNotation(payload: BoardNotation): BoardOptionActionTypes {\r\n    return {\r\n        type: BoardOptionActions.SET_BOARD_NOTATION,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function reverseBoard(payload: boolean): BoardOptionActionTypes {\r\n    return {\r\n        type: BoardOptionActions.REVERSE_BOARD,\r\n        payload\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect, ConnectedProps} from 'react-redux' \r\n\r\nimport { IRootState } from \"../../store/rootState&Reducer\"\r\nimport {\r\n    downloadGame,\r\n    settingBoard,\r\n    setDepth,\r\n    evaluatePosition,\r\n    analyzeLastGame,\r\n    removePiece,\r\n    setStartPosition,\r\n} from '../../store/gameAnalysis/actions'\r\nimport {setGameVariant} from '../../store/gameOptions/actions'\r\nimport {reverseBoard} from '../../store/boardOptions/actions'\r\n\r\nimport './analysis-page-menu.scss'\r\n\r\n\r\nconst stateMap = (state: IRootState) => ({\r\n    analysis: state.analyze,\r\n    towerTouched: state.board.towerTouched,\r\n    reversedBoard: state.boardOptions.reversedBoard,\r\n    history: state.analyze.gameResult.movesHistory || [],\r\n    GV: state.gameOptions.gameVariant\r\n})\r\n\r\nconst dispatchMap = {\r\n    downloadGame,\r\n    settingBoard,\r\n    reverseBoard,\r\n    setGameVariant,\r\n    setDepth,\r\n    evaluatePosition,\r\n    analyzeLastGame,\r\n    removePiece,\r\n    setStartPosition,\r\n}\r\n\r\nconst analysisMenuConnector = connect(stateMap, dispatchMap)\r\n\r\ntype AnalysisMenuProps = ConnectedProps<typeof analysisMenuConnector>\r\n\r\nexport const AnalizeGameMenu: React.FC<AnalysisMenuProps> = (props: AnalysisMenuProps) => {\r\n    const { \r\n        // downloadGame, \r\n        setGameVariant, \r\n        settingBoard, \r\n        reverseBoard, \r\n        reversedBoard, \r\n        evaluatePosition,\r\n        analysis,\r\n        history,\r\n        analyzeLastGame,\r\n        removePiece,\r\n        GV,\r\n        setStartPosition,\r\n        towerTouched\r\n    } = props\r\n    const {settingPosition, analyzeLastGame: ALG} = analysis\r\n\r\n    const handleGameVariantSelect = (e: any) => {\r\n        const value = e.target.value\r\n        \r\n        setGameVariant(value)\r\n    }\r\n\r\n    const handleClick = (et: string) => {\r\n        if (towerTouched) {\r\n            return\r\n        }\r\n        switch (et) {\r\n            case 'remove': {\r\n                console.log('remove')\r\n                return removePiece(!analysis.removePiece)\r\n            }\r\n            case 'setup': {\r\n                return settingBoard(!settingPosition)\r\n            }\r\n            case 'dowload': {\r\n                return //downloadGame({})\r\n            }\r\n            case 'startPosiotn': {\r\n                return setStartPosition\r\n            }\r\n            case 'analyze': {\r\n                return analyzeLastGame(true)\r\n            }\r\n            case 'reverse': {\r\n                return reverseBoard(!reversedBoard)\r\n            }\r\n            case 'eval': {\r\n                return evaluatePosition(true)\r\n            }\r\n            default:\r\n                break\r\n        }\r\n    }\r\n  \r\n    return (\r\n        <ul className=\"game-analyze-menu\">\r\n            { history.length \r\n                ?   <li className=\"game-analyze-menu_item\" title=\"analyze last game\">\r\n                        <button type=\"button\" onClick={() => handleClick('analyze')}>\r\n                            <span className='material-icons'>zoom_in</span>\r\n                        </button>\r\n                    </li>\r\n                :   null\r\n            }\r\n            <li className=\"game-analyze-menu_item\" title={analysis.removePiece ? 'delete' : 'drag pieces'}>\r\n                <button type=\"button\" onClick={() => handleClick('remove')}>\r\n                    <span className='material-icons'>{analysis.removePiece ? 'pan_tool' : 'delete'}</span>\r\n                </button>\r\n            </li>\r\n            <li className=\"game-analyze-menu_item\" title=\"setup-start-board\">\r\n                <button type=\"button\" onClick={() => handleClick('startPositon')}>\r\n                    sb{/* <span className='material-icons'>sb</span> */}\r\n                </button>\r\n            </li>\r\n            <li className=\"game-analyze-menu_item\" title=\"reverse board\">\r\n                <button type=\"button\" name=\"reverse-board\" onClick={() => handleClick('reverse')}>\r\n                    <span className='material-icons'>change_circle</span>\r\n                </button>\r\n            </li>\r\n            <li className=\"game-analyze-menu_item\" title=\"dowload game result\">\r\n                <button type=\"button\" onClick={() => handleClick('download')}>\r\n                    <span className='material-icons'>file_download</span>\r\n                </button>\r\n            </li>\r\n            <li className=\"game-analyze-menu_item\" title={!settingPosition ? 'setup position' : 'analize position'} >\r\n                <button type=\"button\" name=\"game\" onClick={() => handleClick('setup')}>\r\n                    <span className='material-icons'>{!settingPosition ? 'grid_on' : 'construction'}</span>\r\n                </button>\r\n            </li>\r\n            <li className=\"game-analyze-menu_item\" title=\"evaluate position\" >\r\n                <button type=\"button\" name=\"evaluate\" onClick={() => handleClick('eval')}>\r\n                    <span className='material-icons'>calculate</span>\r\n                </button>\r\n            </li>\r\n          \r\n            <li \r\n                className=\"game-analyze-menu_item gv\"\r\n                title='Choose game variant. International: I Rusian: R Towers: T' \r\n            >\r\n                <select \r\n                    className=\"gv\" \r\n                    name=\"gv\" \r\n                    defaultValue={GV} \r\n                    onChange={handleGameVariantSelect}\r\n                    disabled={ALG}\r\n                >\r\n                    <option value=\"international\">I</option>\r\n                    <option value=\"russian\">R</option>\r\n                    <option value=\"towers\">T</option>\r\n                </select>\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default analysisMenuConnector(AnalizeGameMenu)\r\n\r\n  /* <li className=\"game-analyze-menu_item depth-range_container\" title=\"set evaluation depth\" >\r\n    <label className=\"label-for-depth-range\">\r\n        Depth\r\n    </label>\r\n    <span className=\"depth-value\">{depth}</span>\r\n    <input \r\n        className=\"depth-range\" \r\n        type=\"range\" \r\n        step=\"1\" \r\n        max=\"20\" \r\n        min=\"10\" \r\n        defaultValue=\"15\" \r\n        onChange={handleDepthChange} \r\n    />\r\n</li> */\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\n\r\nimport {\r\n    IRef,\r\n    IAnalysisBoard,\r\n    TowerTouched,\r\n    CellsMap,\r\n    TowersMap,\r\n    IBoardProps,\r\n    TowerConstructor,\r\n    TowerType,\r\n    PieceColor,\r\n    ITowerPosition,\r\n    IBoardToGame,\r\n    IBoardToDraw,\r\n    IMMRResult,\r\n} from '../../store/app-interface'\r\nimport { makeMove } from '../../store/game/actions'\r\nimport { updateAnalysisState, makeNewMove } from '../../store/gameAnalysis/actions'\r\nimport {\r\n    checkMoveTargetCell,\r\n    possibleOutOfMandatory,\r\n    copyObj,\r\n    copyMap,\r\n} from '../../game-engine/gameplay-helper-fuctions'\r\nimport {\r\n    createAnalysisBoard,\r\n    createEmptyBoardForCustomPosition,\r\n    newOnBoardTower,\r\n    createEmptyBoard,\r\n} from '../../game-engine/prestart-help-function-constants'\r\n// import {AnimationDuration} from '../../constants/gameConstants'\r\nimport tur from '../../game-engine/update-towers-functions'\r\nimport mmr from '../../game-engine/mandatory-move-resolver'\r\nimport TowerComponent from '../../game-components/tower/CheckerTower'\r\nimport { Board } from '../../game-components/board/Board'\r\nimport { IRootState } from '../../store/rootState&Reducer'\r\nimport { updateBoardState } from '../../store/board/actions'\r\nimport bms from '../../game-engine/position-evaluator'\r\nimport {reverseBoard} from '../../store/boardOptions/actions'\r\nimport {clearHistory} from '../../store/game/actions'\r\nimport {finishGameSetup} from '../../store/gameOptions/actions'\r\n\r\nconst UnusedTowers = (props: {color: PieceColor, towers: TowersMap}) => {\r\n    const {color, towers} = props\r\n    const subStr = color === PieceColor.w ? 'oW' : 'oB'\r\n    const number = [...towers.keys()].filter((key: string) => key.includes(subStr)).length\r\n    return <span className={`unused-${color}`}>{number}</span>\r\n}\r\n\r\nconst mapState = (state: IRootState) => ({\r\n    gameOptions: state.gameOptions,\r\n    windowSize: state.app.windowSize,\r\n    analysis: state.analyze,\r\n    board: state.board,\r\n    boardOptions: state.boardOptions,\r\n})\r\n\r\nconst mapDispatch = {\r\n    updateAnalysisState,\r\n    makeMove,\r\n    makeNewMove,\r\n    updateBoardState,\r\n    reverseBoard,\r\n    clearHistory,\r\n    finishGameSetup\r\n}\r\n\r\nconst gameAnalizeConnector = connect(mapState, mapDispatch)\r\ntype GameAnalyzeProps = ConnectedProps<typeof gameAnalizeConnector>\r\n\r\ntype AnalysisBoardState = IAnalysisBoard & {[key: string]: any}\r\n\r\nexport class GameBoard extends React.Component<GameAnalyzeProps, AnalysisBoardState> {\r\n    private boardRef: IRef<HTMLDivElement> = React.createRef()\r\n    mmr = mmr\r\n    tur = tur\r\n    bms = bms\r\n    constructor(props: GameAnalyzeProps) {\r\n        super(props);\r\n        console.log(props)\r\n        const Props = {GV: props.gameOptions.gameVariant, size: props.boardOptions.boardSize}\r\n        this.mmr.setProps(Props)\r\n        this.tur.setProps(Props)\r\n        this.tur.setCalBack(this.props.updateBoardState)\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!window) return\r\n        this.props.finishGameSetup(false)\r\n        this.createBoardToAnalysis()\r\n        const {analysis: {depth}} = this.props\r\n        setTimeout(() => {\r\n            const {board, boardOptions} = this.props\r\n            console.log(this.props)\r\n            this.tur.updateCellsPosition(board, boardOptions, this.boardRef.current!);\r\n        },0)\r\n        const props = {\r\n            bestMoveCB: updateBoardState,\r\n            maxDepth: depth,\r\n            evaluationStarted: true\r\n        }\r\n        bms.resetProps(props)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: GameAnalyzeProps) {\r\n        const {\r\n            updateBoardState,\r\n            gameOptions: {gameVariant},\r\n            boardOptions: {reversedBoard},\r\n            analysis: {analyzeLastGame, settingPosition, pieceOrder, startPosition, lastMove},\r\n            boardOptions,\r\n            board: {currentPosition, cellSize, cellsMap},\r\n            board\r\n        } = this.props\r\n\r\n        console.log(this.props)\r\n        const mandatoryMoves = this.mmr.lookForMandatoryMoves(pieceOrder, currentPosition)\r\n        if ((analyzeLastGame && !prevProps.analysis.analyzeLastGame)\r\n            || (settingPosition && !prevProps.analysis.settingPosition)\r\n            || (startPosition && !prevProps.analysis.startPosition)) {\r\n            this.tur.updateCellsPosition(board, boardOptions, this.boardRef.current!)\r\n        }\r\n        if (!settingPosition && prevProps.analysis.settingPosition) {\r\n            if (JSON.stringify(prevProps.board.currentPosition) !== JSON.stringify(currentPosition)) {\r\n                let towers = this.tur.updateTowersToBoard(currentPosition)\r\n                towers = this.tur.updateTowersPosition(cellSize, towers, cellsMap, reversedBoard)\r\n                updateBoardState({\r\n                    currentPosition, towers, mandatoryMoves, mandatoryMoveStep: 0\r\n                 })\r\n            } else {\r\n                const mandatoryMoves = this.mmr.lookForMandatoryMoves(pieceOrder, currentPosition)\r\n                if (mandatoryMoves.length) {\r\n                    updateBoardState({mandatoryMoveStep: 0, mandatoryMoves})\r\n                }\r\n            }\r\n        }\r\n        if (gameVariant !== prevProps.gameOptions.gameVariant) {\r\n            const {updateBoardState, boardOptions} = this.props\r\n            const board = createEmptyBoardForCustomPosition({boardOptions}) as IBoardToDraw\r\n            updateBoardState(board)\r\n            this.tur.updateCellsPosition(board, boardOptions, this.boardRef.current!)\r\n        }\r\n        if ((!settingPosition && pieceOrder !== prevProps.analysis.pieceOrder) \r\n            || lastMove.move !== prevProps.analysis.lastMove.move\r\n            || boardOptions.reversedBoard !== prevProps.boardOptions.reversedBoard) {\r\n            const reversed = this.props.boardOptions.reversedBoard\r\n            const towers = this.tur.updateTowersPosition(cellSize!, board.towers, cellsMap!, reversed)\r\n            updateBoardState({\r\n               currentPosition, mandatoryMoves, mandatoryMoveStep: 0, towers\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const {updateAnalysisState, boardOptions, updateBoardState} = this.props\r\n        updateAnalysisState({\r\n            analyzeLastGame: false,\r\n            movesMainLine: [],\r\n            settingPosition: true,\r\n            movesCurrentLine: [],\r\n            \r\n        })\r\n        const currentPosition = createEmptyBoard(boardOptions.boardSize)\r\n        const positionsTree = new Map()\r\n        positionsTree.set('sp', currentPosition)\r\n        updateBoardState({\r\n            currentPosition, \r\n            positionsTree\r\n        })\r\n    }\r\n\r\n    createBoardToAnalysis = () => {\r\n        const {\r\n            analysis: {analyzeLastGame, gameResult: {movesHistory}, settingPosition},\r\n            boardOptions,\r\n            board: {positionsTree},\r\n            updateBoardState,\r\n            clearHistory,\r\n        } = this.props\r\n        let payload\r\n        if (settingPosition && boardOptions.reversedBoard) {\r\n            reverseBoard(false)\r\n        }\r\n        if (analyzeLastGame && movesHistory && positionsTree?.size) {\r\n            // console.log(currentPosition)\r\n            payload = createAnalysisBoard({boardOptions})\r\n        } else {\r\n            console.log('clear history')\r\n            clearHistory('sdsf' as unknown as null)\r\n            payload = createEmptyBoardForCustomPosition({boardOptions})\r\n        }\r\n        // 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\r\n        updateBoardState({...payload })\r\n    }\r\n\r\n    updateCurrentPositionWhileSettingBoard = (tower: TowerConstructor) => {\r\n        console.log('update current position')\r\n        const {board, updateBoardState} = this.props\r\n        const {wPiecesQuantity, bPiecesQuantity, currentColor, currentType, onBoardPosition} = tower\r\n        const key = onBoardPosition\r\n        const onBoardTower = {...newOnBoardTower(currentColor, currentType), wPiecesQuantity, bPiecesQuantity, key}\r\n        const currentPosition = copyObj(board.currentPosition)\r\n        currentPosition[key].tower = onBoardTower\r\n        updateBoardState({currentPosition})\r\n    }\r\n\r\n    handleUpToMove = (cellKey: string) => {\r\n        const {\r\n            board: {currentPosition, towerTouched, mandatoryMoves, mandatoryMoveStep},\r\n            makeNewMove,\r\n            updateBoardState,\r\n            gameOptions: {gameVariant},\r\n            board,\r\n        } = this.props\r\n        let { mouseDown} = this.props.board\r\n        const from = towerTouched!.key\r\n        let move = `${from}-${cellKey}`, towers: TowersMap, nCP: IBoardToGame = currentPosition\r\n        let _towerTouched = null as unknown as TowerTouched, _mandatoryMoves: IMMRResult[] = [], _mandatoryMoveStep = 0\r\n        if (mandatoryMoves?.length) {\r\n            move = `${from}:${cellKey}`\r\n            const fitMoves = mandatoryMoves!.filter((m: IMMRResult) => m.move.includes(move))\r\n            if (fitMoves[0].move.split(':').length === mandatoryMoveStep as number + 2) {\r\n                const takenPieces = fitMoves[0].takenPieces!\r\n                const tP = gameVariant === 'towers' ? [takenPieces![mandatoryMoveStep]] : takenPieces\r\n                const moveToSave = fitMoves[0]\r\n                towers = this.tur.updateTowersOnMandatoryMoveStep(from, cellKey, board, tP, true)\r\n                makeNewMove({moveToSave})\r\n                nCP = fitMoves[0].position\r\n                mouseDown = false\r\n            } else {\r\n                const tP = fitMoves[0].takenPieces![mandatoryMoveStep]\r\n                _mandatoryMoves = fitMoves\r\n                _mandatoryMoveStep = mandatoryMoveStep! + 1\r\n                towers = this.tur.updateTowersOnMandatoryMoveStep(from, cellKey, board, [tP])\r\n            }\r\n        } else {\r\n            nCP = this.mmr.makeFreeMove(from, cellKey, currentPosition)\r\n            makeNewMove({moveToSave: {move, position: nCP}})\r\n            towers = this.tur.updateTowersAfterMoveAnimation(from, cellKey, board, false, true)\r\n            mouseDown = false\r\n        }\r\n        updateBoardState({\r\n            currentPosition: nCP,\r\n            mouseDown,\r\n            towers,\r\n            mandatoryMoves: _mandatoryMoves,\r\n            mandatoryMoveStep: _mandatoryMoveStep,\r\n            towerTouched: _towerTouched,\r\n        }) \r\n    }\r\n\r\n    handleMouseUp = (event: any) => {\r\n        const {\r\n            analysis: {settingPosition},\r\n            boardOptions: {reversedBoard},\r\n            board: {towerTouched, moveDone, cellsMap, cellSize, towers},\r\n            board,\r\n        } = this.props\r\n        \r\n        if (!towerTouched || moveDone) {\r\n            return\r\n        }\r\n        const {clientX, clientY} = event.type === 'touchend' ? event.changedTouches['0'] : event\r\n        let cellsToCheck =  towerTouched.posibleMoves as CellsMap\r\n        if (settingPosition) {\r\n            cellsToCheck = cellsMap\r\n        }\r\n        const cellKey = checkMoveTargetCell({x: clientX, y: clientY}, cellsToCheck, cellSize, this.boardRef)\r\n        if (!cellKey) {\r\n            console.log('out of board')\r\n            this.tur.cancelTowerTransition({...board, reversed: reversedBoard})\r\n        } else {\r\n            if (!settingPosition) {\r\n                this.handleUpToMove(cellKey)\r\n            } else if (!towers.get(cellKey)) {\r\n                this.handleSettingPieces(cellKey)\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeTowers = (t1: TowerConstructor, t2: TowerConstructor): TowersMap => {\r\n        const {towers} = this.props.board\r\n        const tower = copyObj(t1) as TowerConstructor\r\n        tower.wPiecesQuantity = t1.wPiecesQuantity! + t2.wPiecesQuantity!\r\n        tower.bPiecesQuantity = t1.bPiecesQuantity! + t2.bPiecesQuantity!\r\n        if (t1.currentColor !== t2.currentColor) {\r\n            tower!.currentColor = t2.currentColor\r\n        }\r\n        towers!.delete(t2.onBoardPosition)\r\n        towers!.set(tower.onBoardPosition, tower as TowerConstructor)\r\n        this.updateCurrentPositionWhileSettingBoard(tower)\r\n        return towers!\r\n    }\r\n\r\n    setTowerOnBoard = (cellKey: string, reversed = false):TowersMap => {\r\n        const { towers, cellsMap, cellSize} = this.props.board\r\n        const towerTouched = this.props.board.towerTouched\r\n        const tower = towers!.get(towerTouched!.key)!\r\n        tower.positionInDOM = this.tur.calcTowerPosition(cellKey, cellsMap!, cellSize!, reversed)\r\n        tower.onBoardPosition = cellKey\r\n        const _towers = copyMap(towers!)\r\n        _towers!.set(cellKey, tower)\r\n        _towers!.delete(towerTouched!.key)\r\n        this.updateCurrentPositionWhileSettingBoard(tower)\r\n        return _towers\r\n    }\r\n\r\n    handleSettingTowers = (tower: TowerConstructor) => {\r\n        const {\r\n            analysis: {removePiece},\r\n            updateBoardState,\r\n            boardOptions: {reversedBoard}, \r\n            board: {towerTouched, towers},\r\n            board,\r\n        } = this.props\r\n        const mergingTower = towers!.get(towerTouched!.key)\r\n        const case1 = tower.bPiecesQuantity > 0 \r\n            && tower.wPiecesQuantity > 0 \r\n            && mergingTower!.wPiecesQuantity > 0\r\n            && mergingTower!.bPiecesQuantity > 0\r\n        const case2 = tower.currentColor === mergingTower!.currentColor\r\n            && mergingTower!.wPiecesQuantity > 0\r\n            && mergingTower!.bPiecesQuantity > 0\r\n        const case3 = tower.currentColor !== mergingTower!.currentColor\r\n            &&tower.bPiecesQuantity > 0 \r\n            && tower.wPiecesQuantity > 0\r\n        if (!case1 && !case2 && !case3 && tower.onBoardPosition !== mergingTower?.onBoardPosition) {\r\n            console.log(tower, mergingTower)\r\n            const _towers = this.mergeTowers(tower, mergingTower!)\r\n            let TT = null as unknown as TowerTouched\r\n            if(!removePiece) {\r\n                const {key} = towerTouched!\r\n                const index = parseInt(key.slice(4))\r\n                if (index > 0) {\r\n                    const nextKey = `${key.slice(0, 4)}${index - 1}`\r\n                    TT = {...towerTouched, key: nextKey} as TowerTouched\r\n                    updateBoardState({towers: _towers, towerTouched: TT})\r\n                } else {\r\n                    updateBoardState({towers: _towers, mouseDown: false, towerTouched: TT})\r\n                }\r\n            }\r\n        } else {\r\n            this.tur.cancelTowerTransition({...board, reversed: reversedBoard})\r\n        }  \r\n    }\r\n\r\n    handleSettingPieces = (cellKey: string) => {\r\n        const {\r\n            updateBoardState,\r\n            board: {towerTouched, towers},\r\n            board,\r\n        } = this.props\r\n        let tower = towers!.get(cellKey)\r\n        const reversed = this.props.boardOptions.reversedBoard\r\n        if (!tower) {\r\n            const _towers = this.setTowerOnBoard(cellKey, reversed)\r\n            const currentPosition = copyObj(board.currentPosition)\r\n            const {currentColor, currentType} = _towers.get(cellKey) as TowerConstructor\r\n            currentPosition[cellKey].tower = newOnBoardTower(currentColor, currentType)\r\n            let TT = null as unknown as TowerTouched\r\n            const {key} = towerTouched!\r\n            const index = parseInt(key.slice(4))\r\n            if (index > 0) {\r\n                const nextKey = `${key.slice(0, 4)}${index - 1}`\r\n                TT = {...towerTouched, key: nextKey} as TowerTouched\r\n                updateBoardState({towers: _towers, currentPosition, towerTouched: TT})\r\n            } else {\r\n                updateBoardState({towers: _towers, mouseDown: false, currentPosition, towerTouched: TT})\r\n            }\r\n        } else if (this.props.gameOptions.gameVariant === 'towers') {\r\n            this.handleSettingTowers(tower)\r\n        } else {\r\n            this.tur.cancelTowerTransition({...board, reversed}) \r\n        }\r\n    }\r\n\r\n    handleRemoveTower = (tower: TowerConstructor) => {\r\n        const towers = copyMap(this.props.board.towers)\r\n        const {boardOptions: {reversedBoard}, updateBoardState, board: {cellSize}, board} = this.props\r\n        const {onBoardPosition, wPiecesQuantity, bPiecesQuantity} = tower\r\n        const towersKeysArray = [...this.props.board.towers.keys()]\r\n        const whiteUnusedQuantity = towersKeysArray.filter((v: string) => v.includes('oW')).length\r\n        const blackUnusedQuantity = towersKeysArray.filter((v: string) => v.includes('oB')).length\r\n        const currentPosition = copyObj(board.currentPosition)\r\n        currentPosition[onBoardPosition].tower = null\r\n        updateBoardState({currentPosition})\r\n        towers.delete(onBoardPosition)\r\n        for (let i = 0; i < wPiecesQuantity; i++) {\r\n            const key = `oW w${whiteUnusedQuantity + i}`\r\n            const positionInDOM = this.tur.calcPositionOutboardTowers(key, cellSize, reversedBoard) as ITowerPosition\r\n            const wTower = new TowerConstructor({\r\n                currentColor: PieceColor.w,\r\n                positionInDOM,\r\n                onBoardPosition: key\r\n            })\r\n            console.log(positionInDOM, key, reversedBoard, wTower)\r\n            towers.set(key, wTower)\r\n        }\r\n        for (let i = 0; i < bPiecesQuantity; i++) {\r\n            const key = `oB b${blackUnusedQuantity + i}`\r\n            const positionInDOM = this.tur.calcPositionOutboardTowers(key, cellSize, reversedBoard) as ITowerPosition\r\n            \r\n            const bTower = new TowerConstructor({\r\n                currentColor: PieceColor.b,\r\n                positionInDOM,\r\n                onBoardPosition: key\r\n            })\r\n            console.log(positionInDOM, key, reversedBoard, bTower)\r\n            towers.set(key, bTower)\r\n        }\r\n        updateBoardState({towers})\r\n    }\r\n\r\n    handleRemovePiece = (key: string) => {\r\n        const {board: {cellSize}, board, boardOptions: {reversedBoard}, updateBoardState} = this.props\r\n        const currentPosition = copyObj(board.currentPosition)\r\n        if (!currentPosition[key]) {\r\n            if (this.props.board.towerTouched) {\r\n                this.tur.cancelTowerTransition({...board, reversed: reversedBoard})\r\n            }\r\n            return console.error(key, currentPosition)\r\n        }\r\n        currentPosition[key].tower = null\r\n        const towers = copyMap(this.props.board.towers!)\r\n        const tower = towers.get(key)! as TowerConstructor\r\n        if (this.props.gameOptions.gameVariant === 'towers' && (tower.wPiecesQuantity + tower.bPiecesQuantity) > 1) {\r\n            return this.handleRemoveTower(tower)\r\n        }\r\n        let outboardKey = tower.currentColor === PieceColor.w ? `oW w` : 'oB b'\r\n        const outboardPicesNumber = [...towers.values()].filter(t => t.onBoardPosition.includes(outboardKey)).length\r\n        outboardKey = `${outboardKey}${outboardPicesNumber}`\r\n        tower.onBoardPosition = outboardKey\r\n        tower.currentType = TowerType.m\r\n        tower.positionInDOM = this.tur.calcPositionOutboardTowers(outboardKey, cellSize, reversedBoard)\r\n        towers.set(outboardKey, tower)\r\n        towers.delete(key)\r\n        // console.log(towers, tower, key)\r\n        updateBoardState({towers, currentPosition, mouseDown: false, towerTouched: null as unknown as TowerTouched})\r\n    }\r\n    \r\n    handleMouseMove = (event: any) => {\r\n        const {board: {towerTouched, moveDone, mouseDown}, analysis: {settingPosition}, updateBoardState} = this.props\r\n        if (!towerTouched || moveDone || (!mouseDown && !settingPosition)) {\r\n            return\r\n        }\r\n        const {key, startCursorPosition: SCP, startTowerPosition: STP} = towerTouched;\r\n        const {clientX, clientY} = event.type === 'touchmove' ? event.changedTouches['0'] : event\r\n        const towers = copyMap(this.props.board.towers!)\r\n        const tower = copyObj(towers.get(key))! as TowerConstructor\r\n        const newPosition = {x: STP.x + clientX - SCP.x, y: STP.y + clientY - SCP.y}\r\n        const pos = tower.positionInDOM!\r\n        tower.positionInDOM = newPosition\r\n        const deltaX = Math.abs(pos.x - newPosition.x)\r\n        const deltaY = Math.abs(pos.y - newPosition.y)\r\n        if ( deltaX + deltaY >= 6) {\r\n            towers.set(key, tower)\r\n            updateBoardState({towers})\r\n        }\r\n    }\r\n\r\n    handleSettingPositionMouseDown = (props: {[key: string]: any}) => {\r\n        const {analysis: {removePiece}, board, board: {cellSize, cellsMap, towers}, updateBoardState} = this.props\r\n        const {target, clientX, clientY} = props\r\n        const reversed = this.props.boardOptions.reversedBoard\r\n        const towerKey = (target as HTMLDivElement).getAttribute('data-indexes') as string\r\n        if (!towerKey) {\r\n            this.tur.cancelTowerTransition({...board, reversed}) \r\n        }\r\n        console.log(target, removePiece)\r\n        if (removePiece) {\r\n            return this.handleRemovePiece(towerKey)\r\n        } else if (!removePiece && this.props.board.towerTouched) {\r\n            const cellKey = checkMoveTargetCell({x: clientX, y: clientY}, cellsMap, cellSize, this.boardRef)\r\n            if (cellKey) {\r\n                return this.handleSettingPieces(cellKey)\r\n            }\r\n            return\r\n        } else {\r\n            const tower = towers!.get(towerKey)!\r\n            const towerTouched: TowerTouched = {\r\n                key: towerKey,\r\n                posibleMoves: new Map(),\r\n                startCursorPosition: {x: clientX, y: clientY},\r\n                startTowerPosition: tower.positionInDOM!,\r\n                towerColor: tower.currentColor,\r\n                towerType: tower.currentType as TowerType\r\n            }\r\n            updateBoardState({towerTouched, mouseDown: true})\r\n        }\r\n    }\r\n\r\n    handleMouseDown = (event: any) => {\r\n        console.log(event)\r\n        const {\r\n            analysis: {pieceOrder, settingPosition},\r\n            board: {mandatoryMoves, cellsMap, towers, currentPosition},\r\n            updateBoardState\r\n        } = this.props\r\n        const {target, clientX, clientY} = event.type === 'touchstart' ? event.changedTouches['0'] : event\r\n        const classList = (target as HTMLDivElement).classList\r\n        if (!classList.contains('checker-tower')) return\r\n        if (settingPosition) return this.handleSettingPositionMouseDown({target, clientX, clientY})\r\n        if (!classList.contains(pieceOrder)) return\r\n        const towerKey = (target as HTMLDivElement).getAttribute('data-indexes') as string\r\n        const tower = towers!.get(towerKey)!\r\n        let posibleMoves: CellsMap\r\n        if (mandatoryMoves?.length) {\r\n           posibleMoves = possibleOutOfMandatory(this.props.board, towerKey)\r\n        } else {\r\n            posibleMoves = tower.currentType === TowerType.m \r\n            ? this.mmr.manTowerFreeMoves(tower, currentPosition!, cellsMap!)\r\n            : this.mmr.kingTowerFreeMoves(towerKey, currentPosition!, cellsMap!)\r\n        }\r\n        if (!posibleMoves.size) {\r\n            // sound\r\n            return\r\n        }\r\n        const towerTouched: TowerTouched = {\r\n            key: towerKey,\r\n            posibleMoves,\r\n            startCursorPosition: {x: clientX, y: clientY},\r\n            startTowerPosition: tower.positionInDOM!,\r\n            towerColor: tower.currentColor,\r\n            towerType: tower.currentType as TowerType\r\n        }\r\n        updateBoardState({towerTouched, mouseDown: true})\r\n    }\r\n       \r\n    contextMenuHandler = (e: React.MouseEvent) => {\r\n        const {analysis: {settingPosition}, updateBoardState} = this.props\r\n        e.preventDefault()\r\n        if (!settingPosition) { return }\r\n        const target = e.target as HTMLElement\r\n        if (!target.classList.contains('checker-tower')) { return }\r\n        const key = target.getAttribute('data-indexes')!\r\n        const tower = copyObj(this.props.board.towers!.get(key) as TowerConstructor)! as TowerConstructor\r\n        tower.currentType = tower.currentType === TowerType.m ? TowerType.k : TowerType.m\r\n        const towers = copyMap(this.props.board.towers!)\r\n        towers!.set(key, tower)\r\n        updateBoardState({towers})\r\n    }\r\n\r\n    render() {\r\n        const {boardOptions, board: {towerTouched}, board} = this.props\r\n        const {towers, mandatoryMoves, mandatoryMoveStep, lastMoveSquares} = board\r\n        const boardProps = {boardOptions, posibleMoves: towerTouched?.posibleMoves, lastMove: lastMoveSquares}  as IBoardProps\r\n        const {boardSize, boardTheme, reversedBoard} = boardOptions\r\n        const WrapperClass = `board__wrapper ${boardTheme} h${boardSize}v${boardSize}${reversedBoard ? ' reversed' : ''}`;\r\n        const mandatoryTowers = (mandatoryMoves || []).map(m => m.move.split(':')[mandatoryMoveStep || 0])\r\n        const Towers = Array.from(towers!.values()).map((tower: TowerConstructor, i: number) => {\r\n            const mt = mandatoryTowers.includes(tower.onBoardPosition)\r\n            return <TowerComponent {...tower} key={tower.onBoardPosition} mandatory={mt} />\r\n        })\r\n        return (\r\n            <section\r\n                    onContextMenu={this.contextMenuHandler}\r\n                    onMouseMove={this.handleMouseMove}\r\n                    onMouseUp={this.handleMouseUp}\r\n                    onMouseDown={this.handleMouseDown}\r\n                    onTouchStart={this.handleMouseDown}\r\n                    onTouchMove={this.handleMouseMove} \r\n                    onTouchEnd={this.handleMouseUp}\r\n                    className={WrapperClass}\r\n                    ref={this.boardRef}\r\n            >\r\n                <div className=\"piece-boxes-container\">\r\n                    <div className=\"pieces-box white-b\">\r\n                        <UnusedTowers color={PieceColor.w} towers={towers!} />\r\n                    </div>\r\n                    <div className=\"pieces-box black-b\">\r\n                       <UnusedTowers color={PieceColor.b} towers={towers!} />\r\n                    </div>\r\n                </div>\r\n                {Towers}\r\n                <Board {...boardProps} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport const GameBoardCompopnent =  gameAnalizeConnector(GameBoard)\r\n\r\nexport default GameBoardCompopnent\r\n","import React, { Suspense } from 'react'\r\nimport {useSelector} from 'react-redux'\r\n\r\nimport { SideBar } from '../../page-components/Sidebar'\r\nimport Spinner from '../../page-components/spinners/Spinner'\r\nimport { IRootState } from '../../store/rootState&Reducer'\r\nimport AnalysisPageMenu from './AnalysisPageMenu'\r\nimport { MovesHistory } from '../../game-components/moves-history/MovesHistory'\r\nimport AnalysisBoard from './AnalysisBoard'\r\n\r\nimport './analyze-page.scss'\r\n\r\n\r\nexport const AnalysisPage: React.FC<{}> = (props) => {\r\n    const portrait = useSelector((state: IRootState) => state.app.portrait)\r\n    const boardSize = useSelector((state: IRootState) => state.boardOptions.boardSize)\r\n    const MainClass = `${portrait ? \"portrait\" : \"\"} h${boardSize}v${boardSize}`\r\n    return (\r\n        <Suspense fallback={<Spinner />}>\r\n            <div className={portrait ? \"portrait page analyze-page noselect\" : \"page analyze-page noselect\"}>\r\n                <SideBar side=\"left\">\r\n                    <AnalysisPageMenu />\r\n                </SideBar>\r\n                <main className={MainClass}>\r\n                    <AnalysisBoard />\r\n                </main>\r\n                <SideBar side=\"right\">\r\n                    <MovesHistory />\r\n                </SideBar>\r\n            </div>\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default AnalysisPage\r\n"],"sourceRoot":""}