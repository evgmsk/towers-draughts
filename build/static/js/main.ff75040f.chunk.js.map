{"version":3,"sources":["store/app-interface.ts","constants/gameConstants.ts","game-engine/gameplay-helper-fuctions.ts","store/game/types.ts","store/gameAnalysis/types.ts","store/board/types.ts","store/gameOptions/types.ts","game-engine/prestart-help-function-constants.ts","game-engine/update-towers-functions.ts","store/boardOptions/types.ts","assets/i18n.ts","page-components/spinners/Spinner.js","game-engine/common-fn-moves-resolver.ts","game-engine/king-mandatory-move-resolver.ts","game-engine/mandatory-move-resolver.ts","store/gameOptions/actions.ts","common/LogoIcon.tsx","assets/game-example.gif","pages/home/Bg-board.tsx","pages/home/Home.tsx","AppRoutes.tsx","store/user/types.ts","page-components/MobileDropdownNav.tsx","page-components/Navbar.tsx","store/user/actions.ts","page-components/Header.tsx","assets/icons8-github.svg","store/app/types.ts","page-components/Footer.tsx","store/app/actions.ts","App.tsx","reportWebVitals.ts","store/game/reducers.ts","store/gameOptions/reducers.ts","store/user/reducer.ts","store/app/reducers.ts","store/clock/types.ts","store/clock/reducers.ts","store/gameAnalysis/reducers.ts","store/board/reducers.ts","store/boardOptions/reducers.ts","store/rootState&Reducer.ts","store/sagas/watcherGame.ts","store/sagas/watcherGamePresets.ts","store/sagas/watcherTimer.ts","store/sagas/watcherGameAnalysis.ts","store/sagas/watcherBoard.ts","store/sagas/sagaRoot.ts","store/index.ts","index.tsx"],"names":["TowerType","PieceColor","BoardNotation","Online","TowerConstructor","props","onBoardPosition","currentColor","wPiecesQuantity","bPiecesQuantity","positionInDOM","currentType","veiw","mandatoryMove","this","m","w","b","x","y","TopLegendValues","SideLegendValues","Array","fill","map","i","j","DefaultTime","BaseBoardSize","StandartTiming","PrestartTimeLimit","Interval","BaseCellSize","AnimationDuration","CellTowerRatio","sampleLink","RoutesPath","home","game","settings","analysis","stats","rules","auth","profile","RoutesTitle","analyze","defaultWhiteTowerCells8x8","defaultBlackTowerCells8x8","board8x8EmptyCells","defaultWhiteTowerCells","concat","defaultBlackTowerCells","filter","includes","board10x10EmptyCells","getDefaultBlackTowersCells","boardSize","getDefaultWhiteTowersCells","splitMove","move","split","oppositColor","color","copyMap","board","nm","Map","forEach","v","k","isArray","set","copyObj","Object","keys","reduce","acc","possibleOutOfMandatory","state","key","posibleMoves","MS","mandatoryMoveStep","mandatoryMoves","cellsMap","step","get","compareMaps","map1","map2","JSON","stringify","entries","filterArrayByLength","arr","maxLength","val","length","cont","push","ended","crossDirections","dir","directions","checkMoveTargetCell","pos","pM","cellSize","ref","possibleCells","size","boardRect","current","querySelector","getBoundingClientRect","targetCell","cellX","cellY","Math","sqrt","pow","checkIfNumberOfKingsChanged","board1","board2","calcKings","values","cell","tower","convertToMovesHistory","result","white","black","getCellSize","refElem","boardHtmlRect","width","left","right","cellWidth","round","GameActions","SET_MOVE_ORDER","SET_GAME_STARTED","MAKE_MOVE","CONFIRM_START_GAME","UPDATE_GAME_STATE","INEFFECTIVE_MOVE","SAVE_MOVE_TO_HISTORY","SET_PLAYER_MOVE_ORDER","SET_GAME","END_GAME","OFFER_DRAW","DECLINE_DRAW","RIVAL_OFFER_DRAW","SURRENDER","SET_PORTRAIT","SET_GAME_MODE","CANCEL_GAME","NEW_GAME_VS_PC","NEW_GAME_VS_PLAYER","CLEAR_HISTORY","GameAnalysisActions","ANALYZE_LAST_GAME","DOWNLOAD_GAME","SAVE_GAME_RESULT","SETTING_BOARD","UPDATE_POSITION","STEP_FORWARD","STEP_BACK","SAVE_POSITION","GO_TO_POSITION","CREATE_POSITION_TREE","UPDATE_ANALYSIS_STATE","EVALUATE_POSITION","SET_DEPTH","PLAY_MOVES","SET_START_POSITION","REMOVE_PIECE","START_NEW_LINE","MAKE_NEW_MOVE","BoardActions","CREATE_GAME_BOARD","CREATE_SETUP_BOARD","CREATE_ANALYSIS_BOARD","UPDATE_BOARD_STATE","UPDATE_BOARD_SIZE","UPDATE_BOARD_MAP","TURN","UPDATE_POSITION_TREE","UNDO_LAST_MOVE","GameOptionActions","CHOOSE_COLOR","SET_TIME_LIMIT","SET_TIME_ADDS","SET_GAME_TIMING","SET_RIVAL","SET_PLAYER","SET_GAME_VARIANT","SET_RIVAL_ONLINE_STATUS","SET_PLAYER_ONLINE_STATUS","SET_GAME_TYPE","SET_RIVAL_LEVEL","FIND_RIVAL","SET_RIVAL_TYPE","FINISH_GAME_SETUP","WAIT_RIVAL","CANCEL_RIVAL_WAITING","REMATCH_REQUEST","createEmptyBoard","GameBoard","boardKey","neighbors","defineNeighborCells","createStartBoardToDraw","boardOptions","reversedBoard","currentPosition","createStartBoard","positionsTree","towers","createDefaultTowers","createCellsMap","animationStarted","moveDone","mouseDown","lastMoveSquares","createEmptyBoardForCustomPosition","createOutBoardTowers","createAnalysisBoard","defineCellDomPosition","reversed","topInd","slice","reverse","sideInd","indexOf","parseInt","updateCellsMap","newMap","topLegend","sideLegend","leftUp","leftDown","rightUp","rightDown","newOnBoardTower","DBTC","DWTC","defaultTowerProps","oBKey","tur","previousPosition","callBack","setCalBack","cb","calcPositionOutboardTowers","boardElem","document","boardHeight","height","towerWidth","dY","bottom","calcTowerPosition","cellPosition","towerElem","console","error","updateTowersPosition","_towers","updateCellsPosition","boardRef","newCellSize","newCellMap","newTowers","from","to","log","checkTowerTypeChanging","delete","towerTouched","last","GV","history","currentPositionKey","join","tP","isTowers","updateTowersAfterMoveAnimation","middlePieceKey","middlePiece","takenTower","cuptureTower","_tower","newMiddleTower","wT","BaseMoveResolver","BoardOptionActions","SET_GAME_BOARD_OPTIONS","REVERSE_BOARD","SET_BOARD_THEME","SET_BOARD_NOTATION","SET_BOARD_SIZE","I18n","en","shortMainTitle","mainTitle","newGame","submitLog","submitReg","logTitle","regTitle","logMess","regMess","modeButtonLog","modeButtonReg","labelPassword","labelNickname","submitButton","about","about_continue","play","ru","Spinner","className","onClick","cancelRivalWaiting","title","setProps","getCapturedPieceKey","getInterval","c","newTower","type","start","end","getMoveDirection","interval","nextCellKey","direction","startCellKey","diagonal","nextCell","preDirected","diagonals","availibleDirections","d","getDiagonal","MoveResolveCommons","lookForTowerFreeMoves","checkNeighborsIsEmpty","lookForKingFreeMoves","lookForAllPosibleMoves","moves","getFromToKeys","moveArr","repetition","lastIndexOf","Error","makeMoveWithoutTakingPieces","_board","nextMoves","fromTower","whiteMove","checkLastLine","getBoardFromTowers","value","getNewOrder","newPieceOrder","moveOrder","pieceOrder","playerTurn","name","getPropsToMakeFreeMove","position","makeFreeMove","moveToSave","manTowerFreeMoves","cellNeighbors","towerLine","neighborLine","kingTowerFreeMoves","moveSteps","cellKey","makeMandatoryMove","nextMove","makeMandatoryMoveStep","newBoard","updateBoardOnMandatoryMoveStep","fN","moveLength","getCapturedTowers","diag","currentLine","getDiagonals","checkDiagonalForKingMove","KingMandatoryMoveResolver","checkFirstKingDiagonals","checkKingNextSteps","firstMove","takenPieces","_moves","checkDiagonalToMadatoryMove","cM","movesToCheckContinue","compleatedMoves","nextStepResult","checkNextMoveStepDirections","_m","startsWith","resultMoves","checkIfDiagonalNotFit","takenPiece","notTaken","nMove","lastCell","MRC","mmr","lookForAllMoves","lookForMandatoryMoves","checkMandatoryMoveNextStep","moveArray","exludedDirection","checkManDirection","checkMandatoryMoveNextSteps","mr","gameVariantMoveContinueRestriction","removeTakenPieces","checkKingMandatoryMoves","checkManMandatoryMoves","nBoard","startProps","checkManFristMandatoryStep","preMove","neighborCell","KMMR","setRivalLevel","payload","setPlayerColor","setOpponentType","setTiming","findRival","finishGameSetup","setGameVariant","requestRematch","setGameType","Logo","BGBoard","Board","h","Home","language","useSelector","store","user","useHistory","i18n","href","fallback","target","rel","src","gameExample","alt","GameAnalizePage","lazy","GamePage","Router","path","exact","React","memo","UserActions","MobileMenu","useState","dropdown","setDropdown","visible","setVisible","mobileMenuClass","createRef","handleClickOutside","ev","stopPropagation","elem","contains","useEffect","window","addEventListener","removeEventListener","e","preventDefault","setTimeout","mapDispatch","setLanguage","connector","connect","winWidth","app","windowSize","DuoLanguageSwitcher","lang","langs","blur","handleClick","innerWidth","mobile","setMobile","isAuthLogo","logo","event","Header","AppActions","close","setWindowSize","setPortrait","token","portrait","gameMode","handleResize","innerHeight","abs","onClose","referrerPolicy","git","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InitialGameState","gameConfirmed","gameStarted","playerColor","rivalOfferedDraw","ineffectiveMoves","InitialGameOptionsState","gameVariant","timing","timeToGame","adds","rivalType","rivalLevel","gameSetupFinished","waitingRival","gameType","InitialUserState","userId","rating","navigator","AppDefaultState","commonChat","gameChat","ClockActions","InitialClockState","whiteClock","timeToFirstMove","blackClock","InitialGameAnalysisState","gameResult","analyzeLastGame","settingPosition","movesMainLine","movesCurrentLine","lastMove","depth","evaluate","removePiece","startPosition","InitialBoardState","towerView","InitialBoardOptionsState","boardTheme","withOutLegend","lengendsInside","boardNotation","r","InitialState","gameOptions","clock","AppReducers","action","GM","UA","movesHistory","workerNewGameVSPlayer","workerNewGameVsPC","checkDraw","workerPlayerClockAfterMove","workerMove","workerGameEnd","workerSurrender","resolveEndGame","cancelGameWorker","watcherGame","put","GOA","select","random","BOA","gamePayload","delay","rival","numberOfKingsChanged","draw","winner","reason","PC","date","Date","analysisPayload","index","takeLatest","workerGameVariant","watcherPreGame","GA","workerGameClock","workerStartClock","workerPreTicks","watcherTimer","workerUpdatePosition","workerStepForward","workerGoToPosition","workerPlayMoves","workerStepBack","workerSettingBoard","workerGameAnalysis","workerCurrentLine","workerMainLine","workerNewMove","workerStartPosition","watcherAnalysis","nextLastMove","nextPositionKey","newCurrentLine","updateTowersToBoard","nextIndex","movesLine","_positionsTree","newKey","currentPositoin","_positionTree","clear","paylaod","workerGameBoard","workerSetupBoard","workerBoardSize","workerAnalysisBoard","animateFreeMove","animateMandatoryTowerStep","animateMandatoryStep","animateMandatoryMove","workerTurn","workerUndo","watcherBoard","BA","relocateTower","newState","finalizeSimpleMove","totalSteps","capturedTowerKey","finalizeMandatoryMoveStep","isLast","pKey","boardProps","boardPayload","sagaRoot","all","watcherAnalsis","sagaMiddleware","createSagaMiddleware","storeFactory","data","middleware","composeWithDevTools","applyMiddleware","rootReducer","combineReducers","createStore","run","ReactDOM","render","StrictMode","getElementById","dispatch"],"mappings":"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","file":"static/js/main.ff75040f.chunk.js","sourcesContent":["// app state\r\nexport interface IApp {\r\n    windowSize: {width: number, height: number}\r\n    portrait: boolean\r\n    theme?: string\r\n    message?: {content: string, exposition?: string}\r\n    commonChat: IMessage[]\r\n    gameChat: IMessage[]\r\n}\r\n\r\nexport interface IMessage {content: string, from: string, to: string, date: Date, emoji: number, }\r\n\r\nexport interface IUserState extends IUser{\r\n    name: string | null\r\n    token: string | null\r\n    userId: string | null\r\n    rating: number\r\n    language: string\r\n    notifications: [{[key: string]: any}]\r\n}\r\n\r\n// timer interfaces\r\nexport interface ITimer {\r\n    min: string;\r\n    sec: string;\r\n}\r\n\r\nexport interface IClock {\r\n    timeToGame: number\r\n    adds?: number \r\n    timeToFirstMove?: number\r\n}\r\n\r\nexport interface Timing {\r\n    timeToGame: number,\r\n    adds: number\r\n}\r\n\r\nexport interface IError {\r\n    message: string | null\r\n};\r\n\r\n// boardtodraw\r\nexport enum TowerType {\r\n    m = 'man',\r\n    k = 'king'\r\n}\r\n\r\nexport enum PieceColor {\r\n    b = 'black',\r\n    w = 'white'\r\n}\r\n\r\nexport enum BoardNotation {\r\n    r = 'chess',\r\n    i = 'international'\r\n}\r\n\r\nexport interface IBoardAndTowers extends IBoardToDraw {\r\n    lastMoveSquares: string[]\r\n    towerView: string,\r\n    currentPosition: IBoardToGame\r\n    mandatoryMoveStep: number\r\n    animationStarted: boolean\r\n    moveDone: boolean\r\n}\r\n\r\nexport interface IAnalysisState {\r\n    gameResult: IGameResult\r\n    settingPosition: boolean\r\n    pieceOrder: PieceColor\r\n    movesMainLine?: string[]\r\n    analyzeLastGame: boolean\r\n    movesCurrentLine: string[]\r\n    lastMove: {index: number, move: string}\r\n    depth: number\r\n    evaluate: boolean\r\n    removePiece: boolean\r\n    startPosition: boolean,\r\n}\r\n\r\nexport type CellsMap = Map<string, ITowerPosition>\r\n\r\nexport interface IBoardProps {boardOptions: IBoardOptions, posibleMoves?: CellsMap, lastMove: string[]}\r\n\r\nexport interface IBoardToDraw {\r\n    cellsMap: CellsMap\r\n    cellSize: number\r\n    towerTouched?: TowerTouched\r\n    posibleMoves?: CellsMap\r\n    towers: TowersMap\r\n    mouseDown: boolean\r\n    mandatoryMoves?: IMMRResult[]\r\n    positionsTree?: Map<string, IBoardToGame>\r\n    lastMoveSquares: string[]\r\n    currentPosition: IBoardToGame\r\n}\r\n\r\nexport interface IGameBoard extends IBoardToDraw{\r\n    mandatoryMoveStep?: number;\r\n    mandatoryMovesChecked?: boolean;\r\n    animationStarted?: boolean;\r\n    moveDone?: boolean;\r\n    currentPosition: IBoardToGame,\r\n}\r\n\r\nexport interface IAnalysisBoard extends IBoardToDraw{\r\n    mandatoryMoveStep?: number;\r\n    moveDone?: boolean    \r\n}\r\n\r\nexport interface ICell {\r\n    type?: 'light' | 'dark';\r\n    indexes?: string;\r\n    [propName: string]: any;  \r\n}\r\n\r\n// towers\r\nexport interface ITowerPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type TowersMap = Map<string, TowerConstructor>\r\n\r\nexport interface IRef<T> {\r\n    readonly current: T | null\r\n}\r\n\r\nexport type NeighborsKeys = 'leftUp' | 'leftDown' | 'rightUp' | 'rightDown'\r\n\r\nexport interface ICheckerTower  {\r\n    currentType?: TowerType;\r\n    currentColor: PieceColor;\r\n    wPiecesQuantity?: number;\r\n    bPiecesQuantity?: number;\r\n    positionInDOM?: ITowerPosition;\r\n    onBoardPosition: string;\r\n    [key: string]: any;\r\n}\r\n\r\n\r\nexport interface INewGameProps {\r\n    gameKey: string\r\n    white: IPlayer,\r\n    black: IPlayer,\r\n    whiteClock: IClock,\r\n    blackClock: IClock,\r\n    moveOrder: IMoveOrder\r\n}\r\n\r\nexport class TowerConstructor implements ICheckerTower {\r\n    onBoardPosition: string;\r\n    currentColor: PieceColor;\r\n    wPiecesQuantity: number;\r\n    bPiecesQuantity: number;\r\n    positionInDOM?: ITowerPosition;\r\n    currentType: TowerType;\r\n    veiw?: string;\r\n    mandatoryMove?: boolean;\r\n    constructor(props: ICheckerTower ) {\r\n        this.currentType = props.currentType || TowerType.m;\r\n        this.currentColor = props.currentColor;\r\n        this.wPiecesQuantity = props.wPiecesQuantity || (props.currentColor === PieceColor.w ? 1 : 0);\r\n        this.bPiecesQuantity = props.bPiecesQuantity || (props.currentColor === PieceColor.b ? 1 : 0);\r\n        this.positionInDOM = props.positionInDOM || {x: 0, y: 0};\r\n        this.onBoardPosition = props.onBoardPosition\r\n        this.veiw = props.veiw || 'face'\r\n        this.mandatoryMove = props.mandatoryMove || false\r\n    }\r\n}\r\n\r\nexport type PartialTower = Partial<TowerConstructor>\r\n\r\n// game\r\nexport interface IMoveOrder {\r\n    pieceOrder: PieceColor\r\n    playerTurn: string\r\n}\r\n\r\nexport interface IMoveProps {\r\n    gameKey?: string,\r\n    moveToSave: IMMRResult,\r\n    moveOrder: IMoveOrder,\r\n    recievedAt?: Date,\r\n    whiteClock?: IClock,\r\n    blackClock?: IClock\r\n}\r\n\r\nexport type IGameMode = 'isPlaying' | 'isOver' | 'isAnalyzing' | 'isPreparing'\r\n\r\nexport interface IGameState {\r\n    gameKey?: string\r\n    moveOrder: IMoveOrder\r\n    gameStarted: boolean\r\n    gameConfirmed: boolean\r\n    history: string[]\r\n    playerColor: PieceColor\r\n    white: IPlayer\r\n    black: IPlayer\r\n    lastGameResult?: IGameResult | null\r\n    ineffectiveMoves?: number\r\n    portrait?: boolean\r\n    gameMode: IGameMode\r\n    rivalOfferedDraw: boolean,\r\n    // [key: string]: any\r\n}\r\n\r\nexport type GameType = 'ranked' | 'casual' | 'tournament'\r\n\r\nexport interface IGameOptionState {\r\n    timing: Timing\r\n    gameType: GameType\r\n    playerColor: PieceColor | 'random'\r\n    rivalType: RivalType\r\n    rivalLevel: number\r\n    gameVariant: GameVariants\r\n    gameSetupFinished: boolean\r\n    waitingRival: boolean\r\n}\r\n\r\nexport interface TowerTouched {\r\n    key: string\r\n    posibleMoves: CellsMap\r\n    startCursorPosition: ITowerPosition\r\n    startTowerPosition: ITowerPosition\r\n    towerColor: PieceColor\r\n    towerType: TowerType\r\n}\r\n\r\nexport type GameVariants = 'towers' | 'russian' | 'international'\r\nexport type BoardToGame = Map<string, IBoardCell>\r\n\r\nexport interface IBoardToGame {\r\n    [key: string]: IBoardCell\r\n}\r\n\r\nexport interface IBoardOptions {\r\n    boardSize: number,\r\n    boardTheme?: string,\r\n    topLegend?: string[],\r\n    sideLegend?: number[],\r\n    withOutLegend?: boolean,\r\n    lengendsInside?: boolean,\r\n    boardNotation: BoardNotation,\r\n    reversedBoard: boolean\r\n}\r\n\r\nexport enum Online {\r\n    online,\r\n    offline,\r\n    reconnecting\r\n}\r\n\r\nexport interface IPlayer {\r\n    name: string\r\n    onlineStatus?: Online\r\n    userId?: string\r\n    rating?: number\r\n}\r\n\r\nexport type EndGameConditions = 'surrender' \r\n    | 'outOfTime'\r\n    | 'noMoves'\r\n    | 'drawByAgreement' \r\n    | 'drawByRules'\r\n    | 'abandonedByWhite'\r\n    | 'abandonedByBlack'\r\n\r\nexport interface IGameResult {\r\n    gameKey?: string,\r\n    winner: PieceColor | 'draw'\r\n    reason: EndGameConditions\r\n    white: IPlayer\r\n    black: IPlayer\r\n    playerColor?: PieceColor\r\n    movesHistory: string[]\r\n    gameVariant: GameVariants\r\n    timing: string\r\n    boardSize?: number\r\n    date: Date\r\n}\r\n\r\nexport interface IBoardCell {\r\n    pos?: ITowerPosition;\r\n    tower: PartialTower | null\r\n    neighbors: INeighborCells;\r\n    boardKey: string\r\n}\r\n\r\nexport interface INeighborCells {\r\n    [key: string]: string\r\n}\r\n\r\nexport interface IDaigonals {[key: string]: IBoardCell[]}\r\n\r\nexport interface IMMRResult {\r\n    move: string\r\n    position: IBoardToGame\r\n    takenPieces?: string[]\r\n}\r\n\r\nexport interface IBoardDiagonal {\r\n    direction: NeighborsKeys;\r\n    values: IBoardDiagonalCell[];\r\n}\r\n \r\nexport interface IBoardDiagonalCell {\r\n    cellIndex: string;\r\n    towerColor: PieceColor | null\r\n}\r\n\r\nexport type RivalType = 'player' | 'PC' \r\n\r\n// user\r\nexport interface IUser {\r\n    token: string | null,\r\n    userId: string | null,\r\n    name: string | null,\r\n    rating: number | null\r\n    language: string\r\n}\r\n","export const TopLegendValues = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm'];\r\nexport const SideLegendValues = new Array(12).fill(0).map((i: undefined, j: number): number => j + 1);\r\nexport const BoardDirections = ['leftUp', 'leftDown', 'rightUp', 'rightDown'];\r\nexport const BaseTransform = 'translate(-50%, -50%)';\r\nexport const DefaultTime = 300;\r\nexport const Storage = 'chekers';\r\nexport const BaseBoardSize = 8;\r\nexport const InternationalBoardSize = 10;\r\nexport const StandartTiming = [[1,0], [2,1], [3,0], [3,1], [5,0], [5,3], [10, 0], [10, 3], [15, 0]]\r\nexport const PrestartTimeLimit = 10\r\nexport const Interval = 1000\r\nexport const BaseCellSize = 50\r\nexport const AnimationDuration = 300\r\nexport const CellTowerRatio = .7\r\n\r\n\r\nexport const sampleLink = \"https://ru.wikipedia.org/wiki/%D0%A8%D0%B0%D1%88%D0%BA%D0%B8#%D0%A1%D1%82%D0%BE%D0%BB%D0%B1%D0%BE%D0%B2%D1%8B%D0%B5\"\r\n\r\nexport const RoutesPath = {\r\n    home: '/',\r\n    game: '/game',\r\n    settings: '/settings',\r\n    analysis: '/analysis',\r\n    stats: '/stats',\r\n    rules: '/rules',\r\n    auth: '/auth',\r\n    profile: '/profile',\r\n}\r\n\r\nexport const RoutesTitle= {\r\n    home: 'home',\r\n    game: 'apps',\r\n    analyze: 'zoom_in',\r\n    rules: 'import_contacts',\r\n    stats: 'insert_chart',\r\n    settings: 'settings',\r\n    profile: 'person',\r\n    auth: 'login',\r\n}\r\n\r\nexport const storageName = 'checkers'\r\n\r\nexport const defaultWhiteTowerCells8x8 = ['a1', 'a3', 'b2', 'c1', 'c3', 'd2', 'e1', 'e3', 'f2', 'g1', 'g3', 'h2',]\r\nexport const defaultBlackTowerCells8x8 = ['a7', 'b8', 'b6', 'c7', 'd8', 'd6', 'e7', 'f8', 'f6', 'g7', 'h8', 'h6']\r\n\r\nexport const board8x8EmptyCells = ['b4', 'd4', 'f4', 'h4', 'a5', 'c5', 'e5', 'g5']\r\nexport const boardEmptyCells = board8x8EmptyCells.concat(['k4', 'i5'])\r\n\r\n// export const board8x8Cells = defaultBlackTowerCells8x8.concat(board8x8EmptyCells).concat(defaultWhiteTowerCells8x8)\r\n\r\nexport const defaultWhiteTowerCells = defaultWhiteTowerCells8x8\r\n.concat(['i1', 'i3', 'k2', 'b4', 'd4', 'f4', 'h4', 'k4'])\r\nexport const defaultBlackTowerCells = defaultBlackTowerCells8x8\r\n.filter((x: string) => !x.includes('6'))\r\n.concat(['i7', 'k10', 'k8', 'i9', 'a9', 'c9', 'e9', 'g9', 'b10', 'd10', 'f10', 'h10'])\r\n\r\nexport const board10x10EmptyCells = board8x8EmptyCells.concat(['k4', 'i5'])\r\n\r\nexport const getDefaultBlackTowersCells = (boardSize: number): string[] => {\r\n    return boardSize === 8 ? defaultBlackTowerCells8x8 : defaultBlackTowerCells\r\n}\r\n\r\nexport const getDefaultWhiteTowersCells = (boardSize: number): string[] => {\r\n    return boardSize === 8 ? defaultWhiteTowerCells8x8 : defaultWhiteTowerCells\r\n}\r\n\r\nexport const board10x10Cells = defaultBlackTowerCells.concat(defaultWhiteTowerCells).concat(board10x10EmptyCells)\r\n","import { \r\n    CellsMap,\r\n    IBoardCell,\r\n    IBoardToGame,\r\n    IGameBoard,\r\n    IMMRResult,\r\n    IRef,\r\n    ITowerPosition,\r\n    PieceColor,\r\n    TowerConstructor,\r\n    TowersMap,\r\n    TowerType,\r\n} from \"../store/app-interface\"\r\n\r\n//common functions\r\nexport const splitMove = (move: string) => {\r\n    if (move.includes(':')) {\r\n        return move.split(':')\r\n    }\r\n    return move.split('-')\r\n}\r\n\r\nexport const oppositColor = (color: PieceColor): PieceColor => (color === PieceColor.w ? PieceColor.b : PieceColor.w)\r\n\r\nexport const copyMap = (board: Map<string, any>) => {\r\n    const nm = new Map()\r\n    board.forEach((v: any, k: string) => {\r\n        if (typeof v === 'object') {\r\n            if (Array.isArray(v)) {\r\n                nm.set(k, [...v])\r\n            } else {\r\n                nm.set(k, {...v})\r\n            }\r\n        } else {\r\n            nm.set(k, v)\r\n        }\r\n    })\r\n    return nm\r\n}\r\n\r\nexport const copyObj = (board: {[key: string]: any}): {[key: string]: any} => {\r\n    return Object.keys(board).reduce((acc: {[key: string]: any}, k: string) => {\r\n        const v = board[k]\r\n        if (typeof v === 'object') {\r\n            if (Array.isArray(v)) {\r\n                acc[k] = [...v]\r\n            } else {\r\n                acc[k] = {...v}\r\n            }\r\n        } else {\r\n            acc[k] = v\r\n        }\r\n        return acc\r\n    }, {})\r\n}\r\n\r\nexport const possibleOutOfMandatory = (state: Partial<IGameBoard>, key: string):CellsMap => {\r\n    const posibleMoves = new Map() as CellsMap\r\n    const {mandatoryMoveStep: MS, mandatoryMoves, cellsMap } = state\r\n    const availableSteps = mandatoryMoves!\r\n    .filter((m: IMMRResult) => m.move.includes(key)).map((m: IMMRResult) => m.move.split(':')[MS as number + 1])\r\n    availableSteps.forEach((step: string) => {\r\n        posibleMoves.set(step, cellsMap!.get(step) as ITowerPosition)\r\n    })\r\n    return posibleMoves\r\n}\r\n\r\nexport const compareMaps = (map1: TowersMap, map2: TowersMap): boolean => {\r\n    return JSON.stringify([...map1.entries()]) !== JSON.stringify([...map2.entries()])\r\n}\r\n\r\nexport const filterArrayByLength = (arr: IMMRResult[]):  {ended: IMMRResult[], cont: IMMRResult[]} => {\r\n    const maxLength = arr.reduce((acc: number, val: IMMRResult) => (acc > val.move.length ? acc : val.move.length), 0)\r\n    return arr.reduce((acc: {ended: IMMRResult[], cont: IMMRResult[]}, val: IMMRResult) => {\r\n        if(val.move.length === maxLength) {\r\n            acc.cont.push(val)\r\n        } else {\r\n            acc.ended.push(val)\r\n        }\r\n        return acc\r\n    }, {ended: [], cont: []})\r\n}\r\n\r\nexport const crossDirections = (dir: string): {[key: string]: boolean} => {\r\n    const directions = {} as {[key: string]: boolean}\r\n    directions[`${dir.includes('left') ? 'left' : 'right'}${dir.includes('Up') ? 'Down' : 'Up'}`] = true\r\n    directions[`${dir.includes('left') ? 'right' : 'left'}${dir.includes('Up') ? 'Up' : 'Down'}`] = true\r\n    return directions\r\n}\r\n \r\nexport function checkMoveTargetCell(pos: ITowerPosition, pM: CellsMap, cellSize: number, ref: IRef<any>) {\r\n    const possibleCells =  pM.entries()\r\n    const size = cellSize\r\n    const boardRect = ref.current!.querySelector('.board__body')!.getBoundingClientRect();\r\n    \r\n    const [x, y] = [pos.x - boardRect.x, pos.y - boardRect.y]\r\n    if (x < 0 || y < 0) {\r\n        return null\r\n    }\r\n    const targetCell = [...possibleCells].filter((props) => {\r\n        const [cellX, cellY] = [props[1].x + size! / 4, props[1].y + size! / 4]\r\n        const distance = Math.sqrt(Math.pow((cellX - x), 2) + Math.pow((cellY - y), 2))\r\n        return distance < size!\r\n    })[0]\r\n    if (targetCell) {\r\n        return targetCell[0]\r\n    }\r\n    return null\r\n}\r\n\r\nexport const checkIfNumberOfKingsChanged = (board1: IBoardToGame, board2: IBoardToGame) => {\r\n    const calcKings = (board: IBoardToGame) => Object.values(board).filter((cell: IBoardCell) => \r\n        cell.tower?.currentType === TowerType.k).length\r\n        \r\n    return calcKings(board1) !== calcKings(board2)\r\n}\r\n\r\nexport const convertToMovesHistory = (arr: string[]): {white: string, black: string}[] => {\r\n    const result: {white: string, black: string}[] = []\r\n    for (let i = 0; i < arr.length; i += 2) {\r\n        result.push({white: arr[i], black: arr[i+1] || ''})\r\n    }\r\n    return result\r\n}\r\n\r\nexport function getCellSize(refElem: HTMLDivElement, size: number) {\r\n    const boardHtmlRect = refElem.querySelector('.board__body')!.getBoundingClientRect();\r\n    const {width, left, right} = boardHtmlRect\r\n    const cellWidth = (width ? width:  left - right) / size;\r\n    return Math.round(cellWidth)\r\n}\r\n\r\nexport function checkIfBoardFitTowers(towers: TowersMap, board: IBoardToGame): boolean {\r\n    let res = true\r\n    towers.forEach((tower: TowerConstructor, key: string) => {\r\n        const towerOnBoard = board[key].tower\r\n        if (tower.onBoardPosition !== towerOnBoard?.onBoardPosition\r\n            || tower.bPiecesQuantity !== towerOnBoard.bPiecesQuantity\r\n            || tower.wPiecesQuantity !== towerOnBoard.wPiecesQuantity\r\n            || tower.currentColor !== towerOnBoard.currentColor\r\n            || tower.currentType !== towerOnBoard.currentType) {\r\n                res = false\r\n                throw new Error(\"board do not fit towers\")\r\n            }\r\n    })\r\n    return res\r\n}\r\n\r\nconst GHF = {\r\n    checkIfBoardFitTowers,\r\n    getCellSize,\r\n    convertToMovesHistory,\r\n    checkIfNumberOfKingsChanged,\r\n    checkMoveTargetCell,\r\n    crossDirections,\r\n    copyObj,\r\n    copyMap,\r\n    oppositColor,\r\n    compareMaps,\r\n    filterArrayByLength,\r\n}\r\n\r\nexport default GHF\r\n","import {EndGameConditions, IBoardToGame, INewGameProps, IGameMode, IGameState, IMoveOrder, IMoveProps, PieceColor} from \"../app-interface\";\r\n// import { GameOptionActions } from \"../gameOptions/types\";\r\n\r\nexport const GameActions = {\r\n    SET_MOVE_ORDER: 'SET_MOVE_ORDER',\r\n    SET_GAME_STARTED: 'SET_GAME_STARTED',\r\n    MAKE_MOVE: 'MAKE_MOVE',\r\n    CONFIRM_START_GAME: 'CONFIRM_START_GAME',\r\n    UPDATE_GAME_STATE: 'UPDATE_GAME_STATE',\r\n    INEFFECTIVE_MOVE: 'INEFFECTIVE_MOVE',\r\n    SAVE_MOVE_TO_HISTORY: 'SAVE_HISTORY',\r\n    SET_PLAYER_MOVE_ORDER: 'SET_PLAYER_MOVE_ORDER',\r\n    SET_GAME: 'SET_GAME',\r\n    END_GAME: 'END_GAME',\r\n    OFFER_DRAW: 'OFFER_DRAW',\r\n    DECLINE_DRAW: 'DECLINE_DRAW',\r\n    RIVAL_OFFER_DRAW: 'RIVAL_OFFER_DRAW',\r\n    SURRENDER: 'SURRENDER',\r\n    SET_PORTRAIT: 'SET_PORTRAIT',\r\n    SET_GAME_MODE: 'SET_GAME_MODE',\r\n    CANCEL_GAME: 'CANCEL_GAME',\r\n    NEW_GAME_VS_PC: 'NEW_GAME_VS_PC',\r\n    NEW_GAME_VS_PLAYER: 'NEW_GAME_VS_PLAYER',\r\n    CLEAR_HISTORY: 'CLEAR_HISTORY',\r\n}\r\n\r\ninterface ClearHistoryAction {\r\n    type: typeof GameActions.CLEAR_HISTORY,\r\n    payload: null\r\n}\r\n\r\ninterface NewGameVSPCAction {\r\n    type: typeof GameActions.NEW_GAME_VS_PC,\r\n    payload: null\r\n}\r\n\r\ninterface NewGameVSPlayerAction {\r\n    type: typeof GameActions.NEW_GAME_VS_PLAYER,\r\n    payload: INewGameProps\r\n}\r\n\r\ninterface SurrenderAction {\r\n    type: typeof GameActions.SURRENDER,\r\n    payload: PieceColor\r\n}\r\n\r\ninterface CancelGameAction {\r\n    type: typeof GameActions.CANCEL_GAME,\r\n    payload: null\r\n}\r\n\r\ninterface SetGameModeAction {\r\n    type: typeof GameActions.SET_GAME_MODE,\r\n    payload: IGameMode\r\n}\r\n\r\ninterface SetPortraitAction {\r\n    type: typeof GameActions.SET_PORTRAIT,\r\n    payload: boolean\r\n}\r\n\r\ninterface SetGameAction {\r\n    type: typeof GameActions.SET_GAME,\r\n    payload: Partial<IGameState>\r\n}\r\n\r\ninterface IneffectiveMoveAction {\r\n    type: typeof GameActions.INEFFECTIVE_MOVE,\r\n    payload: number\r\n}\r\n\r\ninterface OpponentOfferDrawAction {\r\n    type: typeof GameActions.RIVAL_OFFER_DRAW\r\n    payload: null\r\n}\r\n\r\ninterface SetPlayerMoveOrderAction {\r\n    type: typeof GameActions.SET_PLAYER_MOVE_ORDER,\r\n    payload: boolean\r\n}\r\n\r\ninterface DeclineDrawAction {\r\n    type: typeof GameActions.DECLINE_DRAW,\r\n    payload?: boolean\r\n}\r\n\r\ninterface SaveHistoryAction {\r\n    type: typeof GameActions.SAVE_MOVE_TO_HISTORY,\r\n    payload: string[]\r\n}\r\n\r\ninterface SetMoveOrderAction {\r\n    type: typeof GameActions.SET_MOVE_ORDER,\r\n    payload: IMoveOrder\r\n}\r\n\r\ninterface UpdateGameStateAction {\r\n    type: typeof GameActions.UPDATE_GAME_STATE,\r\n    payload: IBoardToGame\r\n}\r\n\r\ninterface SetGameStartedAction {\r\n    type: typeof GameActions.SET_GAME_STARTED,\r\n    payload: boolean\r\n}\r\n\r\ninterface OfferDrawAction {\r\n    type: typeof GameActions.OFFER_DRAW,\r\n    payload: boolean\r\n}\r\n\r\ninterface MakeMoveAction {\r\n    type: typeof GameActions.MAKE_MOVE,\r\n    payload: IMoveProps\r\n}\r\n\r\ninterface ConfirmStartGameAction {\r\n    type: typeof GameActions.CONFIRM_START_GAME,\r\n    payload: boolean\r\n}\r\n\r\ninterface EndGameAction {\r\n    type: typeof GameActions.END_GAME,\r\n    payload: EndGameConditions\r\n}\r\n\r\nexport type GameActionTypes = \r\n| IneffectiveMoveAction\r\n| CancelGameAction\r\n| SetGameStartedAction\r\n| SetMoveOrderAction\r\n| UpdateGameStateAction\r\n| SetPortraitAction\r\n| SaveHistoryAction\r\n| SetPlayerMoveOrderAction\r\n| EndGameAction\r\n| SetGameAction\r\n| SurrenderAction\r\n| MakeMoveAction\r\n| OfferDrawAction\r\n| OpponentOfferDrawAction\r\n| DeclineDrawAction\r\n| ConfirmStartGameAction\r\n| SetGameModeAction\r\n| NewGameVSPCAction\r\n| NewGameVSPlayerAction\r\n| CancelGameAction\r\n| ClearHistoryAction\r\n","import { IAnalysisState, IBoardToGame, IGameResult, IMoveProps } from \"../app-interface\"\r\n\r\nexport const GameAnalysisActions = {\r\n    ANALYZE_LAST_GAME: 'ANALYZE_LAST_GAME',\r\n    DOWNLOAD_GAME: \"DOWNLOAD_GAME\",\r\n    SAVE_GAME_RESULT: 'SAVE_GAME_RESULT',\r\n    SETTING_BOARD: 'SETTING_BOARD',\r\n    UPDATE_POSITION: 'UPDATE_POSITION',\r\n    STEP_FORWARD: 'STEP_FORWARD',\r\n    STEP_BACK: \"STEP_BACK\",\r\n    SAVE_POSITION: \"SAVE_POSITION\",\r\n    GO_TO_POSITION: 'GO_TO_POSITION',\r\n    CREATE_POSITION_TREE: 'CREATE_POSITION_TREE',\r\n    UPDATE_ANALYSIS_STATE: 'UPDATE_ANALYSIS_STATE',\r\n    EVALUATE_POSITION: 'EVALUATE_POSITION',\r\n    SET_DEPTH: 'SET_DEPTH',\r\n    PLAY_MOVES: 'PLAY_MOVES',\r\n    SET_START_POSITION: 'SET_START_POSITION',\r\n    REMOVE_PIECE: 'REMOVE_PIECE',\r\n    START_NEW_LINE: 'START_NEW_LINE',\r\n    MAKE_NEW_MOVE: 'MAKE_NEW_MOVE',\r\n} \r\n\r\nexport interface MakeNewMoveAction {\r\n    type: typeof GameAnalysisActions.MAKE_NEW_MOVE,\r\n    payload: Partial<IMoveProps>\r\n}\r\n\r\nexport interface StartNewLineAction {\r\n    type: typeof GameAnalysisActions.START_NEW_LINE,\r\n    payload: IMoveProps\r\n}\r\n\r\nexport interface RemovePieceAction {\r\n    type: typeof GameAnalysisActions.REMOVE_PIECE,\r\n    payload: boolean\r\n}\r\n\r\nexport interface PlayMovesAction {\r\n    type: typeof GameAnalysisActions.PLAY_MOVES,\r\n    payload: null\r\n}\r\n\r\nexport interface SetDepthAction {\r\n    type: typeof GameAnalysisActions.SET_DEPTH\r\n    payload: number\r\n}\r\n\r\nexport interface EvaluatePositionhAction {\r\n    type: typeof GameAnalysisActions.EVALUATE_POSITION\r\n    payload: boolean\r\n}\r\n\r\nexport interface UpdateAnalysisStateAction {\r\n    type: typeof GameAnalysisActions.UPDATE_ANALYSIS_STATE,\r\n    payload: Partial<IAnalysisState>\r\n}\r\n\r\nexport interface CreatePositionTreeAction {\r\n    type: typeof GameAnalysisActions.CREATE_POSITION_TREE,\r\n    payload: Map<string, IBoardToGame>\r\n}\r\n\r\nexport interface SavePositionAction {\r\n    type: typeof GameAnalysisActions.SAVE_POSITION,\r\n    payload: Map<string, IBoardToGame>\r\n}\r\n\r\nexport interface GoToPositionAction {\r\n    type: typeof GameAnalysisActions.GO_TO_POSITION\r\n    payload: {index: number, move: string}\r\n}\r\n\r\nexport interface StepForwardAction {\r\n    type: typeof GameAnalysisActions.STEP_FORWARD,\r\n    payload: number\r\n}\r\n\r\nexport interface StepBackdAction {\r\n    type: typeof GameAnalysisActions.STEP_BACK,\r\n    payload: number\r\n}\r\n\r\nexport interface UpdatePositionActions {\r\n    type: typeof GameAnalysisActions.UPDATE_POSITION,\r\n    payload: Partial<IMoveProps>\r\n}\r\n\r\nexport interface SettingBoardAction {\r\n    type: typeof GameAnalysisActions.SETTING_BOARD\r\n    payload: boolean\r\n}\r\n\r\nexport interface AnalyzeLastGame {\r\n    type: typeof GameAnalysisActions.ANALYZE_LAST_GAME,\r\n    payload: boolean\r\n}\r\n\r\nexport interface DownloadGame {\r\n    type: typeof GameAnalysisActions.DOWNLOAD_GAME,\r\n    payload: IGameResult\r\n}\r\n\r\nexport interface SaveGameResult {\r\n    type: typeof GameAnalysisActions.SAVE_GAME_RESULT,\r\n    payload: IGameResult\r\n}\r\n\r\nexport interface SetStartPositionAction {\r\n    type: typeof GameAnalysisActions.SET_START_POSITION,\r\n    payload: null\r\n}\r\n\r\nexport type GameAnalysisTypes = AnalyzeLastGame \r\n| DownloadGame \r\n| SaveGameResult \r\n| SettingBoardAction \r\n| UpdatePositionActions\r\n| GoToPositionAction\r\n| StepForwardAction\r\n| StepBackdAction\r\n| SavePositionAction\r\n| CreatePositionTreeAction\r\n| UpdateAnalysisStateAction\r\n| RemovePieceAction\r\n| StartNewLineAction\r\n| MakeNewMoveAction\r\n| SetStartPositionAction\r\n\r\n","import { IBoardAndTowers, IMoveProps } from \"../app-interface\";\r\n\r\nexport const BoardActions = {\r\n    CREATE_GAME_BOARD: 'CREATE_GAME_BOARD',\r\n    CREATE_SETUP_BOARD: 'CREATE_SETUP_BOARD',\r\n    CREATE_ANALYSIS_BOARD: 'CREATE_ANALYSIS_BOARD',\r\n    UPDATE_BOARD_STATE: 'UPDATE_BOARD_STATE',\r\n    UPDATE_BOARD_SIZE: 'UPDATE_BOARD_SIZE',\r\n    UPDATE_BOARD_MAP: 'UPDATE_BOARD_MAP',\r\n    TURN: 'TURN',\r\n    UPDATE_POSITION_TREE: 'CREATE_POSITION_TREE',\r\n    UNDO_LAST_MOVE: 'UNDO_LAST_MOVE',\r\n}\r\n\r\ninterface UndoLastMoveAction {\r\n    type: typeof BoardActions.UNDO_LAST_MOVE,\r\n    payload: null\r\n}\r\n\r\ninterface TurnAction {\r\n    type: typeof BoardActions.TURN,\r\n    payload: Partial<IMoveProps>\r\n}\r\n\r\ninterface UpdateBoardStateAction {\r\n    type: typeof BoardActions.UPDATE_BOARD_STATE,\r\n    payload: Partial<IBoardAndTowers>\r\n}\r\n\r\ninterface CreateGameBoardAction {\r\n    type: typeof BoardActions.CREATE_GAME_BOARD,\r\n    payload: null\r\n}\r\n\r\ninterface CreateAnalysisBoardAction {\r\n    type: typeof BoardActions.CREATE_ANALYSIS_BOARD\r\n    payload: null\r\n}\r\n\r\ninterface CreateSetupBoardAction {\r\n    type: typeof BoardActions.CREATE_SETUP_BOARD\r\n    payload: null\r\n}\r\n\r\ninterface UpdateBoardSizeAction {\r\n    type: typeof BoardActions.UPDATE_BOARD_SIZE\r\n    payload: number\r\n}\r\n\r\nexport type BoardActionTypes = UpdateBoardStateAction\r\n| CreateAnalysisBoardAction\r\n| CreateGameBoardAction\r\n| CreateSetupBoardAction\r\n| UpdateBoardSizeAction\r\n| TurnAction\r\n| UndoLastMoveAction\r\n","import { GameVariants, PieceColor, Online, IPlayer, Timing, RivalType, GameType } from \"../app-interface\";\r\n\r\nexport const GameOptionActions = {\r\n    CHOOSE_COLOR: 'CHOOSE_COLOR',\r\n    SET_TIME_LIMIT: 'SET_TIME_LIMIT',\r\n    SET_TIME_ADDS: 'SET_TIME_ADDS',\r\n    SET_GAME_TIMING: 'SET_GAME_TIMING',\r\n    SET_RIVAL: 'SET_RIVAL',\r\n    SET_PLAYER: 'SET_PLAYER',\r\n    SET_GAME_VARIANT: 'SET_GAME_VARIANT',\r\n    SET_RIVAL_ONLINE_STATUS: 'SET_RIVAL_ONLINE_STATUS',\r\n    SET_PLAYER_ONLINE_STATUS: 'SET_PLAYER_ONLINE_STATUS',\r\n    SET_GAME_TYPE: 'SET_GAME_TYPE',\r\n    SET_RIVAL_LEVEL: 'SET_RIVAL_LEVEL',\r\n    FIND_RIVAL: 'FIND_RIVAL',\r\n    SET_RIVAL_TYPE: 'SET_RIVAL_TYPE',\r\n    FINISH_GAME_SETUP: 'FINISH_GAME_SETUP',\r\n    WAIT_RIVAL: 'WAIT_RIVAL',\r\n    CANCEL_RIVAL_WAITING: 'CANCEL_RIVAL_WAITING',\r\n    REMATCH_REQUEST: 'REMATCH_REQUEST',\r\n};\r\n\r\ninterface SetGameTypeAction {\r\n    type: typeof GameOptionActions.SET_GAME_TYPE,\r\n    payload: GameType\r\n}\r\n\r\ninterface SetRivalLevelAction {\r\n    type: typeof GameOptionActions.SET_RIVAL_LEVEL\r\n    payload: number\r\n}\r\n\r\ninterface RequestRematchAction {\r\n    type: typeof GameOptionActions.REMATCH_REQUEST,\r\n    payload: null,\r\n}\r\n\r\ninterface CancelRivalWaitingAction {\r\n    type: typeof GameOptionActions.CANCEL_RIVAL_WAITING,\r\n    payload: null\r\n}\r\n\r\ninterface FinishGameSetupAcion {\r\n    type: typeof GameOptionActions.FINISH_GAME_SETUP\r\n    payload: boolean\r\n}\r\n\r\ninterface SetOpponentTypeAction {\r\n    type: typeof GameOptionActions.SET_RIVAL_TYPE\r\n    payload: RivalType\r\n}\r\n\r\ninterface SetGameTimingAction {\r\n    type: typeof GameOptionActions.SET_GAME_TIMING,\r\n    payload: Timing\r\n}\r\n\r\ninterface SetOpponentStatusAction {\r\n    type: typeof GameOptionActions.SET_RIVAL_ONLINE_STATUS,\r\n    payload: Online\r\n}\r\n\r\nexport interface SetGameVariantAction {\r\n    type: typeof GameOptionActions.SET_GAME_VARIANT,\r\n    payload: GameVariants\r\n}\r\n\r\ninterface SetPlayerAction {\r\n    type: typeof GameOptionActions.SET_RIVAL,\r\n    payload: IPlayer\r\n}\r\n\r\ninterface SetPlayerStatusAction {\r\n    type: typeof GameOptionActions.SET_RIVAL_ONLINE_STATUS,\r\n    payload: Online\r\n}\r\n\r\nexport interface ChooseColorAction {\r\n    type: typeof GameOptionActions.CHOOSE_COLOR,\r\n    payload: PieceColor | 'random'\r\n}\r\n\r\ninterface SetRivalAction {\r\n    type: typeof GameOptionActions.SET_RIVAL,\r\n    payload: IPlayer\r\n}\r\n\r\nexport interface FindOpponentAction {\r\n    type: typeof GameOptionActions.FIND_RIVAL\r\n}\r\n\r\nexport interface WaitRivalAction {\r\n    type: typeof GameOptionActions.WAIT_RIVAL,\r\n    payload: boolean\r\n}\r\n\r\nexport type GameOptionActionTypes = SetRivalAction\r\n| ChooseColorAction\r\n| SetOpponentStatusAction\r\n| SetPlayerStatusAction\r\n| SetPlayerAction\r\n| SetGameVariantAction\r\n| SetGameTimingAction\r\n| SetOpponentTypeAction\r\n| FinishGameSetupAcion\r\n| WaitRivalAction\r\n| CancelRivalWaitingAction\r\n| RequestRematchAction\r\n| SetGameTypeAction\r\n| SetRivalLevelAction\r\n","import { \r\n    INeighborCells, \r\n    TowersMap,\r\n    PieceColor,\r\n    TowerConstructor,\r\n    TowerType,\r\n    ITowerPosition,\r\n    IBoardToGame,\r\n    PartialTower,\r\n    IBoardOptions,\r\n    IAnalysisBoard,\r\n    IGameBoard,\r\n} from \"../store/app-interface\"\r\nimport {\r\n    TopLegendValues,\r\n    SideLegendValues,\r\n    BaseCellSize,\r\n    getDefaultBlackTowersCells,\r\n    getDefaultWhiteTowersCells\r\n} from '../constants/gameConstants'\r\n\r\nexport const oppositColor = (color: PieceColor) => { return color === PieceColor.w ? PieceColor.b : PieceColor.w }\r\n\r\nexport const createEmptyBoard = (size: number = 8) => {\r\n    const GameBoard: IBoardToGame = {}\r\n    for(let i = 0; i < size; i++) {\r\n        for(let j = 0; j < size; j++) {\r\n            if ((i + j + 1) % 2) {\r\n                const key = `${TopLegendValues[i]}${SideLegendValues[j]}`;\r\n                GameBoard[key] = {boardKey: key, tower: null, neighbors: defineNeighborCells(i ,j, size)}\r\n            }\r\n        }\r\n    }\r\n    return GameBoard\r\n}\r\n\r\nexport const createStartBoardToDraw = (props: {boardOptions: IBoardOptions}): IGameBoard => {\r\n    const { \r\n        boardOptions,\r\n    } = props\r\n    const {boardSize, reversedBoard} = boardOptions \r\n    const currentPosition = createStartBoard(boardSize)\r\n    const positionsTree = new Map()\r\n    positionsTree.set('sp', currentPosition)\r\n    return {\r\n        towers: createDefaultTowers(boardSize),\r\n        cellSize: BaseCellSize,\r\n        cellsMap: createCellsMap(boardSize, BaseCellSize, reversedBoard),\r\n        animationStarted: false,\r\n        mandatoryMoves: [],\r\n        moveDone: false,\r\n        mandatoryMoveStep: 0,\r\n        currentPosition,\r\n        mouseDown: false,\r\n        lastMoveSquares: [],\r\n        positionsTree\r\n    }\r\n}\r\n\r\nexport const createEmptyBoardForCustomPosition = (props: {[key: string]: any}): IAnalysisBoard => {\r\n    const {boardSize, reversedBoard} = props.boardOptions\r\n    const currentPosition = createEmptyBoard(boardSize)\r\n    const positionsTree = new Map()\r\n    positionsTree.set('sp', currentPosition)\r\n    return {\r\n        towers: createOutBoardTowers(boardSize),\r\n        cellSize: BaseCellSize,\r\n        cellsMap: createCellsMap(boardSize, BaseCellSize, reversedBoard),\r\n        currentPosition,\r\n        positionsTree,\r\n        mandatoryMoves: [],\r\n        mandatoryMoveStep: 0,\r\n        mouseDown: false,\r\n        lastMoveSquares: []\r\n    }\r\n}\r\n\r\nexport const createAnalysisBoard = (props: {boardOptions: IBoardOptions}): Partial<IAnalysisBoard> => { \r\n    const {boardOptions: {boardSize, reversedBoard}} = props   \r\n    return {\r\n        cellSize: BaseCellSize,\r\n        cellsMap: createCellsMap(boardSize  as number, BaseCellSize, reversedBoard),\r\n        mandatoryMoves: [],\r\n        mandatoryMoveStep: 0,\r\n        mouseDown: false,\r\n        lastMoveSquares: [],\r\n    }\r\n}\r\n\r\nexport const defineCellDomPosition = (key: string, cellSize: number, reversed = false, boardSize = 8) => {\r\n    const topInd = reversed ? TopLegendValues.slice(0, boardSize).reverse() : TopLegendValues.slice(0, boardSize)\r\n    const sideInd = reversed ? SideLegendValues.slice(0, boardSize) : SideLegendValues.slice(0, boardSize).reverse()\r\n    const y = sideInd.indexOf(parseInt(key.slice(1))) * cellSize \r\n    const x = topInd.indexOf(key[0]) * cellSize\r\n    return {x, y}\r\n}\r\n\r\nexport const createCellsMap = (boardSize: number, cellSize = BaseCellSize, reversed = false) => {\r\n    const map = new Map<string, ITowerPosition>()\r\n    Object.keys(createEmptyBoard(boardSize)).forEach((key: string) => {\r\n        map.set(key, defineCellDomPosition(key, cellSize, reversed, boardSize))\r\n    })\r\n    return map\r\n}\r\n\r\nexport const updateCellsMap = (cellsMap: Map<string, ITowerPosition>, cellSize: number, reversed = false) => {\r\n    const boardSize = cellsMap.size === 50 ? 10 : 8\r\n    const newMap = new Map<string, ITowerPosition>()\r\n    cellsMap.forEach((val: ITowerPosition, key: string) => {\r\n        newMap.set(key, defineCellDomPosition(key, cellSize, reversed, boardSize))\r\n    })\r\n    return newMap\r\n}\r\n\r\nexport function defineNeighborCells(i: number, j: number, size: number): INeighborCells {\r\n    const topLegend = TopLegendValues.slice(0, size)\r\n    const sideLegend = SideLegendValues.slice(0, size) \r\n    const neighbors: INeighborCells = {}\r\n    if (i) {\r\n        if (j < size - 1) {\r\n            neighbors.leftUp = `${topLegend[i - 1]}${sideLegend[j + 1]}` \r\n        }\r\n        if (j) {\r\n            neighbors.leftDown = `${topLegend[i - 1]}${sideLegend[j - 1]}`\r\n        }\r\n    }\r\n    if (i < size - 1) {\r\n        if (j < size - 1) {\r\n                neighbors.rightUp = `${topLegend[i + 1]}${sideLegend[j + 1]}` \r\n            }\r\n        if (j) {\r\n            neighbors.rightDown = `${topLegend[i + 1]}${sideLegend[j - 1]}`\r\n        }\r\n    }\r\n    return neighbors\r\n}\r\n\r\nexport const newOnBoardTower = (currentColor: PieceColor, currentType = TowerType.m): PartialTower => {\r\n    const wPiecesQuantity = currentColor === PieceColor.w ? 1 : 0\r\n    const bPiecesQuantity = currentColor === PieceColor.b ? 1 : 0\r\n    return {currentColor, currentType, wPiecesQuantity, bPiecesQuantity}\r\n}\r\n\r\nexport function createStartBoard (boardSize: number): IBoardToGame {\r\n    const board: IBoardToGame = createEmptyBoard(boardSize)\r\n    const DBTC = getDefaultBlackTowersCells(boardSize)\r\n    const DWTC = getDefaultWhiteTowersCells(boardSize)\r\n    for (let key of Object.keys(board)) {\r\n        board[key].tower = (DBTC.includes(key) && newOnBoardTower(PieceColor.b))\r\n        || (DWTC.includes(key) ? newOnBoardTower(PieceColor.w) : null)\r\n    }\r\n    return board\r\n}\r\n\r\nconst defaultTowerProps = (cell: string, color: PieceColor, ): TowerConstructor => ({\r\n    currentType: TowerType.m,\r\n    currentColor: color,\r\n    onBoardPosition: cell,\r\n    bPiecesQuantity: color === PieceColor.w ? 0 : 1,\r\n    wPiecesQuantity: color === PieceColor.w ? 1 : 0,\r\n})\r\n\r\nexport const createDefaultTowers = (boardSize: number): TowersMap => {\r\n    const towers = new Map() as TowersMap\r\n    getDefaultBlackTowersCells(boardSize).forEach((key: string) => {\r\n        towers.set(key, new TowerConstructor(defaultTowerProps(key, PieceColor.b)))\r\n    })\r\n    getDefaultWhiteTowersCells(boardSize).forEach((key: string) => {\r\n        towers.set(key, new TowerConstructor(defaultTowerProps(key, PieceColor.w)))\r\n    })\r\n    return towers\r\n}\r\n\r\nexport const createOutBoardTowers = (boardSize: number): TowersMap => {\r\n    const towers = new Map() as TowersMap\r\n    getDefaultBlackTowersCells(boardSize).forEach((key: string, i: number) => {\r\n        const oBKey = `oB b${i}`\r\n        towers.set(oBKey, new TowerConstructor(defaultTowerProps(oBKey, PieceColor.b)))\r\n    })\r\n    getDefaultWhiteTowersCells(boardSize).forEach((key: string, i: number) => {\r\n        const oBKey = `oW w${i}`\r\n        towers.set(oBKey, new TowerConstructor(defaultTowerProps(oBKey, PieceColor.w)))\r\n    })\r\n    return towers\r\n}\r\n","import { CellTowerRatio } from \"../constants/gameConstants\"\r\nimport {\r\n    CellsMap,\r\n    IBoardOptions,\r\n    IBoardToDraw,\r\n    IBoardToGame, \r\n    IGameBoard, \r\n    ITowerPosition, \r\n    PartialTower,\r\n    PieceColor,\r\n    TowerConstructor,\r\n    TowersMap,\r\n    TowerTouched,\r\n} from \"../store/app-interface\"\r\n\r\nimport {BaseMoveResolver} from './common-fn-moves-resolver'\r\nimport { copyMap, getCellSize } from \"./gameplay-helper-fuctions\"\r\nimport { createStartBoard, updateCellsMap } from \"./prestart-help-function-constants\"\r\n\r\n\r\nexport class TowersUpdateResolver extends BaseMoveResolver {\r\n    currentPosition = createStartBoard(this.size) as IBoardToGame\r\n    previousPosition = createStartBoard(this.size) as IBoardToGame\r\n    callBack: Function = () => {}\r\n\r\n    setCalBack = (cb: Function) => {\r\n        this.callBack = cb\r\n    }\r\n\r\n    // animateRivalMove(history: string[], board: IBoardToDraw, reversed: boolean) {\r\n    //     this.setPositions(board.positionsTree!, history)\r\n    //     const move = history.slice(-1)[0]\r\n    //     const mandatory = move.includes(':')\r\n    //     if (mandatory) {\r\n    //         return this.animateMadatoryMove(move)\r\n    //     }\r\n    //     return this.animateSimpleMove(move, board, reversed)\r\n    // }\r\n\r\n    animateMadatoryMove(move: string) {\r\n\r\n    }\r\n\r\n    animateSimpleMove(move: string, board: IBoardToDraw, reversed: boolean) {\r\n       \r\n    }\r\n\r\n    relocateTower(from: string, to: string, board: IGameBoard, reversed: boolean) {\r\n        const {cellSize, cellsMap} = board\r\n        const towers = copyMap(board.towers)\r\n        const tower = towers.get(from) as TowerConstructor\r\n        tower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize, reversed)\r\n        towers.set(from, tower)\r\n        console.log(tower)\r\n        this.callBack({towers})\r\n    }\r\n\r\n    finalizeSimpleMove(from: string, to: string, board: IGameBoard, reversed = false) {\r\n        const {cellSize, cellsMap} = board\r\n        const towers = copyMap(board.towers)\r\n        const tower = towers.get(from) as TowerConstructor\r\n        tower.onBoardPosition = to\r\n        tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\r\n        tower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize, reversed)\r\n        towers.set(to, tower)\r\n        towers.delete(from)\r\n        const towerTouched = null as unknown as TowerTouched\r\n        const lastMoveSquares = [from, to]\r\n        this.callBack({towers, towerTouched, lastMoveSquares, mouseDown: false, moveDone: true})\r\n    }\r\n\r\n    finalizeMandatoryMoveStep(from: string, to: string, board: IGameBoard, reversed = false, last = false) {\r\n        const towers = copyMap(board.towers)\r\n        const {cellSize, cellsMap} = board\r\n        const tower = towers.get(from) as TowerConstructor\r\n        tower.onBoardPosition = to\r\n        if (this.GV === 'towers') {\r\n            if (tower!.currentColor === PieceColor.w) {\r\n                tower.bPiecesQuantity = (tower.bPiecesQuantity as number) + 1\r\n            } else {\r\n                tower.wPiecesQuantity = (tower.wPiecesQuantity as number) + 1\r\n            }\r\n        }\r\n        if (this.GV !== 'international' || last) {\r\n            tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\r\n        }\r\n        tower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize, reversed)\r\n        towers.set(to, tower)\r\n        towers.delete(from)\r\n        console.log(tower)\r\n        return towers\r\n    }\r\n\r\n    setPositions(positionsTree: Map<string, IBoardToGame>, history: string[]) {\r\n        let currentPositionKey\r\n        currentPositionKey = history.join('_')\r\n        const currentPosition = positionsTree?.get(currentPositionKey)!\r\n        this.previousPosition = {...this.currentPosition}\r\n        this.currentPosition = currentPosition\r\n    }\r\n\r\n    updateTowersOnMandatoryMoveStep(from: string, to: string, state: IGameBoard, tP: string[], last=false) {\r\n        const isTowers = this.GV === 'towers'\r\n        const towers = this.updateTowersAfterMoveAnimation(from, to, state, isTowers, last)\r\n        if (isTowers) {\r\n            const middlePieceKey = tP[0]\r\n            const middlePiece = towers.get(middlePieceKey) as PartialTower\r\n            const takenTower = this.cuptureTower(middlePiece) as TowerConstructor\r\n            if (!takenTower) {\r\n                towers.delete(middlePieceKey)\r\n            } else {\r\n                towers.set(middlePieceKey, takenTower)\r\n            }\r\n            return towers\r\n        } else if (last) {\r\n            console.log(towers, tP)\r\n            tP.forEach((key: string) => {\r\n                towers.delete(key)\r\n            })\r\n            return towers\r\n        }\r\n        return towers\r\n    }\r\n\r\n    updateTowersToBoard(board: IBoardToGame): TowersMap {\r\n        const towers = new Map() as TowersMap\r\n        Object.keys(board).forEach((key: string) => {\r\n            let tower = board[key].tower as TowerConstructor\r\n            if (tower) {\r\n                const _tower = new TowerConstructor(tower)\r\n                _tower.onBoardPosition = key\r\n                towers.set(key, _tower)\r\n            }\r\n        })\r\n        return towers\r\n    }\r\n    \r\n    updateMiddleTowerOnOpponentMove(key: string, state: IGameBoard, board: IBoardToGame) {\r\n        const towers = copyMap(state.towers) as TowersMap\r\n        const takenTower = board[key]!.tower as PartialTower\r\n        if (takenTower) {\r\n            const newMiddleTower = {...towers.get(key), ...takenTower} as TowerConstructor;\r\n            towers.set(key, newMiddleTower)\r\n        } else {\r\n            towers.delete(key)\r\n        }\r\n        console.log('middle update', key, towers, board, takenTower)\r\n        return towers\r\n    }\r\n\r\n    updateTowersAfterMoveAnimation(from: string, to: string, board: IBoardToDraw, wT=false, last=false): TowersMap {\r\n        const {cellSize, cellsMap} = board\r\n        const towers = copyMap(board.towers!) as TowersMap\r\n        const tower = towers.get(from) as TowerConstructor\r\n        if (wT) {\r\n            if (tower!.currentColor === PieceColor.w) {\r\n                tower.bPiecesQuantity = (tower.bPiecesQuantity as number) + 1\r\n            } else {\r\n                tower.wPiecesQuantity = (tower.wPiecesQuantity as number) + 1\r\n            }\r\n        }\r\n        tower!.onBoardPosition = to\r\n        tower!.positionInDOM = this.calcTowerPosition(to, cellsMap!, cellSize!)\r\n        if (this.GV !== 'international' || last) {\r\n            tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\r\n        }\r\n        towers.set(to, tower)\r\n        towers.delete(from)\r\n        return towers\r\n    }\r\n\r\n    animateRivalTowerMove(from: string, to: string, state: IGameBoard) {\r\n        const {cellsMap, cellSize} = state\r\n        const towers = copyMap(state.towers)\r\n        const opponentTower = towers.get(from) as TowerConstructor\r\n        opponentTower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize)\r\n        return {...state, towers}\r\n    }\r\n\r\n    calcPositionOutboardTowers = (key: string, cellSize: number, reversed: boolean) => {\r\n        const boardElem = document.querySelector('.board__body')\r\n        const boardHeight = Math.round(boardElem!.getBoundingClientRect().height)\r\n        const towerWidth = CellTowerRatio * cellSize\r\n        const dY = Math.round(cellSize / 2 - towerWidth / 2)\r\n        const bottom = Math.round(boardHeight - cellSize / 2 - towerWidth / 2)\r\n        const x = Math.round(-5 - cellSize + dY)\r\n        return (reversed && key.includes('oB')) || (!reversed && key.includes('oW'))\r\n                ? {x, y: bottom}\r\n                : {x, y: dY}\r\n    }\r\n\r\n    calcTowerPosition = (key: string, map: CellsMap, cellSize: number, reversed = false): ITowerPosition => {\r\n        if (key.includes('oB') || key.includes('oW')) {\r\n            return this.calcPositionOutboardTowers(key, cellSize, reversed) as ITowerPosition\r\n        }\r\n        const cellPosition = map.get(key) as ITowerPosition\r\n        if (!cellPosition) return  {x: 0, y: 0}\r\n        const {x, y} = cellPosition\r\n        const towerElem = document.querySelector('.checker-tower')\r\n        if (!towerElem) {\r\n            console.error(towerElem)\r\n        }\r\n        const {width} = towerElem!.getBoundingClientRect()\r\n        return {x: Math.round(x - width / 2 + cellSize / 2), y: Math.round(y - width / 2  + cellSize/2)}\r\n    }\r\n\r\n    cancelTowerTransition(props: IGameBoard & {reversed?: boolean}) { \r\n        const {key} = props.towerTouched as TowerTouched\r\n        const {cellSize, cellsMap, reversed = false} = props\r\n        const towers = copyMap(props.towers) as TowersMap\r\n        const tower = towers.get(key) as TowerConstructor\r\n        tower.positionInDOM = this.calcTowerPosition(key, cellsMap, cellSize, reversed)\r\n        towers.set(key, tower)\r\n        this.callBack({...props, towers, towerTouched: null as unknown as TowerTouched, mouseDown: false})\r\n    }\r\n\r\n    updateTowersPosition = (cellSize: number, towers: TowersMap, map: CellsMap, reversed = false): TowersMap => {\r\n        const _towers = copyMap(towers)\r\n        towers.forEach((val: TowerConstructor, key: string) => {\r\n            const positionInDOM = this.calcTowerPosition(key, map, cellSize, reversed)\r\n            const tower = {...val, positionInDOM, onBoardPosition: key}\r\n            _towers.set(key, tower)\r\n        })\r\n        return _towers\r\n    }\r\n\r\n    updateCellsPosition = (board: IBoardToDraw, boardOptions: IBoardOptions, boardRef: HTMLDivElement) => {\r\n        const {cellsMap, cellSize, towers} = board\r\n        const {reversedBoard, boardSize} = boardOptions\r\n        const newCellSize = getCellSize(boardRef, boardSize);\r\n        if (cellSize === newCellSize) return\r\n        const newCellMap = updateCellsMap(cellsMap as CellsMap, newCellSize, reversedBoard)\r\n        const newTowers = this.updateTowersPosition(newCellSize, towers, newCellMap, reversedBoard)\r\n        // console.log(newTowers, towers)\r\n        this.callBack({towers: newTowers, cellsMap: newCellMap, cellSize: newCellSize})\r\n    }\r\n}\r\n\r\nconst tur = new TowersUpdateResolver()\r\n\r\nexport default tur\r\n","import { BoardNotation, IBoardOptions } from \"../app-interface\";\r\n\r\nexport const BoardOptionActions = {\r\n    SET_GAME_BOARD_OPTIONS: 'SET_GAME_BOARD_OPTIONS',\r\n    REVERSE_BOARD: 'REVERSE_BOARD',\r\n    SET_BOARD_THEME: 'SET_BOARD_THEME',\r\n    SET_BOARD_NOTATION: 'SET_BOARD_NOTATION',\r\n    SET_BOARD_SIZE: 'SET_BOARD_SIZE'\r\n}\r\n\r\ninterface SetBoardSizeAction {\r\n    type: typeof BoardOptionActions.SET_GAME_BOARD_OPTIONS\r\n    payload: number\r\n}\r\n\r\ninterface UpdateBoardOptionsAction {\r\n    type: typeof BoardOptionActions.SET_GAME_BOARD_OPTIONS\r\n    payload: Partial<IBoardOptions>\r\n}\r\n\r\nexport interface ReverseBoardAction {\r\n    type: typeof BoardOptionActions.REVERSE_BOARD\r\n    payload: boolean\r\n}\r\n\r\ninterface SetBoardThemeAction {\r\n    type: typeof BoardOptionActions.SET_BOARD_THEME\r\n    payload: string\r\n}\r\n\r\ninterface SetBoardNotationAction {\r\n    type: typeof BoardOptionActions.SET_BOARD_THEME\r\n    payload: BoardNotation\r\n}\r\n\r\nexport type BoardOptionActionTypes = UpdateBoardOptionsAction\r\n| SetBoardThemeAction\r\n| ReverseBoardAction\r\n| SetBoardNotationAction\r\n| SetBoardSizeAction\r\n","export const I18n: {[key:string]: any} = {\r\n    en: {\r\n        shortMainTitle: 'Draughts',\r\n        mainTitle: 'Tower Draughts',\r\n        newGame: 'New game',\r\n        submitLog: 'Login',\r\n        submitReg: 'Registration',\r\n        logTitle: 'Login',\r\n        regTitle: 'Registration in',\r\n        logMess: 'Please enter Nikname or email and password',\r\n        regMess : 'Please fiil registration form',\r\n        modeButtonLog: 'Do not have registred yet?',\r\n        modeButtonReg: 'Login',\r\n        labelPassword: 'Password',\r\n        labelNickname: 'Nickname or email',\r\n        submitButton: 'Submit',\r\n        about: 'Welcom to Tower-Draughts where, in addition to the classic Russian and international draughts, for the first time, the opportunity to play tower draughts has been implemented - one of the most interesting variants of the checkers game.',\r\n        about_continue: \"The rules of tower's draughts coincide in many respects with the rules of the Russians. The most important difference is that the knocked down checker is not removed from the board but is covered with a hitting checker (a tower of checkers) .In the case when a tower is under attack, one return checker is removed from its top and, if it is the only one of its color, the tower changes color and becomes the enemy's tower. In case of turning into a king, only the top man becomes the king. Another important difference from Russian draughts is the lack of restrictions on capture on previously passed fields (Turkish strike). You can find more information about the game on Wikipedia by clicking on the picture above.\",\r\n        play: \"Play\"\r\n    },\r\n    ru: {\r\n        shortMainTitle: 'Шашки',\r\n        mainTitle: 'Столбовые Шашки',\r\n        newGame: 'Новая игра',\r\n        submitLog: 'Войти',\r\n        submitReg: 'Зарегистрироваться',\r\n        logTitle: 'Для входа в',\r\n        regTitle: 'Для регистрации в',\r\n        logMess: 'Пожалуйста введите свой ник или email и пороль',\r\n        regMess : 'Пожалуйста заполните регистрационную форму',\r\n        modeButtonLog: 'Еще не зарегистрированы?',\r\n        modeButtonReg: 'Войти в аккаунт',\r\n        labelPassword: 'Пароль',\r\n        labelNickname: 'Игровой ник или email',\r\n        submitButton: 'Отправить',\r\n        about: 'Добро пожаловать на Tower Draughts, где помимо классических: русских и международных шашек, впервые представлена возможность играть онлайн в столбовые шашки - одну из наиболее интересных вариаций шашечной игры.',\r\n        about_continue: 'Правила столбовых шашек во многом совпадают с правилами русских. Самое главное отличие в том, что сбитая шашка не снимается с доски, а накрывается бъющей шашкой (башней из шашек) В случае, когда под боем оказаывается башня, с ее вершины снимается одна шашка и, если она единственная своего цвета, то башня меняет цвет и становитсья башней противника. В случае превращения в дамку, дамкой становиться только верхняя шашка. Еще одним важным отличием от русских шашек является отсутсвие ограничений на взятие по ранее пройденным полям (турецкий удар). Дополнительную информацию об игре вы можете найти на Википедии кликнув по картинке выше.',\r\n        play: \"Играть\"\r\n    }\r\n}","import React from 'react';\r\nimport './spinner.scss';\r\n/**\r\n * This component designed to show to user, that game data loading is in process\r\n * and used in the landing page and game.\r\n * Spinner's animation implemented with css.\r\n */\r\n\r\nconst Spinner = props => {\r\n    return (\r\n        <div className=\"waiting-rival-spinner\" onClick={() => props.cancelRivalWaiting()}>\r\n            <div title=\"cancel\" className=\"logo\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Spinner;\r\n","import { BaseBoardSize } from \"../constants/gameConstants\";\r\nimport { \r\n    CellsMap,\r\n    GameVariants,\r\n    IBoardCell,\r\n    IBoardToGame,\r\n    IDaigonals,\r\n    IGameState,\r\n    IMoveOrder,\r\n    IMoveProps,\r\n    ITowerPosition,\r\n    PartialTower,\r\n    PieceColor,\r\n    TowerConstructor,\r\n    TowersMap,\r\n    TowerType \r\n} from \"../store/app-interface\"\r\nimport {  copyObj, crossDirections, oppositColor } from \"./gameplay-helper-fuctions\";\r\nimport { createEmptyBoard } from \"./prestart-help-function-constants\";\r\n\r\nexport class BaseMoveResolver {\r\n    GV: GameVariants = 'towers'\r\n    size: number = BaseBoardSize\r\n\r\n    setProps = (props: {GV: GameVariants, size: number}) => {\r\n        this.GV = props.GV\r\n        this.size = props.size\r\n    }\r\n\r\n    checkTowerTypeChanging(to: string, boardSize: number, color: PieceColor, type: TowerType): TowerType {\r\n        if ((parseInt(to.slice(1)) === boardSize && color === PieceColor.w)\r\n            || (parseInt(to.slice(1)) === 1 && color === PieceColor.b)) {\r\n            return TowerType.k\r\n        } \r\n        return type\r\n    }\r\n\r\n    getCapturedPieceKey = (from: string, to: string, board: IBoardToGame): string => {\r\n        const interval = this.getInterval(from, to, board)\r\n        const key = interval.filter(c => c.tower)[0]\r\n        if (key) return key.boardKey\r\n        console.error(`invalid move - tower to take did not find ${from}:${to}`, board);\r\n        return ''\r\n    }\r\n\r\n    getInterval(start: string, end: string, board: IBoardToGame): IBoardCell[] {\r\n        if (board[end].tower) {\r\n            console.error('board', board, start, end)\r\n        }\r\n        const dir = this.getMoveDirection([start, end])\r\n        let cell = board[start]\r\n        const interval = []\r\n        while(true) {\r\n            const nextCellKey = cell!.neighbors[dir]\r\n            if (!nextCellKey || nextCellKey === end) break\r\n            cell = board[nextCellKey]\r\n            interval.push(cell)\r\n        } \r\n        return interval\r\n    }\r\n\r\n    getDiagonal(direction: string, startCellKey: string, board: IBoardToGame): IBoardCell[] {\r\n        let cell = board[startCellKey]\r\n        const diagonal = [cell]\r\n        while (cell) {\r\n            const nextCellKey = cell!.neighbors[direction]\r\n            if (nextCellKey) {\r\n                const nextCell = board[nextCellKey]\r\n                diagonal.push(nextCell)\r\n                cell = nextCell\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return diagonal;\r\n    }\r\n\r\n    getDiagonals(cell: string, board:  IBoardToGame, preDirected = ''): IDaigonals {\r\n        const neighbors = board[cell]!.neighbors\r\n        const diagonals = {} as IDaigonals\r\n        const availibleDirections = (d: string) => (!!preDirected ? crossDirections(preDirected)[d] : true)\r\n        Object.keys(neighbors).filter((d: string) => availibleDirections(d)).forEach((dir: string) => {\r\n            diagonals[dir] = this.getDiagonal(dir, cell, board)\r\n        })\r\n        return diagonals\r\n    }\r\n\r\n    getMoveDirection(move: string[]): string {\r\n        const [from, to] = move\r\n        if (from[0] > to[0]) {\r\n            if (parseInt(from.slice(1)) > parseInt(to.slice(1))) {\r\n                return 'leftDown'\r\n            }else {\r\n                return 'leftUp'\r\n            }\r\n        } else {\r\n            if (parseInt(from.slice(1)) > parseInt(to.slice(1))) {\r\n                return 'rightDown'\r\n            } else {\r\n                return 'rightUp'\r\n            }\r\n        }\r\n    }\r\n\r\n    cuptureTower = (tower: PartialTower): PartialTower | null => {\r\n        if (this.GV !== 'towers') {\r\n            return null as unknown as PartialTower\r\n        }\r\n        const {currentColor, bPiecesQuantity, wPiecesQuantity} = tower\r\n        const white = currentColor === PieceColor.w\r\n        const newTower = {\r\n           ...tower,\r\n            currentType: TowerType.m,\r\n            wPiecesQuantity: white ? (wPiecesQuantity as number) - 1 : wPiecesQuantity,\r\n            bPiecesQuantity: white ? bPiecesQuantity : (bPiecesQuantity as number) - 1,\r\n        }\r\n        if (!newTower.bPiecesQuantity && !newTower.wPiecesQuantity) {\r\n            return null as unknown as PartialTower\r\n        } else {\r\n            if (white && !newTower.wPiecesQuantity) {\r\n                newTower.currentColor = PieceColor.b\r\n            } else if (!white && !newTower.bPiecesQuantity) {\r\n                newTower.currentColor = PieceColor.w\r\n            }\r\n        }\r\n        return newTower\r\n    }\r\n}\r\n\r\nexport class MoveResolveCommons extends BaseMoveResolver {\r\n\r\n    checkNeighborsIsEmpty(key: string, board: IBoardToGame, color: PieceColor): string[] {\r\n        return Object.values(board[key].neighbors).filter((cellKey: string) => {\r\n            const condition = color === PieceColor.w\r\n                ? parseInt(key.slice(1)) < parseInt(cellKey.slice(1)) \r\n                : parseInt(key.slice(1)) > parseInt(cellKey.slice(1))\r\n            return condition  && !board[cellKey]!.tower\r\n        }).map((fN: string) => `${key}-${fN}`)\r\n    }\r\n\r\n    lookForTowerFreeMoves = (boardKey: string, board: IBoardToGame, color: PieceColor): string[] => { \r\n        const tower = board[boardKey].tower\r\n        if (tower!.currentType === TowerType.m) {\r\n            return this.checkNeighborsIsEmpty(boardKey, board, color)\r\n        } else {\r\n            return this.lookForKingFreeMoves(boardKey, board)\r\n        }\r\n    }\r\n\r\n    lookForAllPosibleMoves = (color: PieceColor, board: IBoardToGame): string[] => {\r\n        let result: string[] = []\r\n        for (let key of Object.keys(board)) {\r\n            const cell = board[key]\r\n            if(cell.tower?.currentColor === color) {\r\n                const moves = this.lookForTowerFreeMoves(key, board, color)\r\n                if (moves.length) {\r\n                    result = [...result, ...moves]\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\r\n\r\n    getCapturedTowers(move: string[], position: IBoardToGame, tP: string[] = [], i = 0): string[] {\r\n        const moveLength = move.length\r\n        if (moveLength < 2) return tP\r\n        tP.push(this.getCapturedPieceKey(move[i], move[i+1], position))\r\n        if (moveLength === 2 || i === moveLength - 2) {\r\n            return tP\r\n        }\r\n        i += 1\r\n        return this.getCapturedTowers(move, position, tP, i)\r\n    }\r\n\r\n    getFromToKeys = (moveArr: string[], board: IBoardToGame): string[] => {\r\n        let i = 0\r\n        while(i < moveArr.length) {\r\n            if(board[moveArr[i]].tower) {\r\n                const repetition = moveArr.lastIndexOf(moveArr[i])\r\n                if (repetition  < 0) {\r\n                    return moveArr.slice(i)\r\n                } else if (moveArr.slice(repetition).length > 1) {\r\n                    return moveArr.slice(repetition)\r\n                } else {\r\n                    return []\r\n                }\r\n            }\r\n            i++\r\n        }\r\n        throw Error('start tower in move not found')\r\n    }\r\n\r\n    makeMoveWithoutTakingPieces = (move: string[], board: IBoardToGame): IBoardToGame => {\r\n        const _board = copyObj(board)\r\n        const nextMoves = this.getFromToKeys(move, board)\r\n        const [from, to] = [nextMoves[0], nextMoves.slice(-1)[0]]\r\n        if (from !== to) {\r\n            const fromTower = {..._board[from].tower}\r\n            const whiteMove = fromTower.currentColor === PieceColor.w\r\n            if (this.checkLastLine(to, whiteMove) && this.GV !== 'international') {\r\n                fromTower.currentType = TowerType.k\r\n            }\r\n            _board[to].tower = fromTower\r\n            _board[from].tower = null\r\n        }\r\n\r\n        if (!_board[to]?.tower) {\r\n            console.error('error on board', move, _board, board)\r\n        }\r\n        if (_board[from].tower && !_board[to].tower?.currentColor) {\r\n            console.error('board was updated incorrectly whithout taken', move, _board, board)\r\n        }\r\n        return _board\r\n    }\r\n\r\n    getBoardFromTowers = (towers: TowersMap): IBoardToGame => {\r\n        const board = createEmptyBoard(this.size)\r\n        towers.forEach((value: TowerConstructor, key: string) => {\r\n            const {wPiecesQuantity, bPiecesQuantity, currentColor, currentType} = value\r\n            if (!key.includes(' ')) {\r\n                 board[key].tower = {wPiecesQuantity, bPiecesQuantity, currentColor, currentType}\r\n            }\r\n        })\r\n        return board\r\n    }\r\n    \r\n    getNewOrder = (props: Partial<IGameState>): IMoveOrder => {\r\n        const newPieceOrder = oppositColor(props.moveOrder!.pieceOrder)\r\n        const moveOrder = {\r\n            pieceOrder:  newPieceOrder,\r\n            playerTurn: props[newPieceOrder]!.name,\r\n        }\r\n        return moveOrder\r\n    }\r\n\r\n    getPropsToMakeFreeMove = (from: string, to: string, props: {[key: string]: any}): IMoveProps => {\r\n        const newPieceOrder = oppositColor(props.moveOrder!.pieceOrder)\r\n        const moveOrder = {\r\n            pieceOrder:  newPieceOrder,\r\n            playerTurn: props[newPieceOrder]!.name,\r\n        }\r\n        const position = this.makeFreeMove(from, to, props.currentPosition!)\r\n        return {moveOrder, moveToSave: {move: `${from}-${to}`, position}}\r\n    }\r\n\r\n    makeFreeMove(from: string, to: string, board: IBoardToGame): IBoardToGame {\r\n        const newBoard = copyObj(board)\r\n        if (!newBoard[from]) {\r\n            console.error('makeFreeMove invalid props', from, to, board)\r\n        }\r\n        const tower = {...newBoard[from].tower as TowerConstructor}\r\n        const boardSize = Math.sqrt(Object.keys(board).length * 2)\r\n        tower.currentType = this.checkTowerTypeChanging(to, boardSize, tower.currentColor, tower.currentType)\r\n        newBoard[to].tower = tower\r\n        newBoard[from].tower = null\r\n        return newBoard\r\n    }\r\n\r\n    checkDiagonalForKingMove(diag: IBoardCell[]) {\r\n        const startCellKey = diag[0].boardKey\r\n        const moves = [] as string[]\r\n        for (let cell of diag.slice(1)) {\r\n            if (cell.tower) break\r\n            moves.push(`${startCellKey}-${cell.boardKey}`)\r\n        }\r\n        return moves\r\n    }\r\n\r\n    manTowerFreeMoves = (tower: TowerConstructor, board: IBoardToGame, cellsMap: CellsMap) => {\r\n        const key = tower.onBoardPosition\r\n        const color = tower.currentColor\r\n        const posibleMoves =  new Map() as CellsMap\r\n        const cellNeighbors = board![key]!.neighbors\r\n        Object.values(cellNeighbors!).forEach((k: string) => {\r\n            const cell = board![k] \r\n            const [towerLine, neighborLine] = [parseInt(key.slice(1)), parseInt(k.slice(1))]\r\n            if ((color === PieceColor.b && !cell!.tower && towerLine > neighborLine)\r\n                || (color === PieceColor.w && !cell!.tower && towerLine < neighborLine)) {\r\n                posibleMoves.set(k, cellsMap!.get(k) as ITowerPosition)\r\n            }\r\n        })\r\n        return posibleMoves\r\n    }\r\n\r\n    checkLastLine(to: string, whiteMove: boolean): boolean {\r\n        const currentLine = parseInt(to.slice(1))\r\n        return (whiteMove && currentLine === this.size) || (!whiteMove && currentLine === 0)\r\n    }\r\n\r\n    lookForKingFreeMoves(cellKey: string, board: IBoardToGame): string[] {\r\n        const diagonals = this.getDiagonals(cellKey, board)\r\n        let moves = [] as string[]\r\n        Object.values(diagonals).forEach((diag: IBoardCell[]) => {\r\n            moves = moves.concat(this.checkDiagonalForKingMove(diag))\r\n        })\r\n        return moves\r\n    }\r\n\r\n    kingTowerFreeMoves = (key: string, board: IBoardToGame, cellsMap: CellsMap): CellsMap => {\r\n        const moves = this.lookForKingFreeMoves(key, board)\r\n        const posibleMoves = new Map() as CellsMap\r\n        moves.forEach((m: string) => {\r\n            const moveSteps = m.split('-')\r\n            const cellKey = moveSteps[moveSteps.length - 1]\r\n            posibleMoves.set(cellKey, cellsMap.get(cellKey) as ITowerPosition)\r\n        })\r\n        return posibleMoves\r\n    }\r\n\r\n    makeMandatoryMove = (move: string[], board: IBoardToGame): IBoardToGame => {\r\n        if (move.length < 2) console.error(`makeObligatedMove: incorrect move length`)\r\n        const nextMove = this.getFromToKeys(move, board)\r\n        if (!nextMove.length) {\r\n            return board\r\n        }\r\n        if (nextMove.length === 2) {\r\n            return this.makeMandatoryMoveStep(nextMove, board, true)\r\n        }\r\n        const newBoard = this.makeMandatoryMoveStep(nextMove as string[],board)\r\n        return this.makeMandatoryMove(nextMove.slice(1), newBoard)\r\n    }\r\n\r\n    updateBoardOnMandatoryMoveStep = (move: string[], board: IBoardToGame): IBoardToGame => {\r\n        if (this.GV === 'towers') {\r\n            return this.makeMandatoryMove(move, board)\r\n        }\r\n        return this.makeMoveWithoutTakingPieces(move, board)\r\n    }\r\n\r\n    makeMandatoryMoveStep = (move: string[], board: IBoardToGame, last=false): IBoardToGame => {\r\n        const newBoard = copyObj(board)\r\n        const [from, to] = move\r\n        if (from === to || !to || !from) {\r\n            console.error('error in step', move, board)\r\n        }\r\n        const tower = copyObj(board[from])!.tower as TowerConstructor\r\n        let middlePieceKey = this.getCapturedPieceKey(from, to, board)\r\n        const newMiddleTower = this.cuptureTower(newBoard[middlePieceKey].tower)\r\n        if (!tower || !middlePieceKey) {\r\n            console.error('invalid board:', JSON.stringify(board), 'move:', move)\r\n            return board\r\n        }\r\n        if (this.GV === 'towers') {\r\n            if (tower.currentColor === PieceColor.w) {\r\n                tower.bPiecesQuantity! += 1\r\n            } else {\r\n                tower.wPiecesQuantity! += 1\r\n            }\r\n        }\r\n        newBoard[from]!.tower = null\r\n        newBoard[middlePieceKey].tower = newMiddleTower\r\n        if (this.GV !== 'international' || last) {\r\n            tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\r\n           \r\n        }\r\n        newBoard[to]!.tower = tower as PartialTower\r\n        if (newBoard[move[0]].tower || !newBoard[move[1]].tower?.currentColor) {\r\n            console.error('board was updated incorrectly', move, newBoard, board)\r\n        }\r\n        return newBoard\r\n    }\r\n}\r\n","import { IBoardToGame, IBoardCell, IDaigonals, IMMRResult, PieceColor } from \"../store/app-interface\"\r\nimport {MoveResolveCommons as MRC} from \"./common-fn-moves-resolver\" \r\n\r\n\r\nexport class KingMandatoryMoveResolver extends MRC {\r\n\r\n    checkKingMandatoryMoves(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\r\n        let moves = [] as IMMRResult[]\r\n        moves = this.checkFirstKingDiagonals(cell, board)\r\n        if (!moves.length) {\r\n            return moves\r\n        }\r\n        return this.checkKingNextSteps(moves)\r\n    }\r\n\r\n    checkFirstKingDiagonals(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\r\n        let moves = [] as IMMRResult[]\r\n        const diagonals = this.getDiagonals(cell!.boardKey, board)\r\n        Object.values(diagonals)\r\n        .forEach((diag: IBoardCell[]) => {\r\n            const firstMove = {move: `${cell.boardKey}`, position: board, takenPieces: []}\r\n            const _moves = this.checkDiagonalToMadatoryMove(diag, firstMove)\r\n            if (_moves.length) {\r\n                moves = [...moves, ..._moves]\r\n            }\r\n        })\r\n        return moves\r\n    }\r\n\r\n    checkKingNextSteps(moves: IMMRResult[], cM: IMMRResult[] = []): IMMRResult[] {\r\n        let movesToCheckContinue: IMMRResult[] = []\r\n        let compleatedMoves = cM\r\n        moves.forEach((m: IMMRResult) => {\r\n            const nextStepResult = this.checkNextMoveStepDirections(m)\r\n            if (nextStepResult.length) {\r\n                movesToCheckContinue = movesToCheckContinue.concat(nextStepResult)\r\n            } else if (moves.filter(_m => _m.move.startsWith(m.move)).length === 1) {\r\n                compleatedMoves = compleatedMoves.concat(m)\r\n            }\r\n        })\r\n        // console.log(movesToCheckContinue)\r\n        if (!movesToCheckContinue.length) {\r\n            return compleatedMoves\r\n        } else {\r\n            return this.checkKingNextSteps(movesToCheckContinue, compleatedMoves)\r\n        }\r\n    }\r\n\r\n    checkIfDiagonalNotFit(diag: IBoardCell[], color: PieceColor): boolean {\r\n        return diag.length < 3\r\n            || !diag.filter((cell: IBoardCell) => cell.tower?.currentColor !== color).length\r\n            || diag[1].tower?.currentColor === color\r\n            || diag[2].tower?.currentColor === color\r\n    }\r\n\r\n    checkDiagonalToMadatoryMove(diag: IBoardCell[], move: IMMRResult): IMMRResult[] {\r\n        const color = diag[0].tower!.currentColor\r\n        let resultMoves = [] as IMMRResult[]\r\n        if (this.checkIfDiagonalNotFit(diag, color as PieceColor)) {\r\n            return resultMoves\r\n        }\r\n        let i = 1\r\n        while (i <  diag.length - 1) {\r\n            const tower = diag[i].tower\r\n            const nextCell = diag[i+1]\r\n            if (tower?.currentColor === color || (tower && nextCell.tower)) {\r\n                break\r\n            } \r\n            const takenPiece = diag[i].boardKey\r\n            const to = nextCell.boardKey\r\n            const notTaken = !move.takenPieces?.includes(takenPiece)\r\n            if (tower && !nextCell.tower && tower.currentColor !== color && notTaken) {\r\n                if (!resultMoves.length) {\r\n                    const nMove = `${move.move}:${to}`\r\n                    const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), move.position)\r\n                    const takenPieces = [...move.takenPieces!, takenPiece]\r\n                    resultMoves.push({ move: nMove, position, takenPieces})\r\n                } else {\r\n                    const last = resultMoves.slice(-1)[0]\r\n                    const takenPieces = [...last.takenPieces!, takenPiece]\r\n                    const nMove = `${last.move}:${to}`\r\n                    const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), last.position)\r\n                    resultMoves.push({move: nMove, position, takenPieces})\r\n                }\r\n                i += 2 \r\n            } else {\r\n                if (!tower && resultMoves.length) {\r\n                    const start = resultMoves[0].move!.split(':').slice(0, -1).join(':')\r\n                    const takenPieces = resultMoves[0].takenPieces\r\n                    const nMove = `${start}:${diag[i].boardKey}`\r\n                    const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), move.position)\r\n                    resultMoves.push({move: nMove, position, takenPieces})\r\n                }\r\n                i += 1\r\n            }\r\n        }\r\n        const lastCell = diag[i]\r\n        if (i === diag.length - 1 && !lastCell.tower && resultMoves.length) {\r\n            if (!resultMoves.filter((m: IMMRResult) => m.move.includes(lastCell.boardKey)).length) {\r\n                const start = resultMoves[0].move!.split(':').slice(0, -1).join(':')\r\n                const takenPieces = resultMoves[0].takenPieces\r\n                const nMove = `${start}:${lastCell.boardKey}`\r\n                const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), move.position)\r\n                resultMoves.push({move: nMove, position, takenPieces})\r\n            }\r\n        }\r\n       \r\n        return resultMoves\r\n    }\r\n\r\n    checkNextMoveStepDirections(move: IMMRResult): IMMRResult[] {\r\n        const moveArr = move.move.split(':').slice(-2)\r\n        const cellKey = moveArr[1]\r\n        const direction = this.getMoveDirection(moveArr)\r\n        const board = move.position\r\n        if (!board || !board[move.move.split(':').slice(-1)[0]].tower) {\r\n            console.error('error in move', move)\r\n        }\r\n        const diagonals = this.getDiagonals(cellKey, board, direction) as IDaigonals\r\n        let result = [] as IMMRResult[]\r\n        Object.values(diagonals).forEach((diag: IBoardCell[]) => {\r\n            if (!diag[0].tower) {\r\n                console.error('invalid diagonal', diag, move)\r\n            }\r\n            const moves = this.checkDiagonalToMadatoryMove(diag, move)\r\n            if (moves.length) {\r\n                result = [...result, ...moves]\r\n            }\r\n        })\r\n        return result \r\n    }\r\n}\r\n\r\nconst kmmr = new KingMandatoryMoveResolver()\r\n\r\nexport default kmmr\r\n","import { PieceColor, IBoardToGame, TowerType, IBoardCell, IMMRResult } from '../store/app-interface'\r\nimport { filterArrayByLength, copyObj, oppositColor } from './gameplay-helper-fuctions'\r\nimport { KingMandatoryMoveResolver as KMMR} from './king-mandatory-move-resolver'\r\nimport { createStartBoard } from './prestart-help-function-constants'\r\n\r\n\r\nexport class MandatoryMovesResolver extends KMMR{\r\n    gameVariantMoveContinueRestriction() {\r\n        if (this.GV === 'international') return false\r\n        return true\r\n    }\r\n\r\n    makeMoves(moves: string[], board = createStartBoard(this.size)): IBoardToGame {\r\n        let nBoard: IBoardToGame = copyObj(board)\r\n        let step = 0\r\n        while(step < moves.length) {\r\n            const move = moves[step]\r\n            if (move.includes('-')) {\r\n                const [from, to] = move.split('-')\r\n                nBoard[to].tower = board[from].tower\r\n                nBoard[from].tower = null\r\n            } else if (move.includes(':')) {\r\n                nBoard = this.makeMandatoryMove(move.split(':'), board)\r\n            }\r\n            step += 1\r\n        }\r\n        return nBoard\r\n    }\r\n\r\n    lookForAllMoves = (color: PieceColor, board: IBoardToGame): IMMRResult[] => {\r\n        const mandatoryMoves = this.lookForMandatoryMoves(color, board)\r\n        if (mandatoryMoves.length) {\r\n            return mandatoryMoves\r\n        } \r\n        return this.lookForAllPosibleMoves(color, board).map((m: string) => {\r\n            const [from, to] = m.split('-')\r\n            return {move: m, position: this.makeFreeMove(from, to, board)}\r\n        })\r\n    }\r\n\r\n    checkMandatoryMoveNextStep = (move: IMMRResult): IMMRResult[] => {\r\n        // console.log('move', move.move)\r\n        const moveArray = move.move.split(':')\r\n        const [from, to] = moveArray.slice(moveArray.length - 2)\r\n        const board = move.position\r\n        const cell = board[to]\r\n        const neighbors = cell.neighbors\r\n        const nextMoves: IMMRResult[] = []\r\n        const exludedDirection = this.getMoveDirection([to, from])\r\n        Object.keys(neighbors).filter((dir: string) => (\r\n                dir !== exludedDirection\r\n        )).forEach((dir: string) => {\r\n            if (!cell.tower) {\r\n                console.error('checkManMoveNextStep invalid start cell', move, board, cell, dir)\r\n            }\r\n            const nMove = this.checkManDirection(cell, dir, move)\r\n            if (nMove) {\r\n                nextMoves.push(nMove)\r\n            }\r\n        })\r\n        return nextMoves\r\n    }\r\n\r\n    checkManFristMandatoryStep(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\r\n        const moves = [] as IMMRResult[]\r\n        Object.keys(cell!.neighbors).forEach((dir: string) => {\r\n            const startProps = {move: '', position: board, takenPieces: [], currentPosition: cell.boardKey}\r\n            const move = this.checkManDirection(cell, dir, startProps)\r\n            if (move) {\r\n                moves.push(move)\r\n            }\r\n        })\r\n        // console.log(moves)\r\n        return moves\r\n    }\r\n\r\n    checkManMandatoryMoves(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\r\n        let result = [] as IMMRResult[]\r\n        result = this.checkManFristMandatoryStep(cell, board)\r\n        if (!result.length) {\r\n            return result\r\n        }\r\n        return this.checkMandatoryMoveNextSteps(result)\r\n    }\r\n\r\n    checkManDirection(cell: IBoardCell, dir: string, preMove: IMMRResult): IMMRResult {\r\n        if (!cell.tower) {\r\n            console.error('cod invalid start cell', cell, preMove, dir)\r\n        }\r\n        const board = preMove.position\r\n        const neighborCell = board[cell!.neighbors[dir]]\r\n        const takenPiece = neighborCell.boardKey\r\n        if (this.GV !== 'towers' && preMove.move.length && preMove.takenPieces!.includes(takenPiece)) {\r\n            return null as unknown as IMMRResult\r\n        } else if (neighborCell?.tower?.currentColor === oppositColor(cell!.tower!.currentColor!)) {\r\n            const nextCellKey = neighborCell.neighbors[dir]\r\n            if(nextCellKey && !board[nextCellKey].tower) {\r\n                const move = !preMove.move.length \r\n                    ? `${cell?.boardKey}:${nextCellKey}` \r\n                    : `${preMove.move}:${nextCellKey}`\r\n                if (move.split(':').length < 2) {\r\n                    console.error('move too short', move)\r\n                }\r\n                const position = this.updateBoardOnMandatoryMoveStep(move.split(':'), board)\r\n                const takenPieces = [...preMove.takenPieces!, takenPiece]\r\n                return {move, takenPieces, position}\r\n            }\r\n        }\r\n        return null as unknown as IMMRResult\r\n    }\r\n\r\n    checkMandatoryMoveNextSteps = (moves: IMMRResult[], cM = [] as IMMRResult[]): IMMRResult[] => {\r\n        let compleatedMoves = cM as IMMRResult[]\r\n        let movesToCheckContinue = [] as IMMRResult[]\r\n        moves.forEach((mr: IMMRResult) => {\r\n            const board = mr.position\r\n            const currrentSquare = mr.move.split(':').slice(-1)[0]\r\n            if (board[currrentSquare].tower?.currentType === TowerType.k \r\n                && this.gameVariantMoveContinueRestriction()) {\r\n                const nextMoves = this.checkKingNextSteps([mr])\r\n                if (nextMoves.length) {\r\n                    compleatedMoves = compleatedMoves.concat(nextMoves)\r\n                } else {\r\n                    compleatedMoves.push(mr) \r\n                }\r\n            } else {\r\n                const nextMoves = this.checkMandatoryMoveNextStep(mr)\r\n                if (nextMoves.length) { \r\n                    movesToCheckContinue = movesToCheckContinue.concat(nextMoves)\r\n                } else if (this.GV !== 'international') {\r\n                    if (!compleatedMoves.filter(m => m.move.startsWith(mr.move)).length) {\r\n                        compleatedMoves.push(mr)\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        })\r\n        if (!movesToCheckContinue.length) {\r\n            return compleatedMoves\r\n        } else {\r\n            return this.checkMandatoryMoveNextSteps(movesToCheckContinue, compleatedMoves)\r\n        }\r\n    }\r\n\r\n    removeTakenPieces = (move: IMMRResult) => {\r\n        const {takenPieces} = move\r\n        const position = copyObj(move.position)\r\n        takenPieces!.forEach(key => {\r\n            position[key].tower = null\r\n        })\r\n        return {...move, position}\r\n    }\r\n\r\n    lookForMandatoryMoves = (color: PieceColor, board: IBoardToGame): IMMRResult[] => {\r\n        let result = [] as IMMRResult[]\r\n        for (let cell of Object.values(board)) {\r\n            if (cell.tower?.currentColor !== color) continue\r\n            if (cell.tower?.currentType === TowerType.k) {\r\n                const moves = this.checkKingMandatoryMoves(cell, board)\r\n                if (moves.length) {\r\n                    result =  result.concat(moves)\r\n                }\r\n            } else {\r\n                const moves = this.checkManMandatoryMoves(cell, board)\r\n                if (moves.length) {\r\n                    result = result.concat(moves)\r\n                }\r\n            }\r\n        }\r\n        result = this.GV === 'towers'\r\n            ? result \r\n            : result.map((m: IMMRResult) => (this.removeTakenPieces(m)))\r\n        return this.GV ===  'international' ? filterArrayByLength(result).cont : result\r\n    }\r\n}\r\n\r\nconst mmr = new MandatoryMovesResolver()\r\n\r\nexport default mmr\r\n","import { IPlayer, Online, RivalType, PieceColor, Timing, GameVariants, GameType } from '../app-interface';\r\nimport {GameOptionActionTypes, GameOptionActions, FindOpponentAction} from './types'\r\n\r\n\r\nexport function setRivalLevel(payload: number): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.SET_RIVAL_LEVEL,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setPlayerColor(payload: PieceColor | 'random'): GameOptionActionTypes {\r\n    return ({\r\n        type: GameOptionActions.CHOOSE_COLOR,\r\n        payload\r\n    });\r\n};\r\n\r\nexport function setPlayer(payload: IPlayer): GameOptionActionTypes {\r\n    return ({\r\n        type: GameOptionActions.SET_PLAYER,\r\n        payload\r\n    });\r\n};\r\n\r\nexport function setOpponent(payload: IPlayer): GameOptionActionTypes {\r\n    return ({\r\n        type: GameOptionActions.SET_RIVAL,\r\n        payload\r\n    });\r\n};\r\n\r\nexport function setOpponentType(payload: RivalType): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.SET_RIVAL_TYPE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setOpponentStatus(payload: Online): GameOptionActionTypes {\r\n    return ({\r\n        type: GameOptionActions.SET_RIVAL_ONLINE_STATUS,\r\n        payload\r\n    });\r\n};\r\n\r\nexport function setTiming(payload: Timing): GameOptionActionTypes {\r\n    return ({\r\n        type: GameOptionActions.SET_GAME_TIMING,\r\n        payload\r\n    });\r\n};\r\n\r\nexport function setPlayerStatus (payload: Online): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.SET_RIVAL_ONLINE_STATUS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function findRival(): FindOpponentAction  {\r\n    return {type: GameOptionActions.FIND_RIVAL}\r\n}\r\n\r\nexport function finishGameSetup(payload: boolean): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.FINISH_GAME_SETUP,\r\n        payload\r\n    }\r\n}\r\n \r\nexport function waitingRival(payload: boolean): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.WAIT_RIVAL,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setGameVariant(payload: GameVariants): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.SET_GAME_VARIANT,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function cancelRivalWaiting(payload = null): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.CANCEL_RIVAL_WAITING,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function requestRematch(payload = null): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.REMATCH_REQUEST,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setGameType(payload: GameType): GameOptionActionTypes {\r\n    return {\r\n        type: GameOptionActions.SET_GAME_TYPE,\r\n        payload\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport './logoIcon.scss'\r\n\r\nexport const Logo: React.FC<{size?: number}> = ({size = 16}) => {\r\n    return <i className={`logo s-${size}`}></i>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/game-example.329613c8.gif\";","import React from 'react'\r\n\r\nimport './bg-board.scss'\r\n\r\n const BGBoard: React.FC = () => { \r\n    const Board = [1,2,3,4,5,6,7,8].map((v: number, i: number) => {\r\n        return [1,2,3,4,5,6,7,8].map((h: number, j: number) => {\r\n            const type = !((i + j) % 2) ? 'light-cell' : 'dark-cell'\r\n            const className = type\r\n            return (\r\n                <div key={i + '-' + j} className={className}></div>\r\n            )\r\n        })\r\n    })\r\n                        \r\n    return (\r\n        <div className=\"bg-board\">\r\n            {Board}\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default BGBoard\r\n","import React, { Suspense } from 'react'\r\n\r\nimport Spinner from '../../page-components/spinners/Spinner'\r\nimport gameExample from '../../assets/game-example.gif'\r\nimport BGBoard from './Bg-board'\r\nimport { sampleLink } from '../../constants/gameConstants'\r\nimport {I18n} from '../../assets/i18n'\r\n\r\nimport './home.scss'\r\nimport { useSelector } from 'react-redux'\r\nimport { IRootState } from '../../store/rootState&Reducer'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const Home: React.FC = () => {\r\n    const language = useSelector((store: IRootState) => store.user.language)\r\n    const history = useHistory()\r\n    const i18n = (I18n as {[key: string]: any})[language.slice(0, 2)]\r\n    const href = sampleLink\r\n    const handleClick = () => {\r\n        history.push(\"game\")\r\n    }\r\n    return (\r\n        <Suspense fallback={<Spinner />}>\r\n            <div className=\"page home-page\">\r\n                <div className=\"bg-board\"></div>\r\n                <BGBoard />\r\n                <section className=\"home-page_content\">\r\n                    <span>{i18n.about}</span>\r\n                        <figure className=\"game-example-wrapper\">\r\n                            <a href={href} target=\"_blank\" rel=\"author noreferrer\">\r\n                                <figcaption><p>Tower's draughts game example.</p><p>Created by Sergey Ivanov.</p></figcaption>\r\n                                <img width=\"200px\" src={gameExample} alt=\"Tower's Checkers game example\"></img>\r\n                            </a>   \r\n                        </figure>\r\n                    <span>&nbsp;{i18n.about_continue}</span>\r\n                    <p className=\"home-page_to-game_button\">\r\n                        <button className='new-game' onClick={handleClick} type=\"button\">{i18n.play}</button>\r\n                    </p>\r\n                </section>\r\n            </div>\r\n        </Suspense>\r\n    )\r\n}\r\n    \r\nexport default Home\r\n","import React, { lazy, Suspense } from 'react'\r\nimport {Switch, Route} from 'react-router-dom'\r\n\r\nimport Home from './pages/home/Home'\r\nimport Spinner from './page-components/spinners/Spinner'\r\nimport {RoutesPath} from './constants/gameConstants'\r\n\r\n\r\nconst GameAnalizePage =  lazy(() => import( './pages/gameAnalize/GameAnalyzePage'));\r\nconst GamePage = lazy(() => import( './pages/game/GamePage'));\r\n\r\nconst Router = () => {\r\n    return (\r\n        <Suspense fallback={<Spinner />}>\r\n            <Switch>\r\n               <Route path={RoutesPath.home} exact>\r\n                    <Home />\r\n                </Route>\r\n                <Route path={RoutesPath.game}>\r\n                    <GamePage />\r\n                </Route>\r\n                <Route path={RoutesPath.analysis}>\r\n                    <GameAnalizePage />\r\n                </Route>               \r\n            </Switch>\r\n        </Suspense> \r\n    )    \r\n}\r\n\r\nexport default React.memo(Router)\r\n","import { IUser } from \"../app-interface\"\r\n\r\nexport const UserActions = {\r\n    LOGIN_SUCCEED: 'LOGIN_SUCCEED',\r\n    REGISTER_USER: 'REGISTERE_USER',\r\n    SAVE_USER_STORAGE: 'SAVE_USER_STORAGE',\r\n    GET_USER_FROM_STORAGE: 'GET_USER_FROM_STORAGE',\r\n    CHECK_TOKEN_EXPIRATION: 'CHECK_TOKEN_EXPIRATION',\r\n    EXPIRE_TOKEN: 'TOKEN_EXPEXPIRE',\r\n    DELETE_USER_FROM_STORAGE: 'DELETE_USER_FROM_STORAGE',\r\n    LOGOUT: 'LOGOUT',\r\n    SEND_AUTH_REQUEST: 'SEND_AUTH_REQUEST',\r\n    SET_PREFERABLE_LANGUAGE: 'SET_PREFERABLE_LANGUAGE',\r\n    CHECK_STORAGE: 'CHECK_STORAGE',\r\n}\r\n\r\ninterface CheckStorageAction {\r\n    type: typeof UserActions.CHECK_STORAGE,\r\n    payload: null\r\n}\r\n\r\ninterface LoginUserAction {\r\n    type: typeof UserActions.LOGIN_SUCCEED,\r\n    payload: IUser\r\n}\r\n\r\ninterface SetPreferableLangaugeAction {\r\n    type: typeof UserActions.SET_PREFERABLE_LANGUAGE,\r\n    payload: string\r\n}\r\n\r\ninterface LogoutUserAction {\r\n    type: typeof UserActions.LOGIN_SUCCEED,\r\n    payload: null\r\n}\r\n\r\ninterface RegisterUserAction {\r\n    type: typeof UserActions.REGISTER_USER,\r\n    payload: boolean\r\n}\r\n\r\ninterface SaveUserStorageAction {\r\n    type: typeof UserActions.SAVE_USER_STORAGE,\r\n    payload: IUser\r\n}\r\n\r\ninterface GetUserStorageAction {\r\n    type: typeof UserActions.GET_USER_FROM_STORAGE,\r\n    payload: IUser\r\n}\r\n\r\ninterface DeleteUserStorageAction {\r\n    type: typeof UserActions.DELETE_USER_FROM_STORAGE,\r\n    payload: null\r\n}\r\n\r\nexport type UserActionTypes = GetUserStorageAction \r\n    | SaveUserStorageAction \r\n    | RegisterUserAction \r\n    | LoginUserAction\r\n    | LogoutUserAction\r\n    | DeleteUserStorageAction \r\n    | SetPreferableLangaugeAction\r\n    | CheckStorageAction\r\n","import React, { useEffect, useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport { RoutesPath, RoutesTitle } from '../constants/gameConstants'\r\nimport { IRef } from '../store/app-interface'\r\n\r\n\r\nexport const MobileMenu = () => {\r\n    const [dropdown, setDropdown] = useState(false)\r\n    const [visible, setVisible] = useState(false)\r\n    const mobileMenuClass = `mobile-nav${visible ? ' visible' : ' hidden'}${!dropdown ? ' display-none' : ' display'}`\r\n    const timeout = 300\r\n    const ref: IRef<HTMLUListElement> = React.createRef() \r\n    const handleDropdown = (e: React.MouseEvent) => {\r\n        e.preventDefault() \r\n        if (!dropdown) {\r\n            setDropdown(true)\r\n            setTimeout(() => setVisible(true), timeout)\r\n        } else {\r\n            setVisible(false)\r\n            setTimeout(() => setDropdown(false), timeout)\r\n        }\r\n    }\r\n    const handleClickOutside = (ev: any) => {\r\n        ev.stopPropagation()\r\n        const elem = ref.current as HTMLElement\r\n        if (!dropdown || !elem) {\r\n            return\r\n        }\r\n        const target = ev.target as HTMLElement\r\n        if (!elem.contains(target)) {\r\n            setDropdown(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!window) return\r\n        window.addEventListener('click', handleClickOutside)\r\n        if (!dropdown) {\r\n            return window.removeEventListener('click', handleClickOutside)\r\n        }\r\n        // return window.removeEventListener('click', handleClickOutside)\r\n    })\r\n    \r\n    return (\r\n        <div onClick={handleDropdown}>\r\n            <button  className=\"mobile-nav-dropdown-btn\" >\r\n                <i className=\"material-icons\">menu</i>\r\n            </button>\r\n            <ul className={mobileMenuClass} ref={ref}>\r\n                <li>\r\n                    <NavLink exact={true} className=\"navlink mobile\" to={RoutesPath.home}>\r\n                        <i className=\"large material-icons\">{RoutesTitle.home}</i>\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink className=\"navlink mobile\" to={RoutesPath.game}>\r\n                        <i className=\"large material-icons\">{RoutesTitle.game}</i>\r\n                    </NavLink>\r\n                </li>\r\n                <li title=\"game analize\">\r\n                    <NavLink className=\"navlink\" to={RoutesPath.analysis}>\r\n                        <i className=\"large material-icons\">{RoutesTitle.analyze}</i>\r\n                    </NavLink>\r\n                </li>\r\n                <li title=\"settings\">\r\n                    <NavLink className=\"navlink\" to={RoutesPath.settings}>\r\n                        <i className=\"large material-icons\">{RoutesTitle.settings}</i>\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n       \r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\n\r\nimport {RoutesPath, RoutesTitle} from '../constants/gameConstants'\r\nimport {IRootState} from '../store/rootState&Reducer'\r\nimport {findRival} from '../store/gameOptions/actions'\r\nimport {setLanguage} from '../store/user/actions'\r\nimport {MobileMenu} from './MobileDropdownNav'\r\nimport { Logo } from '../common/LogoIcon'\r\nimport {I18n} from '../assets/i18n'\r\n\r\n\r\nconst mapState = (state: IRootState) => ({\r\n    language: state.user.language,\r\n    winWidth: state.app.windowSize.width\r\n})\r\n\r\nconst mapDispatch = {\r\n   setLanguage, findRival\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch)\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nexport const Navbar: React.FC<Props> = (props) => {\r\n    const {setLanguage, language, findRival, winWidth} = props\r\n    const isAuth = true\r\n    const lang = language.slice(0,2)\r\n    const history = useHistory()\r\n    const handleLogoClick = (event: React.MouseEvent) => {\r\n        event.preventDefault()\r\n        findRival()\r\n        history.push('/game')\r\n    }\r\n    // const i18n = I18n[lang]\r\n    const [mobile, setMobile] = useState(window?.innerWidth < 500)\r\n\r\n    useEffect(() => {\r\n        setMobile(winWidth < 500)\r\n    }, [winWidth])\r\n    const notAuthLogo = mobile ? I18n['en'].mainTitle : I18n['en'].shortMainTitle\r\n    const isAuthLogo = mobile ? <Logo size={18} /> : I18n['en'].mainTitle\r\n    let logo: React.ReactNode = !isAuth \r\n        ? <NavLink title=\"to home\" to={RoutesPath.home} className=\"brand-logo\">{notAuthLogo}</NavLink>\r\n        : <div title=\"new game\" className=\"brand-logo\" onClick={handleLogoClick}>{isAuthLogo}</div>\r\n        \r\n    return (\r\n        <nav className=\"nav\">\r\n            <div className=\"nav-wrapper\">\r\n                {logo}\r\n                <div className=\"right-nav\">\r\n                    <DuoLanguageSwitcher lang={lang} langs={['ru', 'en']} setLanguage={setLanguage}/>\r\n                    <MobileMenu />\r\n                    <ul className=\"desktop-nav\">\r\n                        <li title=\"home\">\r\n                            <NavLink exact={true} className=\"navlink\" to={RoutesPath.home} >\r\n                                <i className=\"large material-icons\">{RoutesTitle.home}</i>\r\n                            </NavLink>\r\n                        </li>\r\n                        <li title=\"game\">\r\n                            <NavLink className=\"navlink\" to={RoutesPath.game}>\r\n                                <i className=\"large material-icons\">{RoutesTitle.game}</i>\r\n                            </NavLink>\r\n                        </li>\r\n                        <li title=\"game analize\">\r\n                            <NavLink className=\"navlink\" to={RoutesPath.analysis}>\r\n                                <i className=\"large material-icons\">{RoutesTitle.analyze}</i>\r\n                            </NavLink>\r\n                        </li>\r\n                        <li title=\"settings\">\r\n                            <NavLink className=\"navlink\" to={RoutesPath.settings}>\r\n                                <i className=\"large material-icons\">{RoutesTitle.settings}</i>\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <LoginBar /> */}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport interface DouLangProps {\r\n    langs: string[],\r\n    setLanguage(l: string): void,\r\n    lang: string\r\n}\r\n\r\nexport const DuoLanguageSwitcher = (props: DouLangProps) => {\r\n    const { lang, setLanguage, langs } = props;\r\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (lang === langs[0]) {\r\n            setLanguage(langs[1])\r\n        } else {\r\n            setLanguage(langs[0])\r\n        }\r\n        (e.target as HTMLButtonElement).blur();\r\n    };\r\n    return <button title=\"change language\" className=\"change-lang-button\" onClick={e => handleClick(e)}>\r\n        <span className={`flag-icon flag-icon-${lang === 'en' ? 'gb' : lang} flag-icon-squared`}></span>\r\n    </button>\r\n};\r\n\r\nexport default connector(Navbar)\r\n","import { IUser } from '../app-interface';\r\nimport {UserActions, UserActionTypes} from './types';\r\n\r\nexport  function loginSucceed(payload: IUser): UserActionTypes{\r\n    return {\r\n        type: UserActions.LOGIN_SUCCEED,\r\n        payload,\r\n    }\r\n};\r\n\r\nexport  function logout(payload = null): UserActionTypes{\r\n  return {\r\n      type: UserActions.LOGOUT,\r\n      payload\r\n  }\r\n};\r\n\r\nexport function saveUserToStorage(payload: IUser ): UserActionTypes {\r\n    return {\r\n      type: UserActions.SAVE_USER_STORAGE,\r\n      payload\r\n    }\r\n}\r\n\r\n// export function register(payload = null): UserActionTypes {\r\n//     return {\r\n//       type: UserActions.REGISTER_USER,\r\n//       payload\r\n//     }\r\n// }\r\n\r\nexport function getUserFromStorage(payload: IUser): UserActionTypes {\r\n    return {\r\n      type: UserActions.GET_USER_FROM_STORAGE,\r\n      payload\r\n    }\r\n}\r\n\r\nexport  function setLanguage(payload: string): UserActionTypes{\r\n  return {\r\n      type: UserActions.SET_PREFERABLE_LANGUAGE,\r\n      payload,\r\n  }\r\n};\r\n\r\nexport function deleteUserFromStorage(payload = null): UserActionTypes {\r\n    return {\r\n        type: UserActions.DELETE_USER_FROM_STORAGE,\r\n        payload\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport Navbar from './Navbar'\r\n\r\nimport './header.scss'\r\n\r\nexport const Header: React.FC = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <Navbar />\r\n        </header>\r\n    )\r\n    \r\n} ","export default __webpack_public_path__ + \"static/media/icons8-github.164d6380.svg\";","import { IMessage } from \"../app-interface\"\r\n\r\nexport const AppActions = {\r\n    // CHECK_LOCAL_STORAGE: 'CHECK_LOCAL_STORAGE',\r\n    SET_PORTRAIT: 'SET_PORTRAIT',\r\n    CLOSE: 'CLOSE',\r\n    WINDOW_SIZE: 'WINDOW_SIZE',\r\n    ADD_MESSAGE_TO_GAME_CHAT: 'ADD_MESSAGE_TO_GAME_CHAT',\r\n    ADD_MESSAGE_TO_COMMON_CHAT: 'ADD_MESSAGE_TO_COMMON_CHAT',\r\n}\r\n\r\nexport interface AddToGameChatAction {\r\n    type: typeof AppActions.ADD_MESSAGE_TO_GAME_CHAT\r\n    payload: IMessage\r\n}\r\n\r\nexport interface AddToCommonChatAction {\r\n    type: typeof AppActions.ADD_MESSAGE_TO_COMMON_CHAT\r\n    payload: IMessage\r\n}\r\n\r\nexport interface SetWindowSize {\r\n    type: typeof AppActions.WINDOW_SIZE\r\n    payload: {width: number, height: number}\r\n}\r\n\r\nexport interface SetPortraitAction {\r\n    type: typeof AppActions.SET_PORTRAIT,\r\n    payload: boolean\r\n}\r\n\r\nexport interface CloseAction {\r\n    type: typeof AppActions.CLOSE,\r\n    payload: string\r\n}\r\n\r\nexport type AppActionTypes = SetPortraitAction \r\n| CloseAction \r\n| SetWindowSize\r\n| AddToCommonChatAction\r\n| AddToGameChatAction\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\n\r\n\r\nimport git from '../assets/icons8-github.svg'\r\nimport { BaseBoardSize } from '../constants/gameConstants'\r\nimport { IRootState } from '../store/rootState&Reducer'\r\nimport {setPortrait, setWindowSize, close} from '../store/app/actions'\r\n\r\nimport './footer.scss'\r\n\r\nconst mapState = (state: IRootState) => ({\r\n    token: state.user.token,\r\n    windowSize: state.app.windowSize,\r\n    portrait: state.app.portrait,\r\n    game: state.game.gameMode === 'isPlaying'\r\n})\r\nconst mapDispatch = {close, setWindowSize, setPortrait}\r\n\r\nconst connector = connect(mapState, mapDispatch)\r\n\r\nclass Footer extends React.Component<ConnectedProps<typeof connector>> {\r\n\r\n    componentDidMount() {\r\n        if (!window) return\r\n        window.addEventListener(\"beforeunload\", this.onClose)\r\n        window.addEventListener('resize', this.handleResize) \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"beforeunload\", this.onClose)\r\n        window.removeEventListener(\"resize\", this.handleResize)\r\n    }\r\n\r\n    handleResize = () => {\r\n        if (!window) return\r\n        const {windowSize, setPortrait, setWindowSize, portrait} = this.props\r\n        const {width, height} = windowSize\r\n        const {innerHeight, innerWidth} = window\r\n        if ((Math.abs(width - innerWidth) > BaseBoardSize / 2 || Math.abs(height - innerHeight) > BaseBoardSize / 2)) {\r\n            setWindowSize({width: innerWidth, height: innerHeight})\r\n            if (portrait && innerWidth / innerHeight > 1.3) {\r\n                setPortrait(false)\r\n            } else if (!portrait && innerWidth / innerHeight <= 1.3) {\r\n                setPortrait(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    onClose = (e: any) => {\r\n        e.preventDefault();\r\n        const token = this.props.token\r\n        if (token) this.props.close(token)\r\n        \r\n    }\r\n\r\n    render() {\r\n        return <footer>\r\n                    <a href=\"https://github.com/evgmsk\" target=\"blanc\" referrerPolicy=\"no-referrer\">\r\n                        designed by evgmsk&nbsp;&nbsp;\r\n                        <img height=\"10px\" width=\"10px\" src={git} alt=\"github\"/>\r\n                    </a>\r\n                </footer>\r\n    }\r\n}\r\n\r\nexport default (connector(Footer))\r\n","import { IMessage } from '../app-interface'\r\nimport {AppActions, AppActionTypes} from './types'\r\n\r\nexport function addMessageToGameChat(payload: IMessage): AppActionTypes {\r\n    return {\r\n        type: AppActions.ADD_MESSAGE_TO_GAME_CHAT,\r\n        payload\r\n    } \r\n}\r\n\r\nexport function setPortrait(payload: boolean): AppActionTypes {\r\n    return {\r\n        type: AppActions.SET_PORTRAIT,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function close(payload: string): AppActionTypes {\r\n    return ({\r\n        type: AppActions.CLOSE, \r\n        payload\r\n    })\r\n}\r\n\r\nexport function startGame(payload: string): AppActionTypes {\r\n    return ({\r\n        type: AppActions.CLOSE,\r\n        payload\r\n    })\r\n}\r\n\r\nexport function setWindowSize(payload: {width: number, height: number}): AppActionTypes {\r\n    return {\r\n        type: AppActions.WINDOW_SIZE,\r\n        payload\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\n\r\nimport RouterComponent from './AppRoutes';\r\nimport { Header } from './page-components/Header';\r\nimport Footer from './page-components/Footer';\r\n\r\n\r\n\r\nimport './App.scss'\r\n\r\nconst App: React.FC  = () => {\r\n\r\n    return (\r\n        <Router> \r\n            <Header />\r\n                <RouterComponent />\r\n            <Footer />\r\n        </Router>   \r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {PieceColor, IGameState, IMoveOrder, IMoveProps, IBoardToGame, IPlayer, IGameMode} from '../app-interface'\r\nimport { GameActions, GameActions as GM, GameActionTypes} from \"./types\";\r\n\r\nexport const InitialGameState: IGameState = {\r\n    moveOrder: {pieceOrder: PieceColor.w, playerTurn: ''},\r\n    gameConfirmed: false,\r\n    gameStarted: false,\r\n    history: [],\r\n    playerColor: PieceColor.w,\r\n    white: {} as IPlayer,\r\n    black: {} as IPlayer,\r\n    rivalOfferedDraw: false,\r\n    ineffectiveMoves: 0,\r\n    gameMode: 'isPreparing'\r\n}\r\n\r\nexport function gameReducer(state: IGameState = InitialGameState, action: GameActionTypes): IGameState {\r\n    switch(action.type) {\r\n        case (GM.CLEAR_HISTORY): {\r\n            return {...state, history: []}\r\n        }\r\n        case(GM.SET_GAME_STARTED):\r\n            return {...state, gameStarted: action.payload as boolean}\r\n        case(GM.UPDATE_GAME_STATE):\r\n            return {...state, ...action.payload as IBoardToGame}  \r\n        case(GM.SAVE_MOVE_TO_HISTORY):\r\n            return {...state, history: state.history.concat(action.payload as unknown as string)}\r\n        case(GM.SET_MOVE_ORDER):\r\n            return {...state, moveOrder: action.payload as IMoveOrder}\r\n        case(GM.MAKE_MOVE): {\r\n            const {moveToSave, moveOrder} = action.payload as IMoveProps\r\n            const history = state.history.concat(moveToSave.move)\r\n            return {...state, moveOrder, history}\r\n        }\r\n        case(GameActions.CONFIRM_START_GAME):\r\n            return {...state, gameConfirmed: action.payload as boolean}\r\n        case(GM.SET_GAME):\r\n            return {...state,...action.payload as Partial<IGameState>}\r\n        case(GM.INEFFECTIVE_MOVE): {\r\n            return {...state, ineffectiveMoves: action.payload as number}\r\n        }\r\n        case(GM.RIVAL_OFFER_DRAW):\r\n            return {...state, rivalOfferedDraw: true}\r\n        case(GM.DECLINE_DRAW):\r\n            return {...state, rivalOfferedDraw: false}\r\n        case(GM.SET_GAME_MODE):\r\n            return {...state, gameMode: action.payload as IGameMode}\r\n        default:\r\n            return state \r\n    }\r\n}\r\n","import {GameOptionActions, GameOptionActionTypes} from './types'\r\nimport {\r\n    PieceColor,\r\n    IGameOptionState,\r\n    Timing,\r\n    RivalType,\r\n    GameVariants,\r\n    GameType,\r\n} from '../app-interface'\r\n\r\nexport const InitialGameOptionsState: IGameOptionState = {\r\n    gameVariant: 'towers',\r\n    timing: {timeToGame: 5, adds: 0},\r\n    playerColor: 'random',\r\n    rivalType: 'PC',\r\n    rivalLevel: 1,\r\n    gameSetupFinished: false,\r\n    waitingRival: false,\r\n    gameType: 'ranked'\r\n}\r\n\r\nexport function gameOptionsReducer(state = InitialGameOptionsState, action: GameOptionActionTypes): IGameOptionState {\r\n    switch(action.type) {\r\n        case GameOptionActions.SET_GAME_TYPE: {\r\n            return {...state, gameType: action.payload as GameType}\r\n        }    \r\n        case(GameOptionActions.CHOOSE_COLOR):\r\n            return {...state, playerColor: action.payload as PieceColor | 'random'}\r\n        case(GameOptionActions.SET_GAME_TIMING): {\r\n            return {...state, timing: action.payload as Timing}\r\n        }\r\n        case(GameOptionActions.SET_RIVAL_TYPE): {\r\n            return {...state, rivalType: action.payload as RivalType}\r\n        }\r\n        case(GameOptionActions.SET_RIVAL_LEVEL): {\r\n            return {...state, rivalLevel: action.payload as number}\r\n        }\r\n        case(GameOptionActions.FINISH_GAME_SETUP):\r\n            return {...state, gameSetupFinished: action.payload as boolean}\r\n        case GameOptionActions.WAIT_RIVAL:\r\n            return {...state, waitingRival: action.payload as boolean}\r\n        case GameOptionActions.SET_GAME_VARIANT:\r\n            return {...state, gameVariant: action.payload as GameVariants}\r\n        default: \r\n            return {...state}    \r\n    }\r\n}\r\n","import { IUser } from '../app-interface'\r\nimport {UserActionTypes, UserActions as UA} from './types'\r\n\r\nexport const InitialUserState: IUser = {\r\n    name: null as string | null,\r\n    userId: null as string | null,\r\n    token: null as string | null,\r\n    rating: 0,\r\n    language: navigator.language,\r\n}\r\n\r\nexport function userReducer(state = InitialUserState, action: UserActionTypes): IUser {\r\n    switch(action.type) {\r\n        case(UA.LOGIN_SUCCEED): {\r\n            return {...state, ...action.payload as IUser} \r\n        }\r\n        case UA.SET_PREFERABLE_LANGUAGE:\r\n            return {...state, language: action.payload as string}\r\n        case(UA.LOGOUT):\r\n            return {...state, ...InitialUserState}\r\n        case(UA.GET_USER_FROM_STORAGE): {\r\n            return {...state, ...action.payload as IUser}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { IApp, IMessage } from '../app-interface'\r\nimport {AppActions, AppActionTypes} from './types'\r\n\r\nexport const AppDefaultState: IApp = {\r\n    windowSize: {width: window?.innerWidth || 100, height: window?.innerHeight || 100},\r\n    portrait: (window?.innerWidth || 100) / (window?.innerHeight || 100) < 1.3,\r\n    commonChat: [] as IMessage[],\r\n    gameChat: [] as IMessage[],\r\n}\r\n\r\n\r\nexport function appReducer(state = AppDefaultState, action: AppActionTypes): IApp {\r\n    switch (action.type) {\r\n        case AppActions.WINDOW_SIZE:\r\n            return {...state, windowSize: action.payload as {width: number, height: number}}\r\n        case AppActions.SET_PORTRAIT:\r\n            return {...state, portrait: action.payload as boolean}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n ","import { IClock } from \"../app-interface\";\r\n\r\nexport const ClockActions = {\r\n    WHITE_TICK: 'WHITE_TICK',\r\n    BLACK_TICK: 'BLACK_TICK',\r\n    SET_WHITE_CLOCK: 'SET_WHITE_CLOCK',\r\n    SET_BLACK_CLOCK: 'SET_BLACK_CLOCK',\r\n    WHITE_PRESTART_TICK: 'WHITE_PRESTART_TICK',\r\n    BLACK_PRESTART_TICK: 'BLACK_PRESTART_TICK',\r\n    SET_CLOCK: 'SET_CLOCK'\r\n}\r\n\r\ninterface WhitePrestartTickAction {\r\n    type: typeof ClockActions.WHITE_PRESTART_TICK,\r\n    payload: number\r\n}\r\n\r\ninterface BlackPrestartTickAction {\r\n    type: typeof ClockActions.BLACK_PRESTART_TICK,\r\n    payload: number\r\n}\r\n\r\ninterface BlackTickAction {\r\n    type: typeof ClockActions.BLACK_TICK,\r\n    payload?: number\r\n}\r\n\r\ninterface WhiteTickAction {\r\n    type: typeof ClockActions.WHITE_TICK,\r\n    payload?: number\r\n}\r\n\r\n\r\ninterface SetWhiteClockAction {\r\n    type: typeof ClockActions.SET_WHITE_CLOCK,\r\n    payload: IClock\r\n}\r\n\r\ninterface SetBlackClockAction {\r\n    type: typeof ClockActions.SET_BLACK_CLOCK,\r\n    payload: IClock\r\n}\r\n\r\ninterface SetClockAction {\r\n    type: typeof ClockActions.SET_CLOCK,\r\n    payload: {whiteClock: IClock, blackClock: IClock}\r\n}\r\n\r\n\r\nexport type ClockActionTypes = WhitePrestartTickAction\r\n| BlackPrestartTickAction\r\n| SetWhiteClockAction\r\n| SetBlackClockAction\r\n| WhiteTickAction\r\n| BlackTickAction\r\n| SetClockAction\r\n","import { PrestartTimeLimit, DefaultTime } from \"../../constants/gameConstants\"\r\nimport {  IClock } from \"../app-interface\"\r\nimport { ClockActionTypes, ClockActions } from \"../clock/types\"\r\n\r\nexport interface IClockState  {whiteClock: IClock, blackClock: IClock}\r\n\r\nexport const InitialClockState: IClockState = {\r\n    whiteClock: {\r\n        timeToFirstMove: PrestartTimeLimit,\r\n        timeToGame: DefaultTime,\r\n        adds: 0\r\n    },\r\n    blackClock:{\r\n        timeToFirstMove: PrestartTimeLimit,\r\n        timeToGame: DefaultTime,\r\n        adds: 0\r\n    },\r\n}\r\n\r\nexport function clockReducer(state: IClockState = InitialClockState, action: ClockActionTypes): IClockState {\r\n    switch(action.type) {\r\n        case ClockActions.SET_BLACK_CLOCK: {\r\n            return {...state, blackClock: action.payload as IClock}\r\n        }\r\n        case ClockActions.SET_WHITE_CLOCK: {\r\n            return {...state, whiteClock: action.payload as IClock}\r\n        }\r\n        case(ClockActions.BLACK_PRESTART_TICK): {\r\n            const timeToFirstMove = state.blackClock.timeToFirstMove! - 1\r\n            return {...state, blackClock: {...state.blackClock, timeToFirstMove}}\r\n        }   \r\n        case(ClockActions.WHITE_PRESTART_TICK): {\r\n            const timeToFirstMove = state.whiteClock.timeToFirstMove! - 1\r\n            return {...state, whiteClock: {...state.whiteClock, timeToFirstMove}}\r\n        }\r\n        case(ClockActions.WHITE_TICK): {\r\n            const timeToGame = state.whiteClock.timeToGame - 1\r\n            return {...state, whiteClock: {...state.whiteClock, timeToGame}}\r\n        }   \r\n        case(ClockActions.BLACK_TICK): {\r\n            const timeToGame = state.blackClock.timeToGame - 1\r\n            return {...state, blackClock: {...state.blackClock, timeToGame}}\r\n        }\r\n        case ClockActions.SET_CLOCK: {\r\n            return {...state, ...action.payload as {whiteClock: IClock, blackClock: IClock}}\r\n        }\r\n        default:\r\n            return state \r\n    }\r\n}\r\n","import { IAnalysisState, IGameResult, PieceColor } from \"../app-interface\"\r\nimport { GameAnalysisActions, GameAnalysisTypes } from \"./types\"\r\n\r\nexport const InitialGameAnalysisState: IAnalysisState = {\r\n    gameResult: {} as IGameResult,\r\n    analyzeLastGame: false,\r\n    settingPosition: true,\r\n    movesMainLine: [],\r\n    pieceOrder: PieceColor.w,\r\n    movesCurrentLine: [],\r\n    lastMove: {} as {index: -1, move: ''},\r\n    depth: 5,\r\n    evaluate: false,\r\n    removePiece: false,\r\n    startPosition: false,\r\n}\r\n\r\n export function analyzeReducer(state = InitialGameAnalysisState, action: GameAnalysisTypes): IAnalysisState {\r\n    switch(action.type) {\r\n        case GameAnalysisActions.REMOVE_PIECE: {\r\n            return {...state, removePiece: action.payload as boolean}\r\n        }\r\n        case(GameAnalysisActions.SAVE_GAME_RESULT): {\r\n            const payload =  action.payload as IGameResult\r\n            return {...state, gameResult: payload, movesMainLine: payload.movesHistory || []}\r\n        }\r\n        case(GameAnalysisActions.SET_DEPTH): {        \r\n            return {...state, depth: action.payload as number}\r\n        }\r\n        case(GameAnalysisActions.EVALUATE_POSITION): {        \r\n            return {...state, evaluate: action.payload as boolean}\r\n        }\r\n        case(GameAnalysisActions.SETTING_BOARD): {        \r\n            return {...state, settingPosition: action.payload as boolean}\r\n        }\r\n        case(GameAnalysisActions.ANALYZE_LAST_GAME): {\r\n            if (action.payload) {\r\n                return {...state, analyzeLastGame: action.payload as boolean, settingPosition: false}\r\n            }    \r\n            return {...state, analyzeLastGame: action.payload as boolean}\r\n        }\r\n        case(GameAnalysisActions.DOWNLOAD_GAME): {        \r\n            return {...state, gameResult: action.payload as IGameResult}\r\n        }\r\n        case GameAnalysisActions.UPDATE_ANALYSIS_STATE: {\r\n            return {...state, ...action.payload as Partial<IAnalysisState>}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n} \r\n","import { BaseBoardSize, BaseCellSize} from \"../../constants/gameConstants\"\r\nimport { createStartBoard } from \"../../game-engine/prestart-help-function-constants\"\r\nimport { \r\n    IBoardAndTowers, \r\n    IBoardToGame,\r\n    TowerTouched \r\n} from \"../app-interface\"\r\nimport { BoardActions, BoardActionTypes } from \"./types\"\r\n\r\nexport const InitialBoardState: IBoardAndTowers = {\r\n    lastMoveSquares: [],\r\n    towerTouched: null as unknown as TowerTouched,\r\n    cellSize: BaseCellSize,\r\n    cellsMap: new Map(),\r\n    currentPosition: createStartBoard(BaseBoardSize),\r\n    towers: new Map(),\r\n    mandatoryMoves: [],\r\n    posibleMoves: new Map(),\r\n    mouseDown: false,\r\n    towerView: \"face\",\r\n    mandatoryMoveStep: 0,\r\n    animationStarted: false,\r\n    moveDone: false\r\n}\r\n\r\n export function boardReducer(state = InitialBoardState, action: BoardActionTypes) {\r\n    switch(action.type) {\r\n        case BoardActions.UPDATE_POSITION_TREE:\r\n            return {...state, positionsTree: action.payload as Map<string, IBoardToGame>}\r\n        case BoardActions.UPDATE_BOARD_STATE:\r\n            return {...state, ...action.payload as Partial<IBoardAndTowers>}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n","import { BaseBoardSize } from \"../../constants/gameConstants\"\r\nimport {  \r\n    BoardNotation, \r\n    IBoardOptions,\r\n} from \"../app-interface\"\r\nimport { BoardOptionActions, BoardOptionActionTypes } from \"./types\"\r\n\r\n\r\nexport const InitialBoardOptionsState: IBoardOptions = {\r\n    boardTheme: 'standart',\r\n    withOutLegend: false,\r\n    lengendsInside: false,\r\n    boardNotation: BoardNotation.r,\r\n    boardSize: BaseBoardSize,\r\n    reversedBoard: false,\r\n}\r\n\r\n export function boardOptionsReducer(state = InitialBoardOptionsState, action: BoardOptionActionTypes) {\r\n    switch(action.type) {\r\n        case BoardOptionActions.REVERSE_BOARD: {\r\n            return {...state, reversedBoard: action.payload as boolean}\r\n        }\r\n        case BoardOptionActions.SET_BOARD_NOTATION:\r\n            return {...state, boardNotation: action.payload as BoardNotation}\r\n        case BoardOptionActions.SET_BOARD_SIZE:\r\n            return {...state, boardSize: action.payload as number}\r\n        case BoardOptionActions.SET_BOARD_THEME:\r\n            return {...state, boardTheme: action.payload as string}\r\n        case BoardOptionActions.SET_GAME_BOARD_OPTIONS:\r\n            return {...state, ...action.payload as IBoardOptions}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n","import { IAnalysisState, IApp, IBoardAndTowers, IBoardOptions, IGameOptionState, IGameState, IUser } from './app-interface';\r\nimport {InitialGameState, gameReducer} from './game/reducers'\r\nimport {InitialGameOptionsState, gameOptionsReducer} from './gameOptions/reducers'\r\nimport {InitialUserState, userReducer} from './user/reducer'\r\nimport {GameActionTypes} from './game/types'\r\nimport {UserActionTypes} from './user/types'\r\nimport {GameOptionActionTypes} from './gameOptions/types'\r\nimport {appReducer, AppDefaultState} from './app/reducers'\r\nimport { AppActionTypes } from './app/types';\r\nimport { InitialClockState, clockReducer, IClockState } from './clock/reducers';\r\nimport {ClockActionTypes} from './clock/types'\r\nimport { analyzeReducer, InitialGameAnalysisState } from './gameAnalysis/reducers';\r\nimport { GameAnalysisTypes } from './gameAnalysis/types';\r\nimport { boardReducer, InitialBoardState } from './board/reducers';\r\nimport { BoardActionTypes } from './board/types';\r\nimport { boardOptionsReducer, InitialBoardOptionsState } from './boardOptions/reducers';\r\nimport { BoardOptionActionTypes } from './boardOptions/types';\r\n\r\nexport const InitialState: IRootState = {\r\n  user: InitialUserState,\r\n  game: InitialGameState,\r\n  gameOptions: InitialGameOptionsState,\r\n  app: AppDefaultState,\r\n  clock: InitialClockState,\r\n  analyze: InitialGameAnalysisState,\r\n  board: InitialBoardState,\r\n  boardOptions: InitialBoardOptionsState\r\n};\r\n\r\nexport interface IRootState {\r\n  app: IApp\r\n  user: IUser\r\n  game: IGameState\r\n  gameOptions: IGameOptionState\r\n  clock: IClockState\r\n  analyze: IAnalysisState\r\n  board: IBoardAndTowers\r\n  boardOptions: IBoardOptions\r\n}\r\n\r\nexport const AppReducers = {\r\n  game: gameReducer,\r\n  gameOptions: gameOptionsReducer,\r\n  user: userReducer,\r\n  app: appReducer,\r\n  clock: clockReducer,\r\n  analyze: analyzeReducer,\r\n  board: boardReducer,\r\n  boardOptions: boardOptionsReducer\r\n}; \r\n\r\nexport type AppActions = GameActionTypes \r\n  | GameOptionActionTypes \r\n  | UserActionTypes \r\n  | AppActionTypes \r\n  | ClockActionTypes\r\n  | GameAnalysisTypes\r\n  | BoardActionTypes\r\n  | BoardOptionActionTypes\r\n\r\nexport const getUser = (state: IRootState) => state.user\r\n\r\nexport const getGameOptions = (state: IRootState) => state.gameOptions\r\n\r\nexport const getGame = (state: IRootState) => state.game\r\n","import { put, takeLatest, select, delay } from 'redux-saga/effects';\r\nimport {\r\n    IGameResult,\r\n    PieceColor,\r\n    EndGameConditions,\r\n    IMoveProps,\r\n    IGameState,\r\n    IMoveOrder,\r\n    IPlayer,\r\n    IClock\r\n} from '../app-interface';\r\nimport {GameActions, GameActions as GM, GameActionTypes, GameActionTypes as GMA} from '../game/types'\r\nimport {ClockActions} from '../clock/types'\r\n// import {sendMessage} from '../../web-sockets/ws'\r\n// import { IRootState } from '../rootState&Reducer';\r\nimport { oppositColor } from '../../game-engine/gameplay-helper-fuctions';\r\n// import { Axios, setAuthorizationHeader } from '../../common/axios';\r\nimport { GameAnalysisActions } from '../gameAnalysis/types';\r\nimport {checkIfNumberOfKingsChanged} from '../../game-engine/gameplay-helper-fuctions'\r\nimport { InitialGameState } from '../game/reducers';\r\nimport { AnimationDuration } from '../../constants/gameConstants';\r\nimport { AppActions } from '../app/types';\r\nimport { BoardActions } from '../board/types';\r\nimport {GameOptionActions as GOA} from '../gameOptions/types'\r\nimport {BoardOptionActions as BOA} from '../boardOptions/types'\r\nimport mmr from '../../game-engine/mandatory-move-resolver'\r\nimport tur from '../../game-engine/update-towers-functions'\r\n\r\nfunction* workerNewGameVSPlayer(action: GMA) {\r\n    yield put({type: GOA.WAIT_RIVAL, payload: false})\r\n    const { \r\n        game: {gameMode},\r\n        boardOptions: {boardSize},\r\n        gameOptions: {gameVariant, timing, playerColor}\r\n    } = yield select()\r\n    if (gameMode === 'isPlaying') {\r\n        yield put({type: GameActions.SET_GAME, payload: InitialGameState})\r\n    }\r\n    let color: PieceColor = playerColor\r\n    if (playerColor === 'random') {\r\n        color = Math.random() < .5 ? PieceColor.w : PieceColor.b\r\n    }\r\n    const {timeToGame, adds, timeToFirstMove = 10} = timing\r\n    const black = {name: 'Black'}\r\n    const white = {name: \"White\"}\r\n    const clock: IClock = {\r\n        timeToGame: timeToGame * 60,\r\n        adds,\r\n        timeToFirstMove\r\n    }\r\n    yield put({type: BOA.REVERSE_BOARD, payload: color === PieceColor.b})\r\n    const gamePayload: Partial<IGameState> = {\r\n        moveOrder: {pieceOrder: PieceColor.w, playerTurn: 'White'},\r\n        black,\r\n        white,\r\n        gameStarted: true,\r\n        playerColor: color,\r\n        history: [],\r\n        gameConfirmed: true,\r\n        gameMode: 'isPreparing',\r\n        portrait: window.innerWidth / window.innerHeight < 1.3,\r\n        ineffectiveMoves: 0,\r\n    }\r\n    tur.setProps({GV: gameVariant, size: boardSize})\r\n    mmr.setProps({GV: gameVariant, size: boardSize})\r\n    yield put({type: BoardActions.CREATE_GAME_BOARD})\r\n    yield put({type: GM.SET_GAME, payload: gamePayload})\r\n    yield put({type: ClockActions.SET_CLOCK, payload: {blackClock: clock, whiteClock: clock}})\r\n    yield put({type: GOA.FINISH_GAME_SETUP, payload: true})\r\n    delay(AnimationDuration*3)\r\n    yield put({type: GM.SET_GAME_MODE, payload: 'isPlaying'})\r\n}\r\n\r\nfunction* workerNewGameVsPC() {\r\n    const {\r\n        gameOptions: {playerColor, rivalLevel = 1, gameVariant},\r\n        boardOptions: {boardSize},\r\n        user: {name, rating},\r\n        game: {gameMode}\r\n    } = yield select()\r\n    if (gameMode === 'isPlaying') {\r\n        yield put({type: GameActions.SET_GAME, payload: InitialGameState})\r\n    }\r\n    yield delay(30)\r\n    let color: PieceColor = playerColor\r\n    if (playerColor === 'random') {\r\n        color = Math.random() < .5 ? PieceColor.w : PieceColor.b\r\n    }\r\n    const rival = {name: `Bot ${rivalLevel}`}\r\n    const moveOrder: IMoveOrder = {\r\n        pieceOrder: PieceColor.w,\r\n        playerTurn: color === PieceColor.w ? name : rival.name\r\n    }\r\n    yield put({type: BOA.REVERSE_BOARD, payload: color === PieceColor.b})\r\n    const white = color === PieceColor.w ? {name, rating} : {name: rival.name} as IPlayer\r\n    const black = color === PieceColor.w ? {name: rival.name, rivalLevel} : {name, rating} as IPlayer\r\n    const gamePayload: Partial<IGameState> = {\r\n        moveOrder,\r\n        playerColor: color,\r\n        white,\r\n        black,\r\n        history: [],\r\n        gameConfirmed: true,\r\n        gameStarted: true,\r\n        gameMode: 'isPreparing',\r\n        portrait: window.innerWidth / window.innerHeight < 1.3,\r\n        ineffectiveMoves: 0\r\n    }\r\n    mmr.setProps({GV: gameVariant, size: boardSize})\r\n    tur.setProps({GV: gameVariant, size: boardSize})\r\n    yield put({type: BoardActions.CREATE_GAME_BOARD})\r\n    yield put({type: GM.SET_GAME, payload: gamePayload})\r\n    yield put({type: AppActions.SET_PORTRAIT, payload: window.innerWidth / window.innerHeight < 1.3,})\r\n    yield put({type: GOA.FINISH_GAME_SETUP, payload: true})\r\n    delay(AnimationDuration*3)\r\n    yield put({type: GM.SET_GAME_MODE, payload: 'isPlaying'})\r\n}\r\n\r\nfunction* checkDraw (payload: IMoveProps) {\r\n    const {gameOptions: {gameVariant}, board: {currentPosition}, game: {ineffectiveMoves}} = yield select()\r\n    const numberOfKingsChanged = checkIfNumberOfKingsChanged(currentPosition, payload.moveToSave.position)\r\n    if (payload.moveToSave.move.includes(':') || numberOfKingsChanged) {\r\n        yield put({type: GM.INEFFECTIVE_MOVE, payload: 0})\r\n    } else if ((gameVariant !== 'international' && ineffectiveMoves < 36) \r\n        || (gameVariant === 'international' && ineffectiveMoves < 50)) {\r\n        yield put({type: GM.INEFFECTIVE_MOVE, payload: ineffectiveMoves + 1})\r\n    } else {\r\n        yield put({type: GM.END_GAME, payload: 'drawByRules'})\r\n    }\r\n}\r\n\r\n// function* workerDrawOffer(action: GMA) {\r\n//     const {gameOptions: {rivalType}, game: {gameKey}} = yield select()\r\n//     // if (rivalType !== 'PC') sendMessage({message: 'game draw offered', payload: {gameKey}})\r\n// }\r\n\r\n// function* workerDrawRespond(action: GMA) {\r\n  \r\n//     yield put({type: GM.RIVAL_OFFER_DRAW, payload: false})\r\n//     // sendMessage({message: 'game draw rejected', payload: {gameKey}})\r\n// }\r\n\r\nfunction* workerPlayerClockAfterMove(payload: IMoveProps) {\r\n    const {\r\n        game: {gameConfirmed, history},\r\n        clock: {whiteClock, blackClock}\r\n    } = yield select()\r\n    if (gameConfirmed) {\r\n        if (payload.moveOrder.pieceOrder === PieceColor.w) {\r\n            const payload = {...blackClock, timeToGame: blackClock.timeToGame + blackClock.adds}\r\n            yield put({type: ClockActions.SET_BLACK_CLOCK, payload})\r\n            yield put({type: ClockActions.WHITE_TICK})\r\n        } else {\r\n            const payload = {...whiteClock, timeToGame: whiteClock.timeToGame + whiteClock.adds}\r\n            yield put({type: ClockActions.SET_WHITE_CLOCK, payload})\r\n            yield put({type: ClockActions.BLACK_TICK})\r\n        }\r\n    } else if (history.length > 1) {\r\n        yield put({type: GM.CONFIRM_START_GAME, payload: true})\r\n        if (payload.moveOrder.pieceOrder === PieceColor.w) {\r\n            yield put({type: ClockActions.WHITE_TICK})\r\n        } else {\r\n            yield put({type: ClockActions.BLACK_TICK})\r\n        }\r\n    } else {\r\n        if (payload.moveOrder.pieceOrder === PieceColor.b) {\r\n            yield put({type: ClockActions.BLACK_PRESTART_TICK})\r\n        } else { \r\n            yield put({type: ClockActions.WHITE_PRESTART_TICK})\r\n        }\r\n    }\r\n}\r\n\r\nfunction* workerMove(action: GMA) {\r\n    const {\r\n        game: {gameStarted},\r\n    } = yield select()\r\n    const payload: IMoveProps = action.payload as IMoveProps\r\n    if (!gameStarted) return\r\n    yield checkDraw(payload)\r\n    workerPlayerClockAfterMove(payload)\r\n}\r\n\r\nfunction* workerGameEnd(action: GMA) {\r\n    const {game: {moveOrder: {pieceOrder}, gameMode}, clock: {blackClock}} = yield select()\r\n    if (gameMode === 'isOver') return\r\n    const draw = action.payload === 'drawByAgreement' || action.payload === 'drawByRules'\r\n    let winner: PieceColor | 'draw'\r\n    if (action.payload === 'abandonedByWhite') {\r\n        winner = PieceColor.b\r\n    } else if (action.payload === 'abandonedByBlack') {\r\n        winner = PieceColor.w\r\n    } else if (action.payload === 'outOfTime') {\r\n        winner = !blackClock.timeToGame ? PieceColor.w : PieceColor.b\r\n    } else {\r\n        winner = draw ? 'draw' : oppositColor(pieceOrder)\r\n    }\r\n    yield resolveEndGame(winner, action.payload as EndGameConditions)\r\n}\r\n\r\nfunction* workerSurrender(action: GMA) {\r\n    const winner = oppositColor(action.payload as PieceColor)\r\n    yield resolveEndGame(winner, 'surrender')\r\n}\r\n\r\nfunction* resolveEndGame(winner: PieceColor | 'draw', reason: EndGameConditions) {\r\n    const { \r\n        game: {history, white, black, playerColor},\r\n    } = yield select(state => state)\r\n    const {\r\n        gameOptions: {gameVariant, timing: {timeToGame, adds}}, \r\n        boardOptions: {boardSize}\r\n    } = yield select()\r\n        // const token: string = yield select((state: IRootState) => state.user.token)\r\n        const PC = playerColor === PieceColor.w ? black.name : white.name\r\n        const gameResult: Partial<IGameResult> & {PC: string, playerColor: PieceColor} = {\r\n            winner,\r\n            reason,\r\n            timing: `${timeToGame}/${adds}`,\r\n            playerColor,\r\n            PC,\r\n            gameVariant,\r\n            movesHistory: history,\r\n            boardSize,\r\n            date: new Date()\r\n        }\r\n        yield put({type: GameAnalysisActions.SAVE_GAME_RESULT, payload: gameResult})\r\n        const analysisPayload = {\r\n            movesMainLine: history,\r\n            lastMove: {index: history.length - 1, move: history.slice(-1)[0]}\r\n        }\r\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: analysisPayload})\r\n        const game = {\r\n            ...InitialGameState, gameMode: 'isOver',\r\n        } as IGameState\r\n        yield put({type: GM.SET_GAME, payload: game})    \r\n}\r\n\r\nfunction* cancelGameWorker(action: GameActionTypes) {\r\n\r\n    yield put({type: GM.SET_GAME_STARTED, payload: false})\r\n    yield put({type: GM.SET_GAME_MODE, payload: 'isOver'})\r\n}\r\n\r\nexport default function* watcherGame() {\r\n    yield takeLatest(GM.END_GAME, workerGameEnd)\r\n    // yield takeLatest(GM.DECLINE_DRAW, workerDrawRespond)\r\n    // yield takeLatest(GM.OFFER_DRAW, workerDrawOffer)\r\n    yield takeLatest(GM.MAKE_MOVE, workerMove)\r\n    yield takeLatest(GM.SURRENDER, workerSurrender)\r\n    yield takeLatest(GM.CANCEL_GAME, cancelGameWorker)\r\n    yield takeLatest(GM.NEW_GAME_VS_PLAYER, workerNewGameVSPlayer)\r\n    yield takeLatest(GM.NEW_GAME_VS_PC, workerNewGameVsPC)\r\n}\r\n","import {put, takeLatest, select } from 'redux-saga/effects';\r\n\r\nimport {FindOpponentAction, SetGameVariantAction, GameOptionActions as GOA} from '../gameOptions/types'\r\n// import { BoardOptionActions as BOA } from '../boardOptions/types';\r\nimport {GameActions as GA} from '../game/types'\r\nimport { createEmptyBoard} from '../../game-engine/prestart-help-function-constants';\r\n// import { sendMessage } from '../../web-sockets/ws';\r\nimport { GameAnalysisActions } from '../gameAnalysis/types';\r\nimport { BoardOptionActions } from '../boardOptions/types';\r\n\r\n\r\n \r\nfunction* findRival(action: FindOpponentAction) {\r\n    const {gameOptions: {rivalType}} = yield select()\r\n    if (rivalType === 'PC') {\r\n        yield put({type: GA.NEW_GAME_VS_PC})\r\n    } else if (rivalType === 'player') {\r\n        console.log('player')\r\n        yield put({type: GA.NEW_GAME_VS_PLAYER})\r\n    }\r\n}\r\n\r\n// function* lookForRival() {\r\n//     const {\r\n//         boardOptions: {boardSize}, \r\n//         gameOptions: {\r\n//             playerColor,\r\n//             timing: {timeToGame, adds}, \r\n//             gameVariant\r\n//         },\r\n//         user: {\r\n//             rating\r\n//         }\r\n//     } = yield select()\r\n//     const payload = {boardSize, playerColor, timing: `${timeToGame}/${adds}`, gameVariant, rating}\r\n//     const message = \"rival\"\r\n//     try {\r\n//         console.log('send')\r\n//         // sendMessage({message, payload})\r\n//     } catch(e) {\r\n//         console.log(e)\r\n//         yield put({type: GOA.FINISH_GAME_SETUP, payload: false})\r\n//         yield put({type: GOA.WAIT_RIVAL, payload: false})\r\n//     }\r\n// }\r\n\r\n\r\n// function* cancelRival() {\r\n//     const {gameOptions: {gameVariant, timing}} = yield select()\r\n//     yield put({type: GOA.WAIT_RIVAL, payload: false})\r\n//     // const payload = {waitingListKey: `${gameVariant}${timing.timeToGame}/${timing.adds}`}\r\n//     // sendMessage({message: 'cancel rival', payload})\r\n// }\r\n\r\nfunction* workerGameVariant(action: SetGameVariantAction) {\r\n    if (action.payload === 'international') {\r\n        yield put({type: BoardOptionActions.SET_BOARD_SIZE, payload: 10})\r\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: {currentPosition: createEmptyBoard(10)}})\r\n    } else {\r\n        yield put({type: BoardOptionActions.SET_BOARD_SIZE, payload: 8})\r\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: {currentPosition: createEmptyBoard(8)}})\r\n    }\r\n}\r\n\r\nexport default function* watcherPreGame() {\r\n    yield takeLatest(GOA.FIND_RIVAL, findRival);\r\n    // yield takeLatest(GOA.CANCEL_RIVAL_WAITING, cancelRival)\r\n    yield takeLatest(GOA.SET_GAME_VARIANT, workerGameVariant)\r\n}\r\n","import { put, takeLatest, delay, select} from 'redux-saga/effects';\r\n\r\nimport { Interval} from '../../constants/gameConstants';\r\nimport { PieceColor } from '../app-interface';\r\nimport { ClockActions, ClockActionTypes } from '../clock/types';\r\nimport { GameActions, GameActionTypes} from '../game/types'\r\nimport { GameAnalysisActions } from '../gameAnalysis/types';\r\n\r\nfunction* workerGameClock() { \r\n    const {\r\n        game: {\r\n            gameStarted,\r\n            gameConfirmed,\r\n            moveOrder\r\n        },\r\n        clock: {\r\n            whiteClock,\r\n            blackClock,\r\n        }\r\n    } = yield select()\r\n    if (!gameConfirmed || !gameStarted) {\r\n        return\r\n    }\r\n    if (whiteClock.timeToGame <= 0 || blackClock.timeToGame <= 0) {\r\n        yield put ({type: GameActions.END_GAME, payload: 'outOfTime'})\r\n        return\r\n    }\r\n    yield delay(Interval)\r\n    if (moveOrder.pieceOrder === PieceColor.w) {\r\n        yield put({type: ClockActions.WHITE_TICK})\r\n    } else {\r\n        yield put({type: ClockActions.BLACK_TICK})\r\n    }  \r\n}\r\n\r\n\r\nfunction* workerStartClock(action: GameActionTypes) {\r\n    const {gameOptions: {rivalType}, game: {gameConfirmed}} = yield select()\r\n    if (action.payload === 'isPlaying' && rivalType !== 'PC') {\r\n        if (gameConfirmed) {\r\n            yield put({type: ClockActions.WHITE_TICK})\r\n        } else {\r\n            yield put({type: ClockActions.WHITE_PRESTART_TICK})\r\n        } \r\n    }\r\n}\r\n\r\nfunction* workerPreTicks(action: ClockActionTypes) {\r\n    const {\r\n        clock: {\r\n            blackClock,\r\n            whiteClock,\r\n        },\r\n        game: {\r\n            gameMode,\r\n            gameConfirmed,\r\n           \r\n        },\r\n    } = yield select()\r\n    if (gameMode !== 'isPlaying' || gameConfirmed) {\r\n        return\r\n    }\r\n    if (whiteClock.timeToFirstMove <= 0 || blackClock.timeToFirstMove <= 0) {\r\n        yield put({type: GameActions.CANCEL_GAME})\r\n        yield put({type: GameAnalysisActions.SAVE_GAME_RESULT, payload: {}})\r\n        return\r\n    }\r\n    yield delay(Interval)\r\n    const {game: {moveOrder: {pieceOrder}}} = yield select()\r\n    if (pieceOrder === PieceColor.b) {\r\n        yield put({type: ClockActions.BLACK_PRESTART_TICK})\r\n    } else {\r\n        yield put({type: ClockActions.WHITE_PRESTART_TICK})\r\n    } \r\n}\r\n\r\nexport default function* watcherTimer() {\r\n    yield takeLatest(GameActions.SET_GAME_MODE, workerStartClock)\r\n    yield takeLatest(ClockActions.WHITE_PRESTART_TICK, workerPreTicks)\r\n    yield takeLatest(ClockActions.BLACK_PRESTART_TICK, workerPreTicks)\r\n    yield takeLatest(ClockActions.BLACK_TICK, workerGameClock)\r\n    yield takeLatest(ClockActions.WHITE_TICK, workerGameClock)\r\n}\r\n","import { put, takeLatest, select, delay } from 'redux-saga/effects';\r\n\r\nimport { PieceColor, IMoveProps, IAnalysisState} from '../app-interface';\r\n\r\nimport { copyMap, oppositColor, splitMove } from '../../game-engine/gameplay-helper-fuctions';\r\n// import { Axios, setAuthorizationHeader } from '../../common/axios';\r\nimport { GameAnalysisActions, GameAnalysisTypes } from '../gameAnalysis/types';\r\nimport { createDefaultTowers, createEmptyBoard, createStartBoard} from '../../game-engine/prestart-help-function-constants';\r\nimport { InitialGameAnalysisState } from '../gameAnalysis/reducers';\r\nimport { IRootState } from '../rootState&Reducer';\r\nimport { BoardActions } from '../board/types';\r\nimport tur from '../../game-engine/update-towers-functions'\r\nimport { AnimationDuration } from '../../constants/gameConstants';\r\n\r\n// function* workerUploadGame(action: GameAnalysisTypes) {\r\n//     const token: string = yield select((state) => state.user.token)\r\n//     try {\r\n//         setAuthorizationHeader(token)\r\n//         const respond: {[key: string]: any} = yield call(Axios.post, '/api/game/upload', JSON.stringify(action.payload))\r\n//         console.log(respond.data as IGameResult)\r\n//     } catch(e) {\r\n//         console.log(e)\r\n//     }\r\n// }\r\n\r\nfunction* workerUpdatePosition(action: GameAnalysisTypes) {\r\n    const {analyze, board: {positionsTree}} = yield select()\r\n    const {\r\n        movesCurrentLine,\r\n        movesMainLine,\r\n        lastMove,\r\n    } = analyze as IAnalysisState\r\n    const {moveToSave: {move, position}} = action.payload as IMoveProps\r\n    let nextLastMove, nextPositionKey;\r\n    if (movesMainLine![lastMove.index] === lastMove.move && movesMainLine!.length === lastMove.index + 1) {\r\n        nextLastMove = {move, index: lastMove.index + 1}\r\n        nextPositionKey = `${movesMainLine?.join('_')}_${move}`\r\n        positionsTree!.set(nextPositionKey, position!)\r\n        yield put({\r\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE,\r\n            payload: {\r\n                ...analyze,\r\n                lastMove: nextLastMove,\r\n                positionsTree,\r\n                movesMainLine: movesMainLine?.push(move)\r\n            }\r\n        })\r\n    } else if (movesMainLine![lastMove.index] === lastMove.move && movesMainLine!.length > lastMove.index + 1) {\r\n        nextLastMove = {move, index: lastMove.index + 1}\r\n        nextPositionKey = `${movesMainLine?.join('_')}_${move}`\r\n        positionsTree!.set(nextPositionKey, position!)\r\n        const newCurrentLine = [...movesMainLine!.slice(0, lastMove.index + 1), lastMove.move]\r\n        yield put({\r\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \r\n            payload: {...analyze, lastMove: nextLastMove, movesCurrentLine: newCurrentLine}\r\n        })\r\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {positionsTree}})\r\n    } else if (movesCurrentLine!.slice(-1)[0] === lastMove.move) {\r\n        nextLastMove = {move, index: lastMove.index + 1}\r\n        nextPositionKey = `${movesCurrentLine?.join('_')}_${move}`\r\n        positionsTree!.set(nextPositionKey, position!)\r\n        yield put({\r\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \r\n            payload: {...analyze, lastMove: nextLastMove, movesCurrentLine: movesCurrentLine?.push(move)}\r\n        })\r\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {positionsTree}})\r\n    }\r\n}\r\n\r\nfunction* workerStepForward(action: GameAnalysisTypes) {\r\n    const {analyze, board: {positionsTree}} = yield select()\r\n    const {\r\n        movesCurrentLine,\r\n        movesMainLine,\r\n        lastMove,\r\n        pieceOrder\r\n    } = analyze as IAnalysisState\r\n    let nextLastMove, currentPosition;\r\n    if (lastMove.index < 0) {\r\n        const move = movesMainLine![0]\r\n        nextLastMove = {index: 0, move}\r\n        currentPosition = positionsTree?.get(move)\r\n    } else if (movesMainLine![lastMove.index] === lastMove.move \r\n        && lastMove.index < movesMainLine!.length - 1) {\r\n            nextLastMove = {move: movesMainLine![lastMove.index + 1], index: lastMove.index + 1}\r\n            currentPosition = positionsTree!.get(movesMainLine!.slice(0, nextLastMove.index + 1).join('_'))\r\n    } else if (movesCurrentLine![lastMove.index] === lastMove.move \r\n        && lastMove.index < movesCurrentLine!.length - 1) {\r\n            nextLastMove = {move: movesCurrentLine![lastMove.index + 1], index: lastMove.index + 1}\r\n            currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, nextLastMove.index + 1).join('_'))\r\n    }\r\n    yield put({\r\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \r\n        payload: {...analyze, lastMove: nextLastMove, pieceOrder: oppositColor(pieceOrder)}\r\n    })\r\n    yield put({\r\n        type: BoardActions.UPDATE_BOARD_STATE,\r\n        payload: {currentPosition}\r\n    })\r\n}\r\n\r\nfunction* workerGoToPosition(action: GameAnalysisTypes) {\r\n    // console.log(action)\r\n    const {analyze, boardOptions, board: {positionsTree, cellsMap, cellSize}} = yield select()\r\n    const {\r\n        movesCurrentLine,\r\n        movesMainLine,\r\n    } = analyze as IAnalysisState\r\n    const {index, move} = action.payload as {index: number, move: string}\r\n    let currentPosition, lastMove, pieceOrder\r\n    if (index < 0) {\r\n        currentPosition = createStartBoard(boardOptions.boardSize)\r\n    } else if (movesMainLine![index] === move) {\r\n        currentPosition = positionsTree!.get(movesMainLine!.slice(0, index + 1).join('_'))\r\n        console.log(positionsTree, movesMainLine!.slice(0, index + 1).join('_'), currentPosition)\r\n    } else if (movesCurrentLine![index] === move) {\r\n        currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, index + 1).join('_'))\r\n    }\r\n    let towers  = tur.updateTowersToBoard(currentPosition)\r\n    towers = tur.updateTowersPosition(cellSize, towers, cellsMap, boardOptions.reversedBoard)\r\n    pieceOrder = index % 2 ? PieceColor.w : PieceColor.b\r\n    lastMove = action.payload\r\n    const payload = { lastMove, pieceOrder}\r\n    yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload})\r\n    yield put({\r\n        type: BoardActions.UPDATE_BOARD_STATE,\r\n        payload: {currentPosition, towers}\r\n    })\r\n}\r\n\r\nfunction* workerPlayMoves(action: GameAnalysisTypes) {\r\n    \r\n    const {analyze, board: {positionsTree, cellSize, cellsMap}, boardOptions: {reversedBoard}} = yield select()\r\n    const {\r\n        movesCurrentLine,\r\n        movesMainLine,\r\n        lastMove,\r\n        pieceOrder,\r\n    } = analyze as IAnalysisState\r\n    let nextLastMove, currentPosition;\r\n    const nextIndex = lastMove.index + 1\r\n    if (lastMove.index < 0) {\r\n        nextLastMove = {move: movesMainLine![0], index: 0}\r\n        currentPosition = positionsTree!.get(movesMainLine![0])\r\n    } else if (movesMainLine![lastMove.index] === lastMove.move) {\r\n        nextLastMove = {move: movesMainLine![lastMove.index + 1], index: lastMove.index + 1}\r\n        currentPosition = positionsTree!.get(movesMainLine!.slice(0, nextLastMove.index + 1).join('_'))\r\n    } else if (movesCurrentLine![lastMove.index] === lastMove.move) {\r\n        nextLastMove = {move: movesCurrentLine![lastMove.index + 1], index: lastMove.index + 1}\r\n        currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, nextLastMove.index + 1).join('_'))\r\n    } else {\r\n        console.error(analyze, action)\r\n    }\r\n    \r\n    let towers = tur.updateTowersToBoard(currentPosition)\r\n    towers = tur.updateTowersPosition(cellSize, towers, cellsMap, reversedBoard)\r\n    const lastMoveSquares = splitMove((nextLastMove)!.move)\r\n    yield put({\r\n        type: BoardActions.UPDATE_BOARD_STATE,\r\n        payload: {currentPosition, towers, lastMoveSquares}\r\n    })\r\n    yield put({\r\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \r\n        payload: {\r\n            ...analyze,\r\n            lastMove: nextLastMove,\r\n            pieceOrder: oppositColor(pieceOrder),\r\n        }\r\n    })\r\n    if (nextIndex < movesMainLine!.length - 1 || nextIndex < movesCurrentLine!.length -1) {\r\n        yield delay(AnimationDuration)\r\n        yield put({type: GameAnalysisActions.PLAY_MOVES})\r\n    }\r\n}\r\n\r\nfunction* workerStepBack(action: GameAnalysisTypes) {\r\n    const {analyze, board: {positionsTree}} = yield select()\r\n    const {\r\n        movesCurrentLine,\r\n        movesMainLine,\r\n        lastMove,\r\n        pieceOrder\r\n    } = analyze as IAnalysisState\r\n    let nextLastMove, currentPosition;\r\n    if (lastMove.index < 0) return\r\n    if (movesMainLine![lastMove.index] === lastMove.move && lastMove.index > 0) {\r\n        nextLastMove = {move: movesMainLine![lastMove.index - 1], index: lastMove.index - 1}\r\n        currentPosition = positionsTree!.get(movesMainLine!.slice(0, nextLastMove.index + 1).join('_'))\r\n    } else if (movesCurrentLine![lastMove.index] === lastMove.move && lastMove.index > 0) {\r\n        nextLastMove = {move: movesCurrentLine![lastMove.index - 1], index: lastMove.index - 1}\r\n        currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, nextLastMove.index + 1).join('_'))\r\n    }\r\n    const lastMoveSquares = splitMove((nextLastMove)!.move)\r\n    yield put({\r\n        type: BoardActions.UPDATE_BOARD_STATE,\r\n        payload: {currentPosition, lastMoveSquares}\r\n    })\r\n    yield put({\r\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \r\n        payload: {\r\n            ...analyze,\r\n            lastMove: nextLastMove,\r\n            pieceOrder: oppositColor(pieceOrder),\r\n        }\r\n    })\r\n}\r\n\r\nfunction* workerSettingBoard(action: GameAnalysisTypes) {\r\n    const {boardOptions:{boardSize}} = yield select(state => state)\r\n    if (action.payload) {\r\n        const board = createEmptyBoard(boardSize)\r\n        yield put({\r\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \r\n            payload: {...InitialGameAnalysisState, board, currentPosition: board }\r\n        })\r\n    }\r\n}\r\n\r\nfunction* workerGameAnalysis(action: GameAnalysisTypes) {\r\n    const {analyze: {settingPosition}} = yield select(state => state)\r\n    if (settingPosition && action.payload) {\r\n        yield put({\r\n            type: GameAnalysisActions.SETTING_BOARD, \r\n            payload: false\r\n        })\r\n    }\r\n}\r\n\r\nfunction* workerCurrentLine(action: GameAnalysisTypes) {\r\n    const {\r\n        analyze:{\r\n            lastMove: {index},\r\n            movesCurrentLine,\r\n            pieceOrder,\r\n        },\r\n        board: {positionsTree}      \r\n    } = yield select()\r\n    const {moveToSave: {move, position}} = action.payload as IMoveProps\r\n    let payload: Partial<IAnalysisState> = {}\r\n    if (movesCurrentLine[index + 1] === move) {\r\n        yield put({\r\n            type: BoardActions.UPDATE_BOARD_STATE,\r\n            payload: {currentPosition: position}\r\n        })\r\n        payload = {\r\n            lastMove: {move, index: index + 1},\r\n            pieceOrder: oppositColor(pieceOrder),\r\n        }\r\n    } else {\r\n        const movesLine = [...movesCurrentLine.slice(0, index + 1), move]\r\n        const _positionsTree = copyMap(positionsTree!)\r\n        const newKey = movesLine.join('_')\r\n        _positionsTree.set(newKey, position)\r\n        yield put({\r\n            type: BoardActions.UPDATE_BOARD_STATE, \r\n            payload: {positionsTree: _positionsTree, currentPositoin: position}\r\n        })\r\n        payload = { \r\n            lastMove: {move, index: index + 1},\r\n            pieceOrder: oppositColor(pieceOrder),\r\n            movesCurrentLine: movesLine,\r\n        }\r\n    }\r\n    return payload\r\n}\r\n\r\nfunction* workerMainLine(action: GameAnalysisTypes) {\r\n    const {\r\n        analyze: {\r\n            lastMove: {index},\r\n            movesMainLine,\r\n            pieceOrder,\r\n        },\r\n        board: {positionsTree}\r\n    } = yield select()\r\n    const {moveToSave: {move, position}} = action.payload as IMoveProps\r\n    let payload: Partial<IAnalysisState> = {}\r\n    yield put({\r\n        type: BoardActions.UPDATE_BOARD_STATE,\r\n        payload: {currentPosition: position}\r\n    })\r\n    if (!movesMainLine.length) {\r\n        payload = {\r\n            lastMove: {move, index: 0},\r\n            pieceOrder: oppositColor(pieceOrder),\r\n            movesMainLine: [move]\r\n        }\r\n        const _positionsTree = copyMap(positionsTree!)\r\n        _positionsTree.set(move, position)\r\n        yield put({\r\n            type: BoardActions.UPDATE_BOARD_STATE,\r\n            payload: {positionsTree: _positionsTree, history: [move], currentPosition: position}\r\n        })\r\n    } else if (movesMainLine[index + 1] === move) {\r\n        payload = { \r\n            lastMove: {move, index: index + 1},\r\n            pieceOrder: oppositColor(pieceOrder),\r\n        }\r\n    } else {\r\n        const movesLine = movesMainLine.slice(0, index + 1).concat(move)\r\n        const _positionTree = copyMap(positionsTree!)\r\n        const newKey = movesLine.join('_')\r\n        _positionTree.set(newKey, position)\r\n        payload = {\r\n            lastMove: {move, index: index + 1},\r\n            pieceOrder: oppositColor(pieceOrder),\r\n            movesMainLine: [...movesMainLine, move]\r\n        }\r\n        yield put({\r\n            type: BoardActions.UPDATE_BOARD_STATE,\r\n            payload: {positionsTree: _positionTree, currentPosition: position, history: movesLine}\r\n        })\r\n    }\r\n    return payload\r\n}\r\n\r\nfunction* workerNewMove(action: GameAnalysisTypes) {\r\n    const {\r\n        lastMove: {move, index},\r\n        movesCurrentLine,\r\n    } = yield select((state: IRootState) => state.analyze)\r\n    let payload: Partial<IAnalysisState> = {}\r\n    if (movesCurrentLine.length && movesCurrentLine[index] === move) {\r\n        payload = yield workerCurrentLine(action)\r\n    } else {\r\n        payload = yield workerMainLine(action)\r\n    } \r\n    if (payload.lastMove) {\r\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload})\r\n    }\r\n}\r\n\r\nfunction* workerStartPosition(action: GameAnalysisTypes) {\r\n    const {\r\n        boardOptions: {boardSize},\r\n        board: {positionsTree}\r\n    } = yield select((state: IRootState) => state)\r\n    yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: {startPosition: false}})\r\n    const currentPosition = createStartBoard(boardSize)\r\n    positionsTree.clear()\r\n    positionsTree.set('sp', currentPosition)\r\n    const towers = createDefaultTowers(boardSize)\r\n    yield put ({type: BoardActions.UPDATE_BOARD_STATE, paylaod: {currentPosition, positionsTree, towers}})\r\n    const payload: Partial<IAnalysisState> = {\r\n        ...InitialGameAnalysisState,\r\n        startPosition: true,\r\n    }\r\n    yield delay(100)\r\n    yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload})\r\n}\r\n\r\nexport default function* watcherAnalysis() {    \r\n    yield takeLatest(GameAnalysisActions.STEP_BACK, workerStepBack)\r\n    yield takeLatest(GameAnalysisActions.STEP_FORWARD, workerStepForward)\r\n    yield takeLatest(GameAnalysisActions.GO_TO_POSITION, workerGoToPosition)\r\n    yield takeLatest(GameAnalysisActions.UPDATE_POSITION, workerUpdatePosition)\r\n    // yield takeLatest(GameAnalysisActions.DOWNLOAD_GAME, workerUploadGame)\r\n    yield takeLatest(GameAnalysisActions.PLAY_MOVES, workerPlayMoves)\r\n    yield takeLatest(GameAnalysisActions.SETTING_BOARD, workerSettingBoard)\r\n    yield takeLatest(GameAnalysisActions.ANALYZE_LAST_GAME, workerGameAnalysis)\r\n    yield takeLatest(GameAnalysisActions.MAKE_NEW_MOVE, workerNewMove)\r\n    yield takeLatest(GameAnalysisActions.SET_START_POSITION, workerStartPosition)\r\n}\r\n ","import { put, takeLatest, select, delay } from 'redux-saga/effects';\r\n\r\nimport {BoardActionTypes, BoardActions as BA, BoardActions} from '../board/types'\r\nimport { GameVariants, IGameBoard, IGameState, IMoveProps, TowerConstructor } from '../app-interface';\r\nimport { \r\n    createEmptyBoardForCustomPosition,\r\n    createStartBoardToDraw,\r\n    createAnalysisBoard,\r\n    oppositColor\r\n} from '../../game-engine/prestart-help-function-constants';\r\nimport { GameOptionActions,  GameOptionActionTypes} from '../gameOptions/types';\r\nimport tur from '../../game-engine/update-towers-functions'\r\nimport { GameActions } from '../game/types';\r\nimport { IRootState } from '../rootState&Reducer';\r\nimport { copyMap, splitMove } from '../../game-engine/gameplay-helper-fuctions';\r\nimport { AnimationDuration } from '../../constants/gameConstants';\r\n\r\n \r\nfunction* workerGameBoard(action: BoardActionTypes) {\r\n    const {boardOptions} = yield select()\r\n    const payload = createStartBoardToDraw({boardOptions})\r\n    yield put({type: BA.UPDATE_BOARD_STATE, payload})\r\n}\r\n\r\nfunction* workerSetupBoard() {\r\n    const {boardOptions} = yield select()\r\n    const payload = createEmptyBoardForCustomPosition({boardOptions})\r\n    yield put({type: BA.UPDATE_BOARD_STATE, payload})\r\n}\r\n\r\nfunction* workerBoardSize(action: GameOptionActionTypes) {\r\n    const {boardOptions} = yield select()\r\n    const boardSize = action.payload as GameVariants === 'international' ? 10 : 8\r\n    if (boardOptions.boardSize !== boardSize) {\r\n        yield put({type: BA.UPDATE_BOARD_SIZE, payload: boardSize})\r\n    }\r\n}\r\n\r\nfunction* workerAnalysisBoard(action: BoardActionTypes) {\r\n    const {boardOptions} = yield select()\r\n    const payload = {\r\n        ...createAnalysisBoard({boardOptions}),\r\n    }\r\n    yield put({type: BA.UPDATE_BOARD_STATE, payload})\r\n}\r\n\r\nfunction* animateFreeMove(move: IMoveProps) {\r\n    const {board, boardOptions: {reversedBoard}} = yield select()\r\n    const {moveToSave} = move as IMoveProps\r\n    const [from, to] = moveToSave.move.split('-')\r\n    tur.relocateTower(from, to, board, reversedBoard)\r\n    yield delay(AnimationDuration)\r\n    const newState: IRootState = yield select()\r\n    tur.finalizeSimpleMove(from, to, newState.board, reversedBoard)\r\n}\r\n\r\nfunction* animateMandatoryTowerStep(props: Partial<IMoveProps>, step = 0) {\r\n    const {gameOptions: { reversedBoard}, board} = yield select()\r\n    const {moveToSave: {move, position, takenPieces}} = props as IMoveProps\r\n    const [from, to] = move.split(':').slice(step)\r\n    const totalSteps = takenPieces!.length \r\n    const capturedTowerKey = takenPieces![step]\r\n        let tower = position[capturedTowerKey].tower as TowerConstructor\r\n        tur.relocateTower(from, to, board, reversedBoard)\r\n        yield delay(AnimationDuration / totalSteps / 2)\r\n        let state: IRootState = yield select()\r\n        let towers = copyMap(state.board.towers)\r\n        if (tower) {\r\n            tower =  new TowerConstructor(tower)\r\n            tower.onBoardPosition = capturedTowerKey\r\n            tower.positionInDOM = tur.calcTowerPosition(capturedTowerKey, board.cellsMap, board.cellSize, reversedBoard)\r\n            towers.set(capturedTowerKey, tower)\r\n        } else {\r\n            towers.delete(capturedTowerKey)\r\n        }\r\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\r\n        yield delay(AnimationDuration / totalSteps / 2)\r\n        state = yield select()\r\n        towers = tur.finalizeMandatoryMoveStep(from, to, state.board, reversedBoard)\r\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\r\n}\r\n\r\nfunction* animateMandatoryStep(props: Partial<IMoveProps>, step = 0) {\r\n    const {gameOptions: {gameVariant, reversedBoard}, board} = yield select()\r\n    if (gameVariant === 'towers') {\r\n        yield animateMandatoryTowerStep(props, step)\r\n    } else {\r\n        const {moveToSave: {move, takenPieces}} = props as IMoveProps\r\n        const [from, to] = move.split(':').slice(step)\r\n        const totalSteps = takenPieces!.length \r\n        const isLast = totalSteps === step + 1\r\n        tur.relocateTower(from, to, board, reversedBoard)\r\n        yield delay(AnimationDuration / totalSteps)\r\n        let state: IRootState = yield select()\r\n        const towers = tur.finalizeMandatoryMoveStep(from, to, state.board, reversedBoard, isLast)\r\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\r\n        if (isLast) {\r\n            state = yield select()\r\n            const towers = copyMap(state.board.towers)\r\n            takenPieces!.forEach(pKey => {\r\n                towers.delete(pKey)\r\n            })\r\n            yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\r\n        }\r\n    }\r\n}\r\n\r\nfunction* animateMandatoryMove(props: Partial<IMoveProps>, step = 0): any {\r\n    const {moveToSave: {takenPieces}} = props as IMoveProps\r\n    if (takenPieces?.length === 1 || takenPieces?.length === step + 1) {\r\n        yield animateMandatoryStep(props, step) \r\n    } else {\r\n        yield animateMandatoryStep(props, step)\r\n        yield animateMandatoryMove(props, step + 1)\r\n    }\r\n}\r\n\r\nfunction* workerTurn(action: BoardActionTypes) {\r\n    const payload = action.payload as IMoveProps\r\n    const {game: {history}, user: {name}, board} = yield select()\r\n    const {moveToSave: {move, position}, moveOrder} = payload\r\n    const key = history.length ? `${history.join('_')}_${move}` : move\r\n    const positionsTree = copyMap(board.positionsTree)\r\n    positionsTree.set(key, position)\r\n    let lastMoveSquares = board.lastMoveSquares\r\n    if (moveOrder.playerTurn === name) {\r\n        if (move.includes(':')) {\r\n            lastMoveSquares = move.split(':')\r\n            yield animateMandatoryMove(payload)\r\n        } else {\r\n            lastMoveSquares = move.split('-')\r\n            yield animateFreeMove(payload)\r\n        }\r\n    }\r\n    const boardProps = {currentPosition: position, positionsTree, lastMoveSquares}\r\n    yield put ({type: BoardActions.UPDATE_BOARD_STATE, payload: boardProps})\r\n    yield put({type: GameActions.MAKE_MOVE, payload})\r\n}\r\n\r\nfunction* workerUndo() {\r\n    const {\r\n        board: {positionsTree, cellSize, cellsMap},\r\n        game: {history, moveOrder: {pieceOrder}, playerColor},\r\n        user: {name},\r\n        boardOptions: {reversedBoard}\r\n    } = yield select()\r\n    if (!history.length) return\r\n    let gamePayload: Partial<IGameState>, boardPayload: Partial<IGameBoard>\r\n    if (pieceOrder === playerColor) {\r\n        gamePayload = {\r\n            history: history.slice(0, -2)\r\n        }\r\n        const currentPosition = positionsTree.get(gamePayload.history!.join('_'))\r\n        const _towers = tur.updateTowersToBoard(currentPosition)\r\n        const towers = tur.updateTowersPosition(cellSize, _towers, cellsMap, reversedBoard)\r\n        boardPayload = {\r\n            lastMoveSquares: splitMove(gamePayload.history?.slice(-1)[0] || ''),\r\n            currentPosition,\r\n            towers,\r\n            animationStarted: false,\r\n        }\r\n    } else {\r\n        gamePayload = {\r\n            history: history.slice(0, -1),\r\n            moveOrder: {pieceOrder: oppositColor(pieceOrder), playerTurn: name}\r\n        }\r\n        const currentPosition = positionsTree.get(gamePayload.history!.join('_'))\r\n        const _towers = tur.updateTowersToBoard(currentPosition)\r\n        const towers = tur.updateTowersPosition(cellSize, _towers, cellsMap, reversedBoard)\r\n        boardPayload = {\r\n            lastMoveSquares: splitMove(gamePayload.history?.slice(-1)[0] || ''),\r\n            currentPosition: positionsTree.get(gamePayload.history!.join('_')),\r\n            towers,\r\n            animationStarted: false,\r\n        }\r\n    }\r\n    yield put({type: GameActions.UPDATE_GAME_STATE, payload: gamePayload})\r\n    yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: boardPayload})\r\n}\r\n\r\nexport default function* watcherBoard() {\r\n    yield takeLatest(BA.CREATE_SETUP_BOARD, workerSetupBoard);\r\n    yield takeLatest(BA.CREATE_GAME_BOARD, workerGameBoard)\r\n    yield takeLatest(BA.CREATE_ANALYSIS_BOARD, workerAnalysisBoard)\r\n    yield takeLatest(GameOptionActions.SET_GAME_VARIANT, workerBoardSize)\r\n    yield takeLatest(BoardActions.TURN, workerTurn)\r\n    yield takeLatest(BoardActions.UNDO_LAST_MOVE, workerUndo)\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport watcherGame from './watcherGame';\r\n// import watcherUser from './watcherUser';\r\nimport watcherPreGame from './watcherGamePresets';\r\nimport watcherTimer from './watcherTimer';\r\n// import watcherApp from './watcherApp';\r\nimport watcherAnalsis from './watcherGameAnalysis'\r\nimport watcherBoard from './watcherBoard';\r\n\r\nexport default function* sagaRoot() {\r\n    yield all([\r\n        watcherPreGame(),\r\n        // watcherUser(),\r\n        watcherGame(),\r\n        watcherTimer(),\r\n        // watcherApp(),\r\n        watcherAnalsis(),\r\n        watcherBoard(),\r\n    ]);\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport {InitialState, AppReducers} from './rootState&Reducer';\r\nimport sagaRoot from './sagas/sagaRoot';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst storeFactory = (data = InitialState) => {\r\n    const middleware = composeWithDevTools(applyMiddleware(sagaMiddleware));\r\n    const rootReducer = combineReducers(AppReducers)\r\n    const store = createStore(rootReducer, data, middleware)\r\n    sagaMiddleware.run(sagaRoot);\r\n    return store;\r\n};\r\n\r\nexport default storeFactory;\r\n\r\nexport type Store = ReturnType<typeof storeFactory>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux'\r\nimport storeFactory from './store'\r\nimport {InitialState} from './store/rootState&Reducer'\r\nimport { UserActions } from './store/user/types';\r\n// import {GameActions} from './store/game/types';\r\n// import {wsOnError, wsOnMessage} from './web-sockets/ws'\r\n// import {errorHandler} from './web-sockets/event-handlers/ws-error-handler'\r\n// import {messageHandler} from './web-sockets/event-handlers/ws-message-handler'\r\n\r\nimport './assets/scss/style.scss'\r\nimport { AppActions } from './store/app/types';\r\n\r\n\r\nconst store = storeFactory(InitialState)\r\n\r\n// wsOnError(errorHandler, store)\r\n\r\n// wsOnMessage(messageHandler, store)\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root') \r\n);\r\n\r\nstore.dispatch({type: UserActions.CHECK_STORAGE})\r\n\r\nif (window) {\r\n  const payload = window.innerWidth / window.innerHeight < 1.3\r\n  store.dispatch({type: AppActions.SET_PORTRAIT, payload})\r\n}\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}