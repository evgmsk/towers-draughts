{"version":3,"sources":["game-engine/CientEngine.tsx","pages/game/GameBoard.tsx","pages/game/presetGameForm/PresetGameForm.tsx","game-components/PlayerTimer.tsx","common/helpers/time-to-string.ts","page-components/spinners/WatingRival.tsx","pages/game/gameEndPopup/GameEndPopup.tsx","game-engine/js-engine/gameplay-helper-fuctions.js","pages/game/PlayerGameMenu.tsx","pages/game/GameInfo.tsx","pages/game/GamePage.tsx"],"names":["mapDispatch","turn","endGame","updateIneffectiveMoves","surrender","ClientBotEngine","connect","state","currentPosition","board","engineColor","oppositColor","game","playerColor","white","black","dificulty","gameOptions","rivalLevel","timeToGame","timing","time","PieceColor","w","clock","blackClock","whiteClock","gameVariant","moveOrder","movesHistory","history","gameMode","botConnector","maxDepth","getSeekerProps","bestMoveCB","getMoveCB","props","evaluationStarted","setMaxDeep","deep","move","compleateMove","passProps","engineMove","pieceOrder","console","log","this","prev","prevState","bms","resetProps","cP","setTimeout","setActualMovesBranchAfterMove","AnimationDuration","length","startEvaluation","oldOrder","mmr","getNewOrder","includes","takenPieces","getCapturedTowers","split","moveToSave","React","Component","updateBoardState","finishGameSetup","GameBoard","name","user","positionsTree","windowSize","app","boardOptions","gameConnector","boardRef","createRef","makePremoveAction","opponentMove","mandatoryMoves","lookForMandatoryMoves","lookForAllPosibleMoves","mandatoryMoveStep","mouseDown","moveDone","makePlayerMandatoryMoveStep","to","towerTouched","from","key","fitMoves","filter","m","moveProps","tP","towers","tur","updateTowersOnMandatoryMoveStep","lastMoveSquares","position","slice","handleMouseUp","event","cellSize","reversed","reversedBoard","type","changedTouches","clientX","clientY","checkMoveTargetCell","x","y","posibleMoves","cancelProps","finalizeSimpleMove","getPropsToMakeFreeMove","cancelTowerTransition","handleMouseMove","SCP","startCursorPosition","STP","startTowerPosition","copyMap","tower","get","newPosition","positionInDOM","Math","abs","set","handleMouseDown","cellsMap","target","classList","contains","towerKey","getAttribute","possibleOutOfMandatory","currentType","TowerType","manTowerFreeMoves","kingTowerFreeMoves","size","towerColor","currentColor","towerType","error","modeRestrictions","playerTurn","animationStarted","window","setCalBack","updateTowersToBoard","_board","updateCellsPosition","current","prevProps","JSON","stringify","compareMaps","rivalType","histLength","BoardProps","lastMove","mandatoryTowers","map","boardSize","boardTheme","WrapperClass","Towers","Array","values","i","mt","onBoardPosition","mandatory","onMouseMove","onMouseUp","onMouseDown","onTouchStart","onTouchMove","onTouchEnd","className","ref","Board","gameMapDispatch","setGameType","timingMapDispatch","language","gameType","gameTypeConnector","buttonClass","value","buttonTitle","onClick","e","preventDefault","title","setTiming","TimingComponent","timingConnector","adds","parseInt","StandartTiming","t","Class","join","levelMapDispatch","setRivalLevel","LevelComponent","level","levelConnector","gameVariantMapDispatch","setGameVariant","GameVariantComponent","gv","gameVariantConnector","defaultValue","onChange","colorMapDispatch","setPlayerColor","colorConnector","color","rivalTypeMapDispatch","setOpponentType","OpponentTypeSelectorC","rivalTypeConnector","customTimingMapDispatch","customTimingConnector","CustomTimingPreset","handleClick","open","setState","handleChange","limit","handleBlur","ST","onBlur","min","step","max","ColorPreset","b","CustomTiming","findRival","PresetGame","waitingRival","presetGameConnector","i18n","I18n","newGame","PlayerTimer","useSelector","timeOf","gameConfirmed","pcGame","timeToFirstMove","useState","sec","strTime","setStrTime","useEffect","floor","toString","timeToString","spinnerDispatchMap","cancelRivalWaiting","connector","Timer","interval","timer","setInterval","s","clearInterval","dispatchMap","requestRematch","analyzeLastGame","setGameMode","connestor","gameResult","analyze","gameOver","message","reason","winner","useHistory","win","notAbandonByPlayer","startsWith","popupHTML","containClass","cl","push","gameMenuMapDispatch","declineDraw","offerDraw","cancelGame","confirmStartGame","undoLastMove","GameMenu","drawOffered","rivalOfferedDraw","historyLength","gameMenuConnector","handleAnalizeGame","undoClass","role","PlayerInfo","onlineStatus","rating","VSComputer","Color","toUpperCase","substring","gt","ot","ti","VSCompouter","PlayerGameBarMapDispatch","PlayerGameBarComponent","PlayerGameBarConnector","children","RivalGameBarComponent","RivalBarConnector","GPConnector","gameSetupFinished","portrait","GamePage","GameBoardWithBars","side","MovesHistory","fallback","Spinner"],"mappings":"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","file":"static/js/4.7fde2d89.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport { endGame, updateIneffectiveMoves, surrender} from '../store/game/actions'\r\nimport { IBoardToGame, PieceColor} from \"../store/app-interface\";\r\nimport { oppositColor } from './gameplay-helper-fuctions'; \r\nimport { IRootState } from '../store/rootState&Reducer';\r\nimport  mmr from './mandatory-move-resolver';\r\nimport bms from './position-evaluator'\r\n\r\nimport { turn } from '../store/board/actions';\r\nimport { AnimationDuration } from '../constants/gameConstants';\r\nimport { ISeekerProps } from './engine-interfaces';\r\n\r\ninterface IBestMove {move: string, deep: number}\r\n\r\n\r\nconst mapState = (state: IRootState) => ({\r\n        currentPosition: state.board.currentPosition,\r\n        engineColor: oppositColor(state.game.playerColor),\r\n        white: state.game.white,\r\n        black: state.game.black,\r\n        dificulty: state.gameOptions.rivalLevel,\r\n        timeToGame: state.gameOptions.timing.timeToGame,\r\n        time: state.game.playerColor === PieceColor.w \r\n            ? state.clock.blackClock.timeToGame \r\n            : state.clock.whiteClock.timeToGame,\r\n        gameVariant: state.gameOptions.gameVariant,\r\n        moveOrder: state.game.moveOrder,\r\n        movesHistory: state.game.history,\r\n        gameMode: state.game.gameMode,\r\n    })\r\n\r\nconst mapDispatch = {\r\n    turn, endGame, updateIneffectiveMoves, surrender\r\n}\r\n\r\nconst botConnector = connect(mapState, mapDispatch)\r\n\r\ntype BotProps = ConnectedProps<typeof botConnector>\r\n\r\nclass ClientEngine extends React.Component<BotProps, IBestMove> {\r\n    maxDepth = 6\r\n    componentDidMount() {\r\n        console.log('created', this.props)\r\n    }\r\n\r\n    componentDidUpdate(prev: BotProps, prevState: IBestMove) {\r\n        const {moveOrder, movesHistory, currentPosition, gameMode, engineColor} = this.props\r\n        if (gameMode === 'isPlaying' && prev.gameMode !== 'isPlaying') {\r\n            console.log('new game', this.props, bms.evaluationStarted)         \r\n            const engineMove = moveOrder.pieceOrder === engineColor\r\n            bms.resetProps(this.getSeekerProps())\r\n            if (engineMove) {\r\n                const props = {history: movesHistory, cP: currentPosition}\r\n                setTimeout(() => bms.setActualMovesBranchAfterMove(props), AnimationDuration)\r\n            }\r\n        }\r\n        if (moveOrder.pieceOrder !== engineColor) return        \r\n        if (prev.movesHistory.length !== movesHistory.length) {\r\n            if (moveOrder.pieceOrder === engineColor) {\r\n                console.log('start engine', this.props)\r\n                if (this.props.gameMode === 'isPlaying') {\r\n                    const props = {history: movesHistory, cP: currentPosition}\r\n                    bms.setActualMovesBranchAfterMove(props)\r\n                }\r\n            } else {\r\n                console.log('stop engine', this.props)\r\n                bms.startEvaluation(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    getSeekerProps = (): ISeekerProps => {\r\n        return {\r\n            bestMoveCB: this.getMoveCB,\r\n            maxDepth: this.maxDepth,\r\n            engineColor: this.props.engineColor,\r\n            evaluationStarted: true,\r\n            game: true\r\n        }\r\n    }\r\n\r\n    setMaxDeep = (deep: number) => {\r\n        this.maxDepth = deep\r\n    }\r\n\r\n    getMoveCB = (move: {move: string, position: IBoardToGame, takenPices?: string[]}) => {\r\n        const {surrender, endGame, engineColor, gameMode} = this.props\r\n        if (move.move === 'surrender') {\r\n            surrender(engineColor)\r\n        } else if (!move.move) {\r\n            endGame('noMoves')\r\n        } else if (!!move && gameMode === 'isPlaying') {\r\n            this.compleateMove(move)\r\n        } \r\n    }\r\n\r\n    passProps = () => {\r\n        return {\r\n            history: this.props.movesHistory,\r\n            currentPosition: this.props.currentPosition,\r\n            engineMove: this.props.moveOrder.pieceOrder === this.props.engineColor\r\n        }\r\n    }\r\n\r\n    compleateMove(move:{move: string, position: IBoardToGame, takenPices?: string[]}) {\r\n        const {moveOrder: oldOrder, turn, white, black, currentPosition} = this.props\r\n        const moveOrder = mmr.getNewOrder({moveOrder: oldOrder, white, black})\r\n        // console.log('old oreder', moveOrder, 'new order', nMoveOrder, currentPosition)\r\n        if (move.move.includes(':')) {\r\n            const takenPieces = mmr.getCapturedTowers(move.move.split(':'), currentPosition)\r\n            const moveToSave = {...move, takenPieces}\r\n            turn({moveToSave, moveOrder: moveOrder})\r\n        } else {\r\n            turn({moveToSave: move, moveOrder: moveOrder})\r\n        }        \r\n    }\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nexport const ClientBotEngine = botConnector(ClientEngine)\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\n\r\nimport { \r\n    TowerConstructor,\r\n    TowerType,\r\n    IRef,\r\n    TowerTouched,\r\n    CellsMap,\r\n    TowersMap,\r\n    IBoardProps,\r\n    IGameBoard,\r\n    IMMRResult,\r\n} from '../../store/app-interface'\r\nimport { endGame, updateIneffectiveMoves } from '../../store/game/actions'\r\nimport {\r\n    checkMoveTargetCell,\r\n    possibleOutOfMandatory,\r\n    compareMaps,\r\n    copyMap,\r\n} from '../../game-engine/gameplay-helper-fuctions'\r\nimport { IRootState } from '../../store/rootState&Reducer'\r\nimport {AnimationDuration} from '../../constants/gameConstants'\r\nimport tur from '../../game-engine/update-towers-functions'\r\nimport mmr from '../../game-engine/mandatory-move-resolver'\r\nimport  TowerComponent from '../../game-components/tower/CheckerTower'\r\nimport { ClientBotEngine } from '../../game-engine/CientEngine'\r\nimport { Board } from '../../game-components/board/Board'\r\nimport { turn, updateBoardState } from '../../store/board/actions'\r\nimport {finishGameSetup} from '../../store/gameOptions/actions'\r\n\r\n\r\nconst mapState = (state: IRootState) => ({\r\n    gameOptions: state.gameOptions,\r\n    game: state.game,\r\n    name: state.user.name,\r\n    positionsTree: state.board.positionsTree,\r\n    windowSize: state.app.windowSize,\r\n    board: state.board,\r\n    boardOptions: state.boardOptions,\r\n})\r\n\r\nconst mapDispatch = {endGame, turn, updateIneffectiveMoves, updateBoardState, finishGameSetup}\r\n\r\nconst gameConnector = connect(mapState, mapDispatch)\r\ntype GameProps = ConnectedProps<typeof gameConnector>\r\n\r\nexport class GameClass extends React.Component<GameProps, IGameBoard> {\r\n    private boardRef: IRef<HTMLDivElement> = React.createRef();\r\n    componentDidMount() {\r\n        if (!window) return\r\n        const {game: {history}, board, boardOptions, updateBoardState} = this.props\r\n        console.log('created with state:', this.props.board)\r\n        tur.setCalBack(updateBoardState)\r\n        if (history.length) {\r\n            const towers = tur.updateTowersToBoard(board.currentPosition) as TowersMap\r\n            const _board = {...board, towers}\r\n            tur.updateCellsPosition(_board, boardOptions, this.boardRef.current!);\r\n        } else {\r\n            tur.updateCellsPosition(board, boardOptions, this.boardRef.current!);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        // this.props.finishGameSetup(false)\r\n    }\r\n    \r\n    shouldComponentUpdate(prevProps: GameProps, prevState: IGameBoard) {\r\n        const cond1 = JSON.stringify(prevProps) !== JSON.stringify(this.props) \r\n        return cond1 || compareMaps(prevProps.board.towers, this.props.board.towers)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: GameProps) {\r\n        const {\r\n            game: {history, gameMode, moveOrder: {pieceOrder}, playerColor},\r\n            gameOptions: {rivalType},\r\n            board,\r\n            windowSize,\r\n            boardOptions,\r\n        } = this.props\r\n        const histLength = history.length \r\n        // console.log(this.props)\r\n        if (prevProps.game.history.length !== histLength \r\n            && ((pieceOrder === playerColor && rivalType === \"PC\") || rivalType === 'player')) {\r\n            console.log('updated', this.props.board, this.props.game)\r\n            this.makePremoveAction(history[history.length - 1])  \r\n        }\r\n        if (prevProps.game.gameMode !== 'isPlaying' && gameMode === 'isPlaying') {\r\n            console.log('new game started', this.props)\r\n            tur.updateCellsPosition(board, boardOptions, this.boardRef.current!)\r\n        }\r\n        if (JSON.stringify(windowSize) !== JSON.stringify(prevProps.windowSize)) {\r\n            tur.updateCellsPosition(board, boardOptions, this.boardRef.current!)\r\n        }\r\n    }\r\n\r\n    makePremoveAction = (opponentMove: string) => {\r\n        const {\r\n            game: {moveOrder: {pieceOrder}},\r\n            endGame,\r\n            updateBoardState,\r\n            board: {currentPosition},\r\n        } = this.props\r\n        const mandatoryMoves = mmr.lookForMandatoryMoves(pieceOrder, currentPosition)\r\n        if (!mandatoryMoves.length && !mmr.lookForAllPosibleMoves(pieceOrder, currentPosition).length) {\r\n            console.log('no moves', this.props)\r\n            return setTimeout(() => endGame('noMoves'), AnimationDuration)\r\n        }\r\n        updateBoardState({\r\n            mandatoryMoves,\r\n            mandatoryMoveStep: 0,\r\n            mouseDown: false,\r\n            moveDone: false\r\n        })\r\n    }\r\n\r\n    makePlayerMandatoryMoveStep = (to: string) => {\r\n        const {mandatoryMoves, mandatoryMoveStep, towerTouched} = this.props.board\r\n        const {game, turn, board, updateBoardState, gameOptions: {gameVariant}} = this.props\r\n        const from = towerTouched!.key\r\n        const fitMoves = mandatoryMoves!.filter((m: IMMRResult) => m.move.includes(`${from}:${to}`))\r\n        if (fitMoves[0].move.split(':').length === 2 + (mandatoryMoveStep as number)) {\r\n            const moveProps = {moveToSave: fitMoves[0], moveOrder: mmr.getNewOrder(game)}\r\n            const takenPieces = fitMoves[0].takenPieces!\r\n            const tP = gameVariant === 'towers' ? [takenPieces![mandatoryMoveStep]] : takenPieces\r\n            let towers = tur.updateTowersOnMandatoryMoveStep(from, to, board, tP, true)\r\n            console.log('towers;', towers)\r\n            updateBoardState({\r\n                mandatoryMoves: [] as unknown as IMMRResult[],\r\n                mandatoryMoveStep: 0,\r\n                towerTouched: null as unknown as TowerTouched,\r\n                towers,\r\n                lastMoveSquares: moveProps.moveToSave.move.split(':'),\r\n                currentPosition: moveProps.moveToSave.position,\r\n                mouseDown: false,\r\n                moveDone: true,\r\n            })\r\n            turn(moveProps)\r\n        } else {\r\n            const tP = fitMoves[0].takenPieces![mandatoryMoveStep]\r\n            updateBoardState({\r\n                mandatoryMoves: fitMoves,\r\n                mandatoryMoveStep: mandatoryMoveStep as number + 1,\r\n                towerTouched: null as unknown as TowerTouched,\r\n                towers: tur.updateTowersOnMandatoryMoveStep(from, to, board, [tP]),\r\n                lastMoveSquares: fitMoves[0].move.slice(mandatoryMoveStep as number + 1).split(':'),\r\n                mouseDown: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleMouseUp = (event: any) => {\r\n        const {\r\n            towerTouched,\r\n            cellSize,\r\n            moveDone,\r\n            mandatoryMoves,\r\n            currentPosition\r\n        } = this.props.board as IGameBoard\r\n        const { board, game: {moveOrder, white, black}, turn} = this.props\r\n        if (!towerTouched || moveDone) {\r\n            return\r\n        }\r\n        const reversed = this.props.boardOptions.reversedBoard\r\n        const {clientX, clientY} = event.type === 'touchend' ? event.changedTouches['0'] : event\r\n        const to = checkMoveTargetCell({x: clientX, y: clientY}, towerTouched.posibleMoves, cellSize, this.boardRef)\r\n        const cancelProps = {...board, reversed}\r\n        if (!to) {\r\n            tur.cancelTowerTransition(cancelProps)\r\n        } else {\r\n            const from = towerTouched.key\r\n            if (mandatoryMoves?.length) {\r\n                this.makePlayerMandatoryMoveStep(to)\r\n            } else {\r\n                tur.finalizeSimpleMove(from, to, board, reversed)\r\n                const props =  {moveOrder, white, black, currentPosition}\r\n                const moveProps = mmr.getPropsToMakeFreeMove(from, to, props)\r\n                turn(moveProps)\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleMouseMove = (event: any) => {\r\n        const {board: {towerTouched, moveDone, mouseDown}, updateBoardState} = this.props\r\n        if (!towerTouched || moveDone || !mouseDown) {\r\n            return\r\n        }\r\n        const {key, startCursorPosition: SCP, startTowerPosition: STP} = towerTouched;\r\n        const {clientX, clientY} = event.type === 'touchmove' ? event.changedTouches['0'] : event\r\n        const towers = copyMap(this.props.board.towers)\r\n        const tower = towers.get(key)! as TowerConstructor\r\n        const newPosition = {x: STP.x + clientX - SCP.x, y: STP.y + clientY - SCP.y}\r\n        const currentPosition = tower.positionInDOM!\r\n        tower.positionInDOM = newPosition\r\n        const deltaX = Math.abs(currentPosition.x - newPosition.x)\r\n        const deltaY = Math.abs(currentPosition.y - newPosition.y)\r\n        \r\n        if ( deltaX + deltaY >= 6) {\r\n            towers.set(key, tower)\r\n            updateBoardState({towers})\r\n        }\r\n    }\r\n\r\n    handleMouseDown = (event: any) => {\r\n        const {game: {moveOrder: {pieceOrder}}, board, updateBoardState} = this.props\r\n        const {mandatoryMoves, cellsMap, towers, currentPosition} = board\r\n        \r\n        const {target, clientX, clientY} = event.type === 'touchstart' ? event.changedTouches['0'] : event\r\n        const classList = (target as HTMLDivElement).classList\r\n        if (!(classList.contains('checker-tower') && classList.contains(pieceOrder))) return\r\n        \r\n        const towerKey = (target as HTMLDivElement).getAttribute('data-indexes') as string\r\n        const tower = towers.get(towerKey)!\r\n        console.log(tower)\r\n        if (!tower) {\r\n            console.error(towerKey, board)\r\n            return\r\n        }\r\n        let posibleMoves: CellsMap\r\n        if (mandatoryMoves?.length) {\r\n           posibleMoves = possibleOutOfMandatory(this.props.board, towerKey)\r\n        } else {\r\n            posibleMoves = tower.currentType === TowerType.m \r\n            ? mmr.manTowerFreeMoves(tower, currentPosition, cellsMap)\r\n            : mmr.kingTowerFreeMoves(towerKey, currentPosition, cellsMap)\r\n        }\r\n        if (!posibleMoves.size) {\r\n            // sound\r\n            return\r\n        }\r\n        const towerTouched: TowerTouched = {\r\n            key: towerKey,\r\n            posibleMoves,\r\n            startCursorPosition: {x: clientX, y: clientY},\r\n            startTowerPosition: tower.positionInDOM!,\r\n            towerColor: tower.currentColor,\r\n            towerType: tower.currentType as TowerType\r\n        }\r\n        updateBoardState({towerTouched, mouseDown: true})\r\n    }\r\n\r\n    modeRestrictions = (): boolean => {\r\n        const {game: {moveOrder: {playerTurn}, gameMode}, name, board: {moveDone, animationStarted}} = this.props\r\n        if (gameMode === 'isPlaying') {\r\n            return playerTurn !== name || moveDone || animationStarted\r\n        }\r\n        return true\r\n    }\r\n\r\n    render() {\r\n        const {towers, towerTouched, mandatoryMoves, mandatoryMoveStep, lastMoveSquares} = this.props.board\r\n        const {boardOptions, game: {gameMode}} = this.props\r\n        // console.log(towers)\r\n        const posibleMoves = towerTouched?.posibleMoves\r\n        const BoardProps = {boardOptions, posibleMoves, lastMove: lastMoveSquares} as IBoardProps\r\n        const mandatoryTowers = (mandatoryMoves || []).map(m => m.move.split(':')[mandatoryMoveStep || 0])\r\n        const {boardSize, boardTheme} = boardOptions\r\n        const WrapperClass = `board__wrapper ${boardTheme} h${boardSize}v${boardSize}`;\r\n        const Towers = Array.from(towers.values()).map((props: TowerConstructor, i: number) => {\r\n            const mt = gameMode === 'isPlaying' ? mandatoryTowers.includes(props.onBoardPosition) : false\r\n            return <TowerComponent {...props} key={props.onBoardPosition} mandatory={mt} />\r\n        })\r\n        return (\r\n            <>\r\n                <section\r\n                    onMouseMove={this.handleMouseMove}\r\n                    onMouseUp={this.handleMouseUp}\r\n                    onMouseDown={this.handleMouseDown}\r\n                    onTouchStart={this.handleMouseDown}\r\n                    onTouchMove={this.handleMouseMove} \r\n                    onTouchEnd={this.handleMouseUp}\r\n                    className={WrapperClass}\r\n                    ref={this.boardRef}\r\n                >   \r\n                    {Towers}\r\n                    <Board {...BoardProps}/>\r\n                </section>\r\n                {this.props.gameOptions.rivalType === 'PC' && <ClientBotEngine />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport const GameBoard = gameConnector(GameClass) \r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\n\r\nimport { IRootState } from '../../../store/rootState&Reducer'\r\nimport {\r\n    setTiming, \r\n    setPlayerColor, \r\n    setOpponentType, \r\n    setGameVariant,\r\n    findRival,\r\n    setGameType,\r\n    setRivalLevel,\r\n} from '../../../store/gameOptions/actions'\r\nimport { I18n } from '../../../assets/i18n'\r\n\r\nimport { RivalType, PieceColor, GameVariants, GameType } from '../../../store/app-interface'\r\nimport { StandartTiming } from '../../../constants/gameConstants'\r\n\r\n\r\nimport './presetGameForm.scss'\r\n\r\n\r\nconst gameMapState = (state: IRootState) => ({\r\n    language: state.user.language,\r\n    gameType: state.gameOptions.gameType\r\n})\r\n\r\nconst gameMapDispatch = {\r\n    setGameType\r\n}\r\n \r\nconst gameTypeConnector = connect(gameMapState, gameMapDispatch)\r\n\r\nconst RivalVariant:React.FC<ConnectedProps<typeof gameTypeConnector>> = (props) => {\r\n    const {setGameType, gameType} = props\r\n    // const i18n = I18n[language.slice(0, 2)]\r\n    const handleSelectOpponentVariant = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        const target = e.target as HTMLButtonElement\r\n        setGameType(target.value as GameType)\r\n    }\r\n    const buttonClass = (value: GameType) => (`opponent-variant__b ${gameType === value ? 'actual' : ''}`)\r\n    const buttonTitle = (value: GameType) => {\r\n        switch(value) {\r\n            case('ranked'): \r\n                return 'ranked game'\r\n            case('casual'): {\r\n                return 'casual game'\r\n            }\r\n            case ('tournament'): {\r\n                return 'Service is not available for now'\r\n            }\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n return (\r\n    <div className=\"opponent-variant\" onClick={handleSelectOpponentVariant}>\r\n        <button\r\n            title={buttonTitle('ranked')}\r\n            className={buttonClass('ranked')}\r\n            type=\"button\"\r\n            value=\"ranked\"\r\n        >\r\n            Ranked\r\n        </button>\r\n        <button\r\n            title={buttonTitle('tournament')}\r\n            className={buttonClass('tournament')}\r\n            type=\"button\"\r\n            value=\"tournament\"\r\n        >\r\n            Tournament\r\n        </button>\r\n        <button\r\n            title={buttonTitle('casual')}\r\n            className={buttonClass('casual')}\r\n            type=\"button\"\r\n            value=\"casual\"\r\n        >\r\n            Casual\r\n        </button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport const RivalVariantComponent = gameTypeConnector(RivalVariant)\r\n\r\n// timing component\r\nconst timingMapState = (state: IRootState) => ({\r\n    timing: state.gameOptions.timing\r\n})\r\n\r\nconst timingMapDispatch = {\r\n    setTiming\r\n}\r\n \r\nconst timingConnector = connect(timingMapState, timingMapDispatch)\r\n\r\nconst Timing = (props: ConnectedProps<typeof timingConnector>) => {\r\n    const {timing: {timeToGame, adds}, setTiming} = props\r\n    const handleSelectTime = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        const values = (e.target as HTMLButtonElement).value.split(':').map(i => parseInt(i))\r\n        setTiming({timeToGame: values[0], adds: values[1]})\r\n    }\r\n\r\n    return (\r\n        <div className=\"timing-wrapper\" onClick={handleSelectTime}>\r\n            {StandartTiming.map((t: number[], i: number) => {\r\n                const Class = t[0] === timeToGame && t[1] === adds ? 'timing-menu-item actual' : 'timing-menu-item'\r\n                return <button \r\n                            title={\"time limit: minuts / add per move: seconds\"} \r\n                            key={i} \r\n                            className={Class}\r\n                            type=\"button\"\r\n                            value={t.join(':')}\r\n                        >\r\n                            {`${t[0]} / ${t[1]}`}\r\n                        </button>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TimingComponent = timingConnector(Timing)\r\n\r\n\r\n// pc level component\r\nconst levelMapState = (state: IRootState) => ({\r\n    level: state.gameOptions.rivalLevel\r\n})\r\n\r\nconst levelMapDispatch = {\r\n    setRivalLevel\r\n}\r\n \r\nconst levelConnector = connect(levelMapState, levelMapDispatch)\r\n\r\nconst Level = (props: ConnectedProps<typeof levelConnector>) => {\r\n    const {level, setRivalLevel} = props\r\n\r\n    return (\r\n        <div className=\"level-wrapper\" >\r\n            {[1,2,3,4,5,6,7,8,9].map((i: number) => {\r\n                const Class = level === i ? 'level-menu-item actual' : 'level-menu-item'\r\n                return (\r\n                    <button \r\n                    onClick={() => setRivalLevel(i)}\r\n                        title={\"Choose engine level\"} \r\n                        key={i} \r\n                        className={Class}\r\n                        type=\"button\"\r\n                        value={i}\r\n                    >\r\n                        {i}\r\n                    </button>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const LevelComponent = levelConnector(Level)\r\n\r\n\r\nconst gameVariantMapState = (state: IRootState) => ({\r\n    gv: state.gameOptions.gameVariant\r\n})\r\n\r\nconst gameVariantMapDispatch = {\r\n    setGameVariant\r\n}\r\n \r\nconst gameVariantConnector = connect(gameVariantMapState, gameVariantMapDispatch)\r\n\r\nconst GameVariant = (props: ConnectedProps<typeof gameVariantConnector>) => {\r\n    const {gv, setGameVariant} = props\r\n\r\n    const handleSelect = (e: any) => {\r\n        e.preventDefault()\r\n        const target = e.target as HTMLSelectElement\r\n        setGameVariant(target.value as GameVariants)\r\n    }\r\n\r\n    return (\r\n        <select \r\n            title={\"select game\"}\r\n            className=\"game-variant\"\r\n            name=\"gameVariant\"\r\n            defaultValue={gv}\r\n            onChange={handleSelect}\r\n        >\r\n            <option value=\"towers\">{'Play Towers'}</option>\r\n            <option value=\"international\">{'Play Internstional'}</option>\r\n            <option value=\"russian\">{'Play Russian'}</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport const GameVariantComponent = gameVariantConnector(GameVariant)\r\n\r\n// color presets \r\nconst colorMapState = (state: IRootState) => ({\r\n    color: state.gameOptions.playerColor\r\n})\r\n\r\nconst colorMapDispatch = {\r\n    setPlayerColor\r\n}\r\n\r\nconst colorConnector = connect(colorMapState, colorMapDispatch)\r\n\r\nconst PlayerColorPreset = (props: ConnectedProps<typeof colorConnector>) => {\r\n    const { color, setPlayerColor } = props\r\n    const handleSelectColor = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        const target = e.target as HTMLButtonElement\r\n        if (!target.classList.contains('select-color')) {\r\n            return\r\n        }        \r\n        setPlayerColor(target.value as PieceColor | 'random')\r\n    }\r\n\r\n    return (\r\n        <div className=\"select-color-wrapper\" onClick={handleSelectColor}>\r\n            <button\r\n                title=\"play white pieces\"\r\n                className={`select-color${color === PieceColor.w ? ' active' : ''}`}\r\n                type=\"button\" value={PieceColor.w}\r\n            ></button>\r\n            <button\r\n                title=\"play random color pieces\"\r\n                className={`select-color${color === 'random' ? ' active' : ''}`}\r\n                type=\"button\" \r\n                value=\"random\"\r\n            ></button>\r\n            <button\r\n                title=\"play black pieces\"\r\n                className={`select-color${color === PieceColor.b ? ' active' : ''}`}\r\n                type=\"button\"\r\n                value={PieceColor.b}\r\n            ></button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// opponent type component\r\nconst rivalTypeMapState = (state: IRootState) => ({\r\n    rivalType: state.gameOptions.rivalType,\r\n    gameType: state.gameOptions.gameType\r\n})\r\n\r\nconst rivalTypeMapDispatch = {\r\n    setOpponentType,\r\n    setGameType\r\n}\r\n \r\nconst rivalTypeConnector = connect(rivalTypeMapState, rivalTypeMapDispatch)\r\n\r\nconst RivalTypeSelector = (props: ConnectedProps<typeof rivalTypeConnector>) => {\r\n    const {rivalType, setOpponentType, gameType, setGameType} = props\r\n\r\n    const handleSelect = (e: any) => {\r\n        e.preventDefault()\r\n        const target = e.target as HTMLSelectElement\r\n        setOpponentType(target.value as RivalType)\r\n        if (target.value === 'PC' && gameType === 'ranked') {\r\n            setGameType('casual')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <select \r\n            title={\"select opponent type\"}\r\n            className=\"rival-type\"\r\n            name=\"rivalType\"\r\n            defaultValue={rivalType}\r\n            onChange={handleSelect}\r\n        >\r\n            <option value=\"player\">{'VS Player'}</option>\r\n            <option value=\"PC\">{'VS Computer'}</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nconst OpponentTypeSelectorC = rivalTypeConnector(RivalTypeSelector)\r\n\r\n// custom timing presets\r\nconst customTimingMapState = (state: IRootState) => ({\r\n    timeToGame: state.gameOptions.timing.timeToGame,\r\n    adds: state.gameOptions.timing.adds\r\n})\r\n\r\nconst customTimingMapDispatch = {\r\n    setTiming\r\n}\r\n\r\nconst customTimingConnector = connect(customTimingMapState, customTimingMapDispatch)\r\n\r\ntype CTP = ConnectedProps<typeof customTimingConnector>\r\n\r\nexport class CustomTimingPreset extends React.Component<CTP, {limit: number, adds: number, open: boolean}> {\r\n    constructor(props: CTP) {\r\n        super(props)\r\n        this.state = {\r\n            limit: props.timeToGame,\r\n            adds: props.adds,\r\n            open: false\r\n        }\r\n    }\r\n    componentDidUpdate(prev: CTP) {\r\n        const {timeToGame, adds} = this.props\r\n        const ST = StandartTiming.map(t => t.join('/')).includes(`${timeToGame}/${adds}`)\r\n        if (timeToGame !== prev.timeToGame || adds !== prev.adds) {\r\n            if (!this.state.open && !ST) {\r\n                this.setState({open: true})\r\n            } else if (this.state.open && ST) {\r\n                this.setState({open: false})\r\n            }\r\n            this.setState({limit: timeToGame, adds})\r\n        }\r\n    }\r\n\r\n    handleClick:  React.MouseEventHandler<HTMLDivElement> = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        const target = e.target as Element\r\n        if (target.classList.contains('time-range')) {\r\n            return\r\n        }\r\n        if (target.classList.contains('custom-timing__values') && this.state.open) {\r\n            this.setState({open: false})\r\n        }\r\n        if (target.classList.contains('custom-timing')) {\r\n            this.setState({open: !this.state.open})\r\n        }\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent) => {\r\n        e.preventDefault()\r\n        const target = e.target as HTMLInputElement\r\n        console.log(target.value)\r\n        if (target.name === 'lim') {\r\n            this.setState((state) => ({...state, limit: parseInt(target.value)}))\r\n        }\r\n        if (target.name === 'adds') {\r\n            this.setState({adds: parseInt(target.value)})\r\n        }\r\n    }\r\n\r\n    handleBlur = (e: React.FocusEvent) => {\r\n        const {limit, adds} = this.state\r\n        e.preventDefault()\r\n        this.props.setTiming({timeToGame: limit, adds})\r\n    }\r\n\r\n    render() {\r\n        const {open, limit, adds} = this.state\r\n        return (\r\n            <div className={`custom-timing ${open ? 'open' : 'close'}`} onClick={this.handleClick}>\r\n                <p className=\"custom-preset-label\">\r\n                    <span>Custom Timing</span>\r\n                </p>\r\n                <div className=\"custom-timing__menu\">\r\n                    <input\r\n                        onBlur={this.handleBlur}\r\n                        onChange={this.handleChange}\r\n                        className=\"time-range\"\r\n                        name=\"lim\"\r\n                        type=\"range\" min=\"0\"\r\n                        step=\"1\"\r\n                        max=\"60\"\r\n                        value={limit}\r\n                    ></input>\r\n                    <div className=\"custom-timing__values\">{` ${limit} / ${adds} `}</div>\r\n                     <input\r\n                        onBlur={this.handleBlur}\r\n                        onChange={this.handleChange}\r\n                        className=\"time-range\"\r\n                        name=\"adds\"\r\n                        type=\"range\" min=\"0\"\r\n                        step=\"1\"\r\n                        max=\"60\"\r\n                        value={adds}\r\n                    ></input>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport const ColorPreset = colorConnector(PlayerColorPreset)\r\n\r\nexport const CustomTiming = customTimingConnector(CustomTimingPreset)\r\n\r\n\r\nconst mapState = (state: IRootState) => ({\r\n    waitingRival: state.gameOptions.waitingRival,\r\n    language: state.user.language,\r\n    rivalType: state.gameOptions.rivalType\r\n})\r\n\r\nconst mapDispatch = {\r\n    setTiming, setPlayerColor, findRival\r\n}\r\n \r\nconst presetGameConnector = connect(mapState, mapDispatch)\r\n\r\nconst PresetGameForm = (props: ConnectedProps<typeof presetGameConnector>) => {\r\n    const {waitingRival, findRival, language, rivalType} = props\r\n    const i18n = I18n[language.slice(0, 2)]\r\n    const className = `preset-game${waitingRival ? ' hidden' : ''}`\r\n    return (\r\n        <div className={className}>\r\n            <button className=\"new-game\" type=\"button\" value=\"new_game\" onClick={findRival}>{i18n.newGame}</button>\r\n            {/* <RivalVariantComponent /> */}\r\n            <div className=\"game-type-wrapper\">\r\n                <GameVariantComponent />\r\n                <OpponentTypeSelectorC />\r\n            </div>\r\n            {rivalType !== 'PC' ? <TimingComponent /> : <LevelComponent />}\r\n            <CustomTiming />\r\n            <ColorPreset />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const PresetGame = presetGameConnector(PresetGameForm)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { timeToString } from '../common/helpers/time-to-string'\r\nimport { IRootState } from '../store/rootState&Reducer'\r\n\r\n\r\nexport const PlayerTimer = (props: {timeOf: string}) => {\r\n    const state = useSelector((state: IRootState) => ({\r\n        clock: state.clock[`${props.timeOf}Clock` as 'whiteClock' | 'blackClock'],\r\n        gameConfirmed: state.game.gameConfirmed,\r\n        pcGame: state.gameOptions.rivalType === 'PC'\r\n    }))\r\n    const {clock: {timeToFirstMove, timeToGame}, gameConfirmed, pcGame} = state\r\n    const [strTime, setStrTime] = useState({min: '', sec: ''})\r\n    let className = `${props.timeOf}-time`\r\n    useEffect(() => {\r\n        const time = gameConfirmed ? timeToGame: timeToFirstMove as number\r\n        setStrTime(timeToString(time))\r\n    }, [gameConfirmed, timeToFirstMove, timeToGame])\r\n    if (pcGame) {\r\n        return null\r\n    } \r\n    return (\r\n        <div className=\"game-clock\">\r\n            <div className={className}>{`${strTime.min}: ${strTime.sec}`}</div>\r\n        </div>\r\n    \r\n    )\r\n}\r\n","export  const timeToString = (time: number) => {\r\n    let min = Math.floor(time / 60).toString()\r\n    let sec = (time % 60).toString()\r\n    sec = sec.length < 2 ? `0${sec}` : sec\r\n    min = min.length < 2 ? `0${min}` : min\r\n    return {min, sec}\r\n}","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\n\r\nimport {cancelRivalWaiting} from '../../store/gameOptions/actions'\r\nimport { IRootState } from '../../store/rootState&Reducer';\r\nimport './waiting-rival.scss';\r\n\r\n// spinner\r\nconst spinnerDispatchMap = {cancelRivalWaiting}\r\nconst spinnerStateMap = (state: IRootState) => ({waitingRival: state.gameOptions.waitingRival})\r\n\r\nconst connector = connect(spinnerStateMap, spinnerDispatchMap)\r\n\r\nconst WaitingRival: React.FC<ConnectedProps<typeof connector>> = props => {\r\n    \r\n    if (!props.waitingRival) return null\r\n    return (\r\n        <> \r\n            <div className=\"waiting-rival-spinner\" onClick={() => props.cancelRivalWaiting()}>\r\n                <div title=\"cancel\" className=\"logo\"></div>\r\n                <span className=\"material-icons\">cancel</span>\r\n            </div>\r\n            <Timer />\r\n            <div className=\"waiting-rival-back\"></div>\r\n        </>\r\n       \r\n    );\r\n};\r\n\r\nexport default connector(WaitingRival);\r\n\r\n\r\n\r\n\r\nclass Timer extends React.Component<{}, {timer: number}> {\r\n    interval: any\r\n    constructor(props: {}) {\r\n        super(props)\r\n        this.state = {\r\n            timer: 0\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.setState((s: {timer: number}) => ({...s, timer: s.timer + 1})), 1000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval)\r\n    }\r\n    render() {\r\n        return <div className=\"waiting-rival-timer\">waiting time: {this.state.timer}</div>\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\n\r\nimport { IRootState } from '../../../store/rootState&Reducer'\r\nimport {requestRematch, findRival, finishGameSetup} from '../../../store/gameOptions/actions'\r\nimport {analyzeLastGame} from '../../../store/gameAnalysis/actions'\r\n\r\nimport './game-end-popup.scss'\r\nimport { useHistory } from 'react-router'\r\nimport { setGameMode } from '../../../store/game/actions'\r\n\r\n\r\nconst stateMap = (state: IRootState) => ({\r\n    gameResult: state.analyze.gameResult,\r\n    gameOver: state.game.gameMode === 'isOver',\r\n})\r\n\r\nconst dispatchMap = {\r\n    requestRematch,\r\n    findRival,\r\n    finishGameSetup,\r\n    analyzeLastGame,\r\n    setGameMode\r\n}\r\n\r\nconst connestor = connect(stateMap, dispatchMap)\r\n\r\nconst GameEndPopup: React.FC<ConnectedProps<typeof connestor>> = (props) => {\r\n    const {\r\n        requestRematch,\r\n        findRival,\r\n        gameOver,\r\n        gameResult: {reason, winner, movesHistory},\r\n        gameResult: {playerColor},\r\n        finishGameSetup,\r\n        analyzeLastGame,\r\n        setGameMode\r\n    } = props\r\n      \r\n    const history = useHistory()\r\n    const win = winner && winner === playerColor\r\n    const notAbandonByPlayer = !(reason && reason.startsWith('abandon') && reason.includes(playerColor as string))\r\n    let message\r\n    if (!winner) {\r\n        message = 'Game canceled'\r\n    } else {\r\n        message = winner === 'draw' ? 'Draw' : `You ${win ? 'win' : 'lose'}`\r\n    }\r\n    const handleClick = (e: any) => {\r\n        setGameMode('isPreparing')\r\n        const classList = e.target.classList\r\n        const containClass = (cl: string) => classList.contains(cl)\r\n        if (containClass('rematch')) {\r\n            requestRematch()\r\n        } else if (containClass('new-rival')) {\r\n            findRival()\r\n        } else if (containClass('game-options')) {\r\n            finishGameSetup(false)\r\n        } else if (containClass('analyze-game')) {\r\n            analyzeLastGame(true)\r\n            history.push('/analysis')  \r\n        }\r\n    }\r\n    const popupHTML = (\r\n        <section className=\"game-end-popup\">\r\n            <header className={`popup-header ${win ? 'win-bg' : 'lose-bg'}`}>\r\n                <h4 className=\"popup-title\">{message}</h4> \r\n                <span className=\"material-icons\" onClick={() => setGameMode('isPreparing')}>cancel</span>\r\n            </header>\r\n            <div className=\"popup-body\">\r\n\r\n            </div>\r\n            <div className={`popup-footer ${win ? 'win-bg' : 'lose-bg'}`} onClick={handleClick}>\r\n                <button className=\"popup-button rematch\" type=\"button\">\r\n                    rematch\r\n                </button>\r\n                <button className=\"popup-button new-rival\" type=\"button\">\r\n                    new\r\n                </button>\r\n                <button className=\"popup-button game-options\" type=\"button\">\r\n                    options\r\n                </button>\r\n                {movesHistory \r\n                    ? <button className=\"popup-button analyze-game\" type=\"button\">\r\n                        analyze\r\n                    </button>\r\n                    : null\r\n                }\r\n            </div>\r\n        </section>\r\n    )\r\n    \r\n    return  (\r\n        <>\r\n            {\r\n                gameOver && notAbandonByPlayer ? popupHTML : null\r\n            }\r\n        </>\r\n       \r\n    ) \r\n}\r\n\r\nexport default connestor(GameEndPopup)\r\n","export const oppositColor = (color) => (color === PieceColor.w ? PieceColor.b : PieceColor.w)\r\n\r\n\r\n\r\nexport class TowerConstructor {\r\n    onBoardPosition;\r\n    currentColor;\r\n    wPiecesQuantity;\r\n    bPiecesQuantity;\r\n    positionInDOM;\r\n    currentType;\r\n    veiw;\r\n    mandatoryMove;\r\n    constructor(props) {\r\n        this.currentType = props.currentType || TowerType.m;\r\n        this.currentColor = props.currentColor;\r\n        this.wPiecesQuantity = props.wPiecesQuantity || (props.currentColor === PieceColor.w ? 1 : 0);\r\n        this.bPiecesQuantity = props.bPiecesQuantity || (props.currentColor === PieceColor.b ? 1 : 0);\r\n        this.positionInDOM = props.positionInDOM || {x: 0, y: 0};\r\n        this.onBoardPosition = props.onBoardPosition\r\n        this.veiw = props.veiw || 'face'\r\n        this.mandatoryMove = props.mandatoryMove || false\r\n    }\r\n}\r\n\r\nexport const PieceColor = {\r\n    w: 'white',\r\n    b: 'black',\r\n}\r\n\r\nexport const TowerType = {\r\n    m: 'man',\r\n    k: 'king'\r\n}\r\n\r\nexport const copyMap = (board) => {\r\n    const nm = new Map()\r\n    board.forEach((v, k) => {\r\n        if (typeof v === 'object') {\r\n            if (Array.isArray(v)) {\r\n                nm.set(k, [...v])\r\n            } else {\r\n                nm.set(k, {...v})\r\n            }\r\n        } else {\r\n            nm.set(k, v)\r\n        }\r\n    })\r\n    return nm\r\n}\r\n\r\nexport const copyObj = (board) => {\r\n    return JSON.parse(JSON.stringify(board))\r\n}\r\n\r\nexport const possibleOutOfMandatory = (state, key) => {\r\n    const posibleMoves = new Map()\r\n    const {mandatoryMoveStep: MS, mandatoryMoves, cellsMap } = state\r\n    const availableSteps = mandatoryMoves\r\n    .filter((m) => m.move.includes(key)).map((m) => m.move.split(':')[MS + 1])\r\n    availableSteps.forEach((step) => {\r\n        posibleMoves.set(step, cellsMap.get(step))\r\n    })\r\n    return posibleMoves\r\n}\r\n\r\nexport const compareMaps = (map1, map2) => {\r\n    return JSON.stringify([...map1.entries()]) !== JSON.stringify([...map2.entries()])\r\n}\r\n\r\nexport const filterArrayByLength = (arr) => {\r\n    const maxLength = arr.reduce((acc, val) => (acc > val.move.length ? acc : val.move.length), 0)\r\n    return arr.filter((val) => val.move.length === maxLength)\r\n}\r\n\r\nexport const crossDirections = (dir) => {\r\n    const directions = {}\r\n    directions[`${dir.includes('left') ? 'left' : 'right'}${dir.includes('Up') ? 'Down' : 'Up'}`] = true\r\n    directions[`${dir.includes('left') ? 'right' : 'left'}${dir.includes('Up') ? 'Up' : 'Down'}`] = true\r\n    return directions\r\n}\r\n \r\nexport function checkMoveTargetCell(pos, pM, cellSize, ref) {\r\n    const possibleCells =  pM.entries()\r\n    const size = cellSize\r\n    const boardRect = ref.current.querySelector('.board__body').getBoundingClientRect();\r\n    const [x, y] = [pos.x - boardRect.x, pos.y - boardRect.y]\r\n    const targetCell = [...possibleCells].filter((props) => {\r\n        const [cellX, cellY] = [props[1].x + size / 4, props[1].y + size / 4]\r\n        const distance = Math.sqrt(Math.pow((cellX - x), 2) + Math.pow((cellY - y), 2))\r\n        return distance < size\r\n    })[0]\r\n    if (targetCell) {\r\n        return targetCell[0]\r\n    }\r\n    return null\r\n}\r\n\r\nexport const checkIfNumberOfKingsChanged = (board1, board2) => {\r\n    const calcKings = (board) => Object.values(board).filter((cell) => \r\n        cell.tower && cell.tower.currentType === TowerType.k).length\r\n    return calcKings(board1) - calcKings(board2)\r\n}\r\n\r\nexport const convertToMovesHistory = (arr) => {\r\n    const result = []\r\n    for (let i = 0; i < arr.length; i += 2) {\r\n        result.push({white: arr[i], black: arr[i+1] || ''})\r\n    }\r\n    return result\r\n}\r\n\r\nexport function getCellSize(refElem, size) {\r\n    const boardHtmlRect = refElem.querySelector('.board__body').getBoundingClientRect();\r\n    const {width, left, right} = boardHtmlRect\r\n    const cellWidth = (width ? width:  left - right) / size;\r\n    return Math.round(cellWidth)\r\n}\r\n\r\nexport function checkIfBoardFitTowers(towers, board) {\r\n    let res = true\r\n    towers.forEach((tower, key) => {\r\n        const towerOnBoard = board[key].tower\r\n        if (tower.onBoardPosition !== towerOnBoard?.onBoardPosition\r\n            || tower.bPiecesQuantity !== towerOnBoard.bPiecesQuantity\r\n            || tower.wPiecesQuantity !== towerOnBoard.wPiecesQuantity\r\n            || tower.currentColor !== towerOnBoard.currentColor\r\n            || tower.currentType !== towerOnBoard.currentType) {\r\n                res = false\r\n                throw new Error(\"board do not fit towers\")\r\n            }\r\n    })\r\n    return res\r\n}\r\n\r\nconst GHF = {\r\n    checkIfBoardFitTowers,\r\n    getCellSize,\r\n    convertToMovesHistory,\r\n    checkIfNumberOfKingsChanged,\r\n    checkMoveTargetCell,\r\n    crossDirections,\r\n    copyObj,\r\n    copyMap,\r\n    oppositColor,\r\n    compareMaps,\r\n    filterArrayByLength,\r\n}\r\n\r\nexport default GHF\r\n","import { ConnectedProps, connect} from \"react-redux\"\r\nimport { Logo } from \"../../common/LogoIcon\"\r\nimport { \r\n    endGame,\r\n    declineDraw,\r\n    offerDraw,\r\n    cancelGame,\r\n    confirmStartGame,\r\n    setGameMode,\r\n    surrender\r\n} from \"../../store/game/actions\"\r\nimport {undoLastMove} from '../../store/board/actions'\r\nimport { findRival, finishGameSetup } from \"../../store/gameOptions/actions\"\r\nimport { IRootState } from \"../../store/rootState&Reducer\"\r\nimport { PieceColor } from \"../../game-engine/js-engine/gameplay-helper-fuctions\"\r\nimport { analyzeLastGame } from \"../../store/gameAnalysis/actions\"\r\nimport { useHistory } from \"react-router\"\r\n\r\nconst gameMenuMapState = (state: IRootState) => ({\r\n    drawOffered: state.game.rivalOfferedDraw,\r\n    gameConfirmed: state.game.gameConfirmed,\r\n    playerColor: state.game.playerColor,\r\n    gameMode: state.game.gameMode,\r\n    pcGame: state.gameOptions.rivalType === 'PC',\r\n    historyLength: state.game.history.length > 2\r\n})\r\n\r\nconst gameMenuMapDispatch = {\r\n    endGame,\r\n    declineDraw,\r\n    offerDraw,\r\n    cancelGame,\r\n    confirmStartGame,\r\n    findRival,\r\n    finishGameSetup,\r\n    setGameMode,\r\n    surrender,\r\n    undoLastMove,\r\n    analyzeLastGame,\r\n}\r\n\r\nconst gameMenuConnector = connect(gameMenuMapState, gameMenuMapDispatch)\r\n\r\nconst GameMenuComponent: React.FC<ConnectedProps<typeof gameMenuConnector>> = (props) => {\r\n    const history = useHistory()\r\n    const {\r\n        surrender,\r\n        endGame,\r\n        declineDraw,\r\n        drawOffered,\r\n        offerDraw,\r\n        gameConfirmed,\r\n        gameMode,\r\n        findRival,\r\n        finishGameSetup,\r\n        setGameMode,\r\n        cancelGame,\r\n        playerColor,\r\n        pcGame,\r\n        undoLastMove,\r\n        historyLength,\r\n        analyzeLastGame\r\n    } = props\r\n\r\n    const reason = playerColor === PieceColor.w ? `abandonedByWhite` : 'abandonedByBlack'\r\n\r\n    const handleCancelGame = (e: React.MouseEvent) => {\r\n        cancelGame()\r\n    }\r\n   \r\n    const handleDrawOffer = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        offerDraw()\r\n    }\r\n\r\n    const handleAnalizeGame = (e: React.MouseEvent) => {\r\n        if (gameMode === 'isPlaying') {\r\n            endGame(reason)\r\n            setGameMode('isAnalyzing')\r\n        }\r\n        analyzeLastGame(true)\r\n        history.push('/analysis')\r\n    }\r\n\r\n    const handleUndo = () => {\r\n        if (historyLength ) {\r\n            undoLastMove()\r\n        }\r\n    }\r\n\r\n    const handleResetGameOption = () => {\r\n        if (gameMode === 'isPlaying') {\r\n            endGame(reason)\r\n        }\r\n        finishGameSetup(false)\r\n       \r\n    }\r\n\r\n    const handleNewGame = () => {\r\n        if (gameMode === 'isPlaying') {\r\n            endGame(reason)\r\n        }\r\n        findRival()\r\n    }\r\n   \r\n    const undoClass = !historyLength ? \"game-menu__item hide-undo\" : \"game-menu__item\"\r\n    if (pcGame && gameConfirmed) {\r\n        return (\r\n            <ul className=\"game-menu\">\r\n                <li title=\"undo move\" className={undoClass} role=\"button\" onClick={handleUndo}>\r\n                    <i className=\"material-icons\">history</i>\r\n                </li>\r\n                <li title=\"new game\" role=\"button\" className=\"game-menu__item\" onClick={handleNewGame}>\r\n                    <Logo size={13} />\r\n                </li>\r\n                <li \r\n                    title=\"game options\" \r\n                    role=\"button\" className=\"game-menu__item\" \r\n                    onClick={handleResetGameOption}\r\n                >\r\n                    <i className=\"material-icons\">settings_applications</i>\r\n                </li>\r\n                <li title=\"analize game\" role=\"button\" className=\"game-menu__item\" onClick={handleAnalizeGame}>\r\n                    <i className=\"material-icons\">zoom_in</i>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    if (gameMode === 'isPlaying' && !gameConfirmed) {\r\n        return (\r\n            <ul className=\"game-menu\">\r\n                <li title=\"cancel game\" className=\"game-menu__item\" role=\"button\" onClick={handleCancelGame}>\r\n                    <i className=\"material-icons\">close</i>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    if (gameMode !== 'isPlaying') {\r\n        return (\r\n            <ul className=\"game-menu\">\r\n                <li title=\"new game\" role=\"button\" className=\"game-menu__item\" onClick={findRival}>\r\n                    <Logo size={13} />\r\n                </li>\r\n                <li \r\n                    title=\"game options\" \r\n                    role=\"button\" className=\"game-menu__item\" \r\n                    onClick={() => finishGameSetup(false)}\r\n                >\r\n                    <i className=\"material-icons\">settings_applications</i>\r\n                </li>\r\n                <li title=\"analize game\" role=\"button\" className=\"game-menu__item\" onClick={handleAnalizeGame}>\r\n                    <i className=\"material-icons\">zoom_in</i>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n    \r\n    return ( \r\n        <ul className=\"game-menu\">\r\n            {!drawOffered\r\n                ? <>\r\n                    <li \r\n                        title=\"resign\"\r\n                        role=\"button\"\r\n                        className=\"game-menu__item\"\r\n                        onClick={() => surrender(playerColor)}\r\n                    >\r\n                        <i className=\"material-icons\">flag</i>\r\n                    </li>\r\n                    <li \r\n                        title=\"offer draw\"\r\n                        role=\"button\"\r\n                        className=\"game-menu__item\"\r\n                        onClick={handleDrawOffer}\r\n                    >\r\n                        <i className=\"offer_draw\">1/2</i>\r\n                    </li>\r\n                </>\r\n                : <>\r\n                    <li \r\n                        role=\"button\" \r\n                        title=\"accept draw\"\r\n                        className=\"game-menu__item\"\r\n                        onClick={() => endGame('drawByAgreement')}\r\n                    >\r\n                        <i className=\"material-icons\">thumb_up</i>\r\n                    </li>\r\n                    <li \r\n                        role=\"button\"\r\n                        title=\"decline draw\"\r\n                        className=\"game-menu__item\"\r\n                        onClick={() => declineDraw(false)}\r\n                    >\r\n                        <i className=\"material-icons\">thumb_down</i>\r\n                    </li>\r\n                </>\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport const GameMenu = gameMenuConnector(GameMenuComponent)\r\n","import React from 'react'\r\nimport {connect, ConnectedProps, useSelector} from 'react-redux'\r\nimport { IRootState } from '../../store/rootState&Reducer'\r\nimport {PieceColor} from '../../store/app-interface'\r\n\r\nconst PlayerInfo = (props: {color: PieceColor}) => {\r\n    const {color} = props\r\n    const {onlineStatus, name, rating} = useSelector((state: IRootState) => state.game[color])\r\n    const rt = useSelector((state: IRootState) => state.gameOptions.rivalType) \r\n    const VSComputer = rt === 'PC'\r\n    const Color = `${(color as string)[0].toUpperCase()}${(color as string).substring(1)}`\r\n    return (\r\n        <div className=\"player-info\">\r\n            <h3>{Color}</h3>\r\n            {!VSComputer && <span className=\"player-status\">{onlineStatus}</span>}\r\n            <h4 className=\"player-name\">{name}</h4>\r\n            {!VSComputer && <span className=\"palyer-raiting\">{rating}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapState = (state: IRootState) => ({\r\n    gv: state.gameOptions.gameVariant,\r\n    white: state.game.white,\r\n    black: state.game.black,\r\n    gt: state.gameOptions.gameType,\r\n    ot: state.gameOptions.rivalType,\r\n    ti: state.gameOptions.timing\r\n})\r\n\r\nconst mapDispatch = {\r\n    \r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch)\r\n\r\ntype GameInfoProps = ConnectedProps<typeof connector>\r\n\r\nconst GameInfo: React.FC<GameInfoProps> = (props) => {\r\n    const {gv, gt, ot, ti} = props\r\n    const VSCompouter = ot === 'PC'\r\n    const gameType = VSCompouter ? 'casual' : gt\r\n    const timing = !VSCompouter ? `${ti.timeToGame} / ${ti.adds}` : ''\r\n    const gameVariant = `${gv[0].toUpperCase()}${gv.substring(1)}`\r\n    return (\r\n        <div className=\"game-info\">\r\n            <h2 className=\"game-info_header\">{gameVariant}&nbsp; draughts</h2>\r\n            <p className=\"game-info_type\">{gameType}&nbsp;{timing}</p>\r\n            <PlayerInfo color={PieceColor.w} />\r\n            <PlayerInfo color={PieceColor.b} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connector(GameInfo)\r\n","import React, {Suspense, useState} from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\n\r\nimport { SideBar } from '../../page-components/Sidebar'\r\nimport {GameBoard} from './GameBoard'\r\nimport Spinner from '../../page-components/spinners/Spinner'\r\nimport { IRootState } from '../../store/rootState&Reducer'\r\nimport { PresetGame} from './presetGameForm/PresetGameForm'\r\nimport { PlayerTimer } from '../../game-components/PlayerTimer'\r\nimport WaitingRival from '../../page-components/spinners/WatingRival'\r\nimport GameEndPopup from './gameEndPopup/GameEndPopup'\r\nimport { \r\n    endGame,\r\n    declineDraw,\r\n} from '../../store/game/actions'\r\nimport { oppositColor } from '../../game-engine/gameplay-helper-fuctions'\r\nimport { PieceColor } from '../../store/app-interface'\r\nimport { MovesHistory } from '../../game-components/moves-history/MovesHistory'\r\nimport { GameMenu } from './PlayerGameMenu'\r\nimport GameInfo from './GameInfo'\r\n\r\nimport './game-page.scss'\r\n\r\n\r\n// player bar\r\nconst PlayerGameBarMapState = (state: IRootState) => ({\r\n    name: state.game.playerColor === PieceColor.b ? state.game.black.name : state.game.white.name\r\n})\r\n\r\nconst PlayerGameBarMapDispatch = {endGame, declineDraw}\r\n\r\nconst PlayerGameBarConnector = connect(PlayerGameBarMapState, PlayerGameBarMapDispatch)\r\n\r\ntype PGBProps = ConnectedProps<typeof PlayerGameBarConnector>\r\n\r\nconst PlayerGameBar: React.FC<PGBProps> = ({children, ...props}) => {\r\n    return <div className=\"player-game-bar\">\r\n                {children}\r\n                <h2>{props.name}</h2>\r\n                <GameMenu />\r\n            </div>\r\n}\r\n\r\nexport const PlayerGameBarComponent = PlayerGameBarConnector(PlayerGameBar)\r\n\r\n// opponent bar\r\nconst barMapState = (state: IRootState) => ({\r\n    name: state.game.playerColor !== PieceColor.b ? state.game.black.name : state.game.white.name\r\n})\r\n\r\nconst barMapDispatch = {}\r\n\r\nconst RivalBarConnector = connect(barMapState, barMapDispatch)\r\n\r\ntype RivalBarProps = ConnectedProps<typeof RivalBarConnector>\r\n\r\nconst RivalGameBar: React.FC<RivalBarProps> = ({children, ...props}) => {\r\n    const [name] = useState(props.name)\r\n    return <div className=\"opponent-game-bar\">\r\n                {children}\r\n                <h2>{name}</h2>\r\n            </div>\r\n}\r\n\r\nconst RivalGameBarComponent = RivalBarConnector(RivalGameBar)\r\n\r\n\r\nconst GPmapState = (state: IRootState) => ({\r\n    playerColor: state.game.playerColor,\r\n    gameSetupFinished: state.gameOptions.gameSetupFinished,\r\n    portrait: state.app.portrait,\r\n\r\n})\r\n\r\nconst GPConnector = connect(GPmapState, {})\r\n\r\ntype GPProps = ConnectedProps<typeof GPConnector>\r\n\r\nclass GamePage extends React.Component<GPProps, {}> {\r\n\r\n    shouldComponentUpdate(prevProps: GPProps) {\r\n        return JSON.stringify(prevProps) !== JSON.stringify(this.props)\r\n    }\r\n    render() {\r\n        const {portrait, playerColor, gameSetupFinished} = this.props\r\n        const GameBoardWithBars = <>\r\n            <main className=\"portrait\">\r\n                {   portrait \r\n                    ? <RivalGameBarComponent>\r\n                        <PlayerTimer timeOf={oppositColor(playerColor as PieceColor)} />\r\n                    </RivalGameBarComponent>\r\n                    : null\r\n                }\r\n                <GameBoard />\r\n                {   portrait \r\n                    ? <PlayerGameBarComponent>\r\n                        <PlayerTimer timeOf={playerColor} />\r\n                    </PlayerGameBarComponent>\r\n                    : null\r\n                }\r\n            </main>\r\n            {   portrait \r\n                ? <div className=\"bars-wrapper\">\r\n                    <SideBar side=\"left\">\r\n                        <GameInfo />\r\n                    </SideBar>\r\n                    <SideBar side=\"right\">\r\n                        <MovesHistory />\r\n                    </SideBar>\r\n                </div>\r\n                : <>\r\n                    <SideBar side=\"left\">\r\n                        <GameInfo />\r\n                    </SideBar>\r\n                    <SideBar side=\"right\">\r\n                        <RivalGameBarComponent>\r\n                            <PlayerTimer timeOf={oppositColor(playerColor as PieceColor)} />\r\n                        </RivalGameBarComponent>\r\n                        <MovesHistory />\r\n                        <PlayerGameBarComponent>\r\n                            <PlayerTimer timeOf={playerColor} />\r\n                        </PlayerGameBarComponent>\r\n                    </SideBar>\r\n                </> \r\n            }\r\n        </>\r\n        \r\n          \r\n        return (\r\n            <Suspense fallback={<Spinner />}>\r\n                <div className=\"game page noselect\" >             \r\n                    {\r\n                        gameSetupFinished ? GameBoardWithBars : <PresetGame />\r\n                    }\r\n                    <WaitingRival />\r\n                    <GameEndPopup />\r\n                </div>\r\n            </Suspense>\r\n        )\r\n    }\r\n} \r\n\r\nexport default GPConnector(GamePage)\r\n"],"sourceRoot":""}