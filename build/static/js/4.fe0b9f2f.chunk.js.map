{"version":3,"sources":["game-engine/CientEngine.tsx","pages/game/GameBoard.tsx","pages/game/presetGameForm/PresetGameForm.tsx","game-components/PlayerTimer.tsx","common/helpers/time-to-string.ts","page-components/spinners/WatingRival.tsx","pages/game/gameEndPopup/GameEndPopup.tsx","game-engine/js-engine/gameplay-helper-fuctions.js","pages/game/PlayerGameMenu.tsx","pages/game/GameInfo.tsx","pages/game/GamePage.tsx"],"names":["mapDispatch","turn","endGame","updateIneffectiveMoves","surrender","ClientBotEngine","connect","state","currentPosition","board","engineColor","oppositColor","game","playerColor","white","black","dificulty","gameOptions","rivalLevel","timeToGame","timing","time","PieceColor","w","clock","blackClock","whiteClock","gameVariant","moveOrder","movesHistory","history","gameMode","botConnector","maxDepth","getSeekerProps","bestMoveCB","getMoveCB","props","evaluationStarted","setMaxDeep","deep","move","compleateMove","passProps","engineMove","pieceOrder","console","log","this","prev","prevState","bms","resetProps","cP","setTimeout","setActualMovesBranchAfterMove","AnimationDuration","length","startEvaluation","oldOrder","mmr","getNewOrder","includes","takenPieces","getCapturedTowers","split","moveToSave","React","Component","updateBoardState","finishGameSetup","GameBoard","name","user","positionsTree","app","boardOptions","gameConnector","boardRef","createRef","tur","makePremoveAction","opponentMove","mandatoryMoves","lookForMandatoryMoves","lookForAllPosibleMoves","mandatoryMoveStep","mouseDown","moveDone","makePlayerMandatoryMoveStep","to","towerTouched","from","key","fitMoves","filter","m","moveProps","tP","towers","updateTowersOnMandatoryMoveStep","lastMoveSquares","position","slice","handleMouseUp","event","cellSize","reversed","reversedBoard","type","changedTouches","clientX","clientY","checkMoveTargetCell","x","y","posibleMoves","cancelProps","finalizeSimpleMove","getPropsToMakeFreeMove","cancelTowerTransition","handleMouseMove","SCP","startCursorPosition","STP","startTowerPosition","copyMap","tower","get","newPosition","positionInDOM","Math","abs","set","handleMouseDown","cellsMap","modeRestrictions","target","classList","contains","towerKey","getAttribute","possibleOutOfMandatory","currentType","TowerType","manTowerFreeMoves","kingTowerFreeMoves","size","towerColor","currentColor","towerType","error","playerTurn","animationStarted","window","setCalBack","updateTowersToBoard","_board","updateCellsPosition","current","prevProps","JSON","stringify","compareMaps","histLength","windowSize","BoardProps","lastMove","mandatoryTowers","map","boardSize","boardTheme","WrapperClass","Towers","Array","values","i","mt","onBoardPosition","mandatory","onMouseMove","onMouseUp","onMouseDown","onTouchStart","onTouchMove","onTouchEnd","className","ref","Board","rivalType","gameMapDispatch","setGameType","RivalVariantComponent","language","gameType","gameTypeConnector","buttonClass","value","buttonTitle","onClick","e","preventDefault","title","timingMapDispatch","setTiming","TimingComponent","timingConnector","adds","parseInt","StandartTiming","t","Class","join","levelMapDispatch","setRivalLevel","LevelComponent","level","levelConnector","gameVariantMapDispatch","setGameVariant","GameVariantComponent","gv","gameVariantConnector","defaultValue","onChange","colorMapDispatch","setPlayerColor","colorConnector","color","rivalTypeMapDispatch","setOpponentType","OpponentTypeSelectorC","rivalTypeConnector","customTimingMapDispatch","customTimingConnector","CustomTimingPreset","handleClick","open","setState","handleChange","limit","handleBlur","ST","onBlur","min","step","max","ColorPreset","b","CustomTiming","findRival","PresetGame","waitingRival","presetGameConnector","i18n","I18n","newGame","PlayerTimer","useSelector","timeOf","gameConfirmed","pcGame","timeToFirstMove","useState","sec","strTime","setStrTime","useEffect","floor","toString","timeToString","spinnerDispatchMap","cancelRivalWaiting","connector","Timer","interval","timer","setInterval","s","clearInterval","dispatchMap","requestRematch","analyzeLastGame","setGameMode","connestor","gameResult","analyze","gameOver","message","reason","winner","useHistory","win","notAbandonByPlayer","startsWith","popupHTML","containClass","cl","push","gameMenuMapDispatch","declineDraw","offerDraw","cancelGame","confirmStartGame","undoLastMove","GameMenu","drawOffered","rivalOfferedDraw","historyLength","gameMenuConnector","handleAnalizeGame","undoClass","role","PlayerInfo","onlineStatus","rating","VSComputer","Color","toUpperCase","substring","gt","ot","ti","VSCompouter","PlayerGameBarMapDispatch","PlayerGameBarComponent","PlayerGameBarConnector","children","RivalGameBarComponent","rival","RivalBarConnector","GPConnector","gameSetupFinished","portrait","GamePage","GameBoardWithBars","side","MovesHistory","fallback","Spinner"],"mappings":"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","file":"static/js/4.fe0b9f2f.chunk.js","sourcesContent":["import React from 'react'\n\nimport {connect, ConnectedProps} from 'react-redux'\nimport { endGame, updateIneffectiveMoves, surrender} from '../store/game/actions'\nimport { IBoardToGame, PieceColor} from \"../store/app-interface\";\nimport { oppositColor } from './gameplay-helper-fuctions'; \nimport { IRootState } from '../store/rootState&Reducer';\nimport  mmr from './mandatory-move-resolver';\nimport bms from './position-evaluator'\n\nimport { turn } from '../store/board/actions';\nimport { AnimationDuration } from '../constants/gameConstants';\nimport { ISeekerProps } from './engine-interfaces';\n\ninterface IBestMove {move: string, deep: number}\n\n\nconst mapState = (state: IRootState) => ({\n        currentPosition: state.board.currentPosition,\n        engineColor: oppositColor(state.game.playerColor),\n        white: state.game.white,\n        black: state.game.black,\n        dificulty: state.gameOptions.rivalLevel,\n        timeToGame: state.gameOptions.timing.timeToGame,\n        time: state.game.playerColor === PieceColor.w \n            ? state.clock.blackClock.timeToGame \n            : state.clock.whiteClock.timeToGame,\n        gameVariant: state.gameOptions.gameVariant,\n        moveOrder: state.game.moveOrder,\n        movesHistory: state.game.history,\n        gameMode: state.game.gameMode,\n    })\n\nconst mapDispatch = {\n    turn, endGame, updateIneffectiveMoves, surrender\n}\n\nconst botConnector = connect(mapState, mapDispatch)\n\ntype BotProps = ConnectedProps<typeof botConnector>\n\nclass ClientEngine extends React.Component<BotProps, IBestMove> {\n    maxDepth = 6\n    componentDidMount() {\n        console.log('created', this.props)\n    }\n\n    componentDidUpdate(prev: BotProps, prevState: IBestMove) {\n        const {moveOrder, movesHistory, currentPosition, gameMode, engineColor} = this.props\n        if (gameMode === 'isPlaying' && prev.gameMode !== 'isPlaying') {\n            console.log('new game', this.props, bms.evaluationStarted)         \n            const engineMove = moveOrder.pieceOrder === engineColor\n            bms.resetProps(this.getSeekerProps())\n            if (engineMove) {\n                const props = {history: movesHistory, cP: currentPosition}\n                setTimeout(() => bms.setActualMovesBranchAfterMove(props), AnimationDuration)\n            }\n        }\n        if (moveOrder.pieceOrder !== engineColor) return        \n        if (prev.movesHistory.length !== movesHistory.length) {\n            if (moveOrder.pieceOrder === engineColor) {\n                console.log('start engine', this.props)\n                if (this.props.gameMode === 'isPlaying') {\n                    const props = {history: movesHistory, cP: currentPosition}\n                    bms.setActualMovesBranchAfterMove(props)\n                }\n            } else {\n                console.log('stop engine', this.props)\n                bms.startEvaluation(false)\n            }\n        }\n    }\n\n    getSeekerProps = (): ISeekerProps => {\n        return {\n            bestMoveCB: this.getMoveCB,\n            maxDepth: this.maxDepth,\n            engineColor: this.props.engineColor,\n            evaluationStarted: true,\n            game: true\n        }\n    }\n\n    setMaxDeep = (deep: number) => {\n        this.maxDepth = deep\n    }\n\n    getMoveCB = (move: {move: string, position: IBoardToGame, takenPices?: string[]}) => {\n        const {surrender, endGame, engineColor, gameMode} = this.props\n        if (move.move === 'surrender') {\n            surrender(engineColor)\n        } else if (!move.move) {\n            endGame('noMoves')\n        } else if (!!move && gameMode === 'isPlaying') {\n            this.compleateMove(move)\n        } \n    }\n\n    passProps = () => {\n        return {\n            history: this.props.movesHistory,\n            currentPosition: this.props.currentPosition,\n            engineMove: this.props.moveOrder.pieceOrder === this.props.engineColor\n        }\n    }\n\n    compleateMove(move:{move: string, position: IBoardToGame, takenPices?: string[]}) {\n        const {moveOrder: oldOrder, turn, white, black, currentPosition} = this.props\n        const moveOrder = mmr.getNewOrder({moveOrder: oldOrder, white, black})\n        // console.log('old oreder', moveOrder, 'new order', nMoveOrder, currentPosition)\n        if (move.move.includes(':')) {\n            const takenPieces = mmr.getCapturedTowers(move.move.split(':'), currentPosition)\n            const moveToSave = {...move, takenPieces}\n            turn({moveToSave, moveOrder: moveOrder})\n        } else {\n            turn({moveToSave: move, moveOrder: moveOrder})\n        }        \n    }\n\n    render() {\n        return null\n    }\n}\n\nexport const ClientBotEngine = botConnector(ClientEngine)\n","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\n\nimport { \n    TowerConstructor,\n    TowerType,\n    IRef,\n    TowerTouched,\n    CellsMap,\n    TowersMap,\n    IBoardProps,\n    IGameBoard,\n    IMMRResult,\n} from '../../store/app-interface'\nimport { endGame, updateIneffectiveMoves } from '../../store/game/actions'\nimport {\n    checkMoveTargetCell,\n    possibleOutOfMandatory,\n    compareMaps,\n    copyMap,\n} from '../../game-engine/gameplay-helper-fuctions'\nimport { IRootState } from '../../store/rootState&Reducer'\nimport {AnimationDuration} from '../../constants/gameConstants'\nimport tur from '../../game-engine/update-towers-functions'\nimport mmr from '../../game-engine/mandatory-move-resolver'\nimport  TowerComponent from '../../game-components/tower/CheckerTower'\nimport { ClientBotEngine } from '../../game-engine/CientEngine'\nimport { Board } from '../../game-components/board/Board'\nimport { turn, updateBoardState } from '../../store/board/actions'\nimport {finishGameSetup} from '../../store/gameOptions/actions'\n\n\nconst mapState = (state: IRootState) => ({\n    gameOptions: state.gameOptions,\n    game: state.game,\n    name: state.user.name,\n    positionsTree: state.board.positionsTree,\n    app: state.app,\n    board: state.board,\n    boardOptions: state.boardOptions,\n})\n\nconst mapDispatch = {endGame, turn, updateIneffectiveMoves, updateBoardState, finishGameSetup}\n\nconst gameConnector = connect(mapState, mapDispatch)\ntype GameProps = ConnectedProps<typeof gameConnector>\n\nexport class GameClass extends React.Component<GameProps, IGameBoard> {\n    private boardRef: IRef<HTMLDivElement> = React.createRef();\n    mmr = mmr\n    tur = tur\n    \n    componentDidMount() {\n        if (!window) return\n        const {game: {history}, board, boardOptions, updateBoardState} = this.props\n        console.log('created with state:', this.props.board)\n        this.tur.setCalBack(updateBoardState)\n        if (history.length) {\n            const towers = this.tur.updateTowersToBoard(board.currentPosition) as TowersMap\n            const _board = {...board, towers}\n            this.tur.updateCellsPosition(_board, boardOptions, this.boardRef.current!);\n        } else {\n            this.tur.updateCellsPosition(board, boardOptions, this.boardRef.current!);\n        }\n    }\n    componentWillUnmount() {\n        // this.props.finishGameSetup(false)\n    }\n    \n    shouldComponentUpdate(prevProps: GameProps, prevState: IGameBoard) {\n        const cond1 = JSON.stringify(prevProps) !== JSON.stringify(this.props) \n        return cond1 || compareMaps(prevProps.board.towers, this.props.board.towers)\n    }\n\n    componentDidUpdate(prevProps: GameProps) {\n        const {\n            game: {history, moveOrder: {playerTurn}, gameMode},\n            name,\n            app,\n            board,\n            boardOptions\n        } = this.props\n        const histLength = history.length\n        if (prevProps.game.history.length !== histLength && playerTurn === name) {\n            console.log('updated', this.props.board, this.props.game)\n            this.makePremoveAction(history[history.length - 1])  \n        }\n        if (prevProps.game.gameMode !== 'isPlaying' && gameMode === 'isPlaying') {\n            console.log('new game started', this.props)\n            this.tur.updateCellsPosition(board, boardOptions, this.boardRef.current!)\n        }\n        if (JSON.stringify(app.windowSize) !== JSON.stringify(prevProps.app.windowSize)) {\n            this.tur.updateCellsPosition(board, boardOptions, this.boardRef.current!)\n        }\n    }\n\n    makePremoveAction = (opponentMove: string) => {\n        const {\n            game: {moveOrder: {pieceOrder}},\n            endGame,\n            updateBoardState,\n            board: {currentPosition},\n        } = this.props\n        const mandatoryMoves = this.mmr.lookForMandatoryMoves(pieceOrder, currentPosition)\n        if (!mandatoryMoves.length && !this.mmr.lookForAllPosibleMoves(pieceOrder, currentPosition).length) {\n            return setTimeout(() => endGame('noMoves'), AnimationDuration)\n        }\n        updateBoardState({\n            mandatoryMoves,\n            mandatoryMoveStep: 0,\n            mouseDown: false,\n            moveDone: false\n        })\n    }\n\n    makePlayerMandatoryMoveStep = (to: string) => {\n        const {mandatoryMoves, mandatoryMoveStep, towerTouched} = this.props.board\n        const {game, turn, board, updateBoardState, gameOptions: {gameVariant}} = this.props\n        const from = towerTouched!.key\n        const fitMoves = mandatoryMoves!.filter((m: IMMRResult) => m.move.includes(`${from}:${to}`))\n        if (fitMoves[0].move.split(':').length === 2 + (mandatoryMoveStep as number)) {\n            const moveProps = {moveToSave: fitMoves[0], moveOrder: this.mmr.getNewOrder(game)}\n            const takenPieces = fitMoves[0].takenPieces!\n            const tP = gameVariant === 'towers' ? [takenPieces![mandatoryMoveStep]] : takenPieces\n            let towers = this.tur.updateTowersOnMandatoryMoveStep(from, to, board, tP, true)\n            console.log('towers;', towers)\n            updateBoardState({\n                mandatoryMoves: [] as unknown as IMMRResult[],\n                mandatoryMoveStep: 0,\n                towerTouched: null as unknown as TowerTouched,\n                towers,\n                lastMoveSquares: moveProps.moveToSave.move.split(':'),\n                currentPosition: moveProps.moveToSave.position,\n                mouseDown: false,\n                moveDone: true,\n            })\n            turn(moveProps)\n        } else {\n            const tP = fitMoves[0].takenPieces![mandatoryMoveStep]\n            updateBoardState({\n                mandatoryMoves: fitMoves,\n                mandatoryMoveStep: mandatoryMoveStep as number + 1,\n                towerTouched: null as unknown as TowerTouched,\n                towers: this.tur.updateTowersOnMandatoryMoveStep(from, to, board, [tP]),\n                lastMoveSquares: fitMoves[0].move.slice(mandatoryMoveStep as number + 1).split(':'),\n                mouseDown: false,\n            })\n        }\n    }\n\n    handleMouseUp = (event: any) => {\n        const {\n            towerTouched,\n            cellSize,\n            moveDone,\n            mandatoryMoves,\n            currentPosition\n        } = this.props.board as IGameBoard\n        const { board, game: {moveOrder, white, black}, turn} = this.props\n        if (!towerTouched || moveDone) {\n            return\n        }\n        const reversed = this.props.boardOptions.reversedBoard\n        const {clientX, clientY} = event.type === 'touchend' ? event.changedTouches['0'] : event\n        const to = checkMoveTargetCell({x: clientX, y: clientY}, towerTouched.posibleMoves, cellSize, this.boardRef)\n        const cancelProps = {...board, reversed}\n        if (!to) {\n            this.tur.cancelTowerTransition(cancelProps)\n        } else {\n            const from = towerTouched.key\n            if (mandatoryMoves?.length) {\n                this.makePlayerMandatoryMoveStep(to)\n            } else {\n                this.tur.finalizeSimpleMove(from, to, board, reversed)\n                const props =  {moveOrder, white, black, currentPosition}\n                const moveProps = this.mmr.getPropsToMakeFreeMove(from, to, props)\n                turn(moveProps)\n            }\n        }\n    }\n    \n    handleMouseMove = (event: any) => {\n        const {board: {towerTouched, moveDone, mouseDown}, updateBoardState} = this.props\n        if (!towerTouched || moveDone || !mouseDown) {\n            return\n        }\n        const {key, startCursorPosition: SCP, startTowerPosition: STP} = towerTouched;\n        const {clientX, clientY} = event.type === 'touchmove' ? event.changedTouches['0'] : event\n        const towers = copyMap(this.props.board.towers)\n        const tower = towers.get(key)! as TowerConstructor\n        const newPosition = {x: STP.x + clientX - SCP.x, y: STP.y + clientY - SCP.y}\n        const currentPosition = tower.positionInDOM!\n        tower.positionInDOM = newPosition\n        const deltaX = Math.abs(currentPosition.x - newPosition.x)\n        const deltaY = Math.abs(currentPosition.y - newPosition.y)\n        \n        if ( deltaX + deltaY >= 6) {\n            towers.set(key, tower)\n            updateBoardState({towers})\n        }\n    }\n\n    handleMouseDown = (event: any) => {\n        const {game: {moveOrder: {pieceOrder}}, board, updateBoardState} = this.props\n        const {mandatoryMoves, cellsMap, towers, currentPosition} = board\n        if (this.modeRestrictions()) return\n        const {target, clientX, clientY} = event.type === 'touchstart' ? event.changedTouches['0'] : event\n        const classList = (target as HTMLDivElement).classList\n        if (!(classList.contains('checker-tower') && classList.contains(pieceOrder))) return\n        const towerKey = (target as HTMLDivElement).getAttribute('data-indexes') as string\n        const tower = towers.get(towerKey)!\n        if (!tower) {\n            console.error(towerKey, board)\n            return\n        }\n        let posibleMoves: CellsMap\n        if (mandatoryMoves?.length) {\n           posibleMoves = possibleOutOfMandatory(this.props.board, towerKey)\n        } else {\n            posibleMoves = tower.currentType === TowerType.m \n            ? this.mmr.manTowerFreeMoves(tower, currentPosition, cellsMap)\n            : this.mmr.kingTowerFreeMoves(towerKey, currentPosition, cellsMap)\n        }\n        if (!posibleMoves.size) {\n            // sound\n            return\n        }\n        const towerTouched: TowerTouched = {\n            key: towerKey,\n            posibleMoves,\n            startCursorPosition: {x: clientX, y: clientY},\n            startTowerPosition: tower.positionInDOM!,\n            towerColor: tower.currentColor,\n            towerType: tower.currentType as TowerType\n        }\n        updateBoardState({towerTouched, mouseDown: true})\n    }\n\n    modeRestrictions = (): boolean => {\n        const {game: {moveOrder: {playerTurn}, gameMode}, name, board: {moveDone, animationStarted}} = this.props\n        if (gameMode === 'isPlaying') {\n            return playerTurn !== name || moveDone || animationStarted\n        }\n        return true\n    }\n\n    render() {\n        const {towers, towerTouched, mandatoryMoves, mandatoryMoveStep, lastMoveSquares} = this.props.board\n        const {boardOptions, game: {gameMode}} = this.props\n        // console.log(towers)\n        const posibleMoves = towerTouched?.posibleMoves\n        const BoardProps = {boardOptions, posibleMoves, lastMove: lastMoveSquares} as IBoardProps\n        const mandatoryTowers = (mandatoryMoves || []).map(m => m.move.split(':')[mandatoryMoveStep || 0])\n        const {boardSize, boardTheme} = boardOptions\n        const WrapperClass = `board__wrapper ${boardTheme} h${boardSize}v${boardSize}`;\n        const Towers = Array.from(towers.values()).map((props: TowerConstructor, i: number) => {\n            const mt = gameMode === 'isPlaying' ? mandatoryTowers.includes(props.onBoardPosition) : false\n            return <TowerComponent {...props} key={props.onBoardPosition} mandatory={mt} />\n        })\n        return (\n            <>\n                <section\n                    onMouseMove={this.handleMouseMove}\n                    onMouseUp={this.handleMouseUp}\n                    onMouseDown={this.handleMouseDown}\n                    onTouchStart={this.handleMouseDown}\n                    onTouchMove={this.handleMouseMove} \n                    onTouchEnd={this.handleMouseUp}\n                    className={WrapperClass}\n                    ref={this.boardRef}\n                >   \n                    {Towers}\n                    <Board {...BoardProps}/>\n                </section>\n                {this.props.gameOptions.rivalType === 'PC' && <ClientBotEngine />}\n            </>\n        )\n    }\n}\n\nexport const GameBoard = gameConnector(GameClass) \n","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\n\nimport { IRootState } from '../../../store/rootState&Reducer'\nimport {\n    setTiming, \n    setPlayerColor, \n    setOpponentType, \n    setGameVariant,\n    findRival,\n    setGameType,\n    setRivalLevel,\n} from '../../../store/gameOptions/actions'\nimport { I18n } from '../../../assets/i18n'\n\nimport { RivalType, PieceColor, GameVariants, GameType } from '../../../store/app-interface'\nimport { StandartTiming } from '../../../constants/gameConstants'\n\n\nimport './presetGameForm.scss'\n\n\nconst gameMapState = (state: IRootState) => ({\n    language: state.user.language,\n    gameType: state.gameOptions.gameType\n})\n\nconst gameMapDispatch = {\n    setGameType\n}\n \nconst gameTypeConnector = connect(gameMapState, gameMapDispatch)\n\nconst RivalVariant:React.FC<ConnectedProps<typeof gameTypeConnector>> = (props) => {\n    const {setGameType, gameType} = props\n    // const i18n = I18n[language.slice(0, 2)]\n    const handleSelectOpponentVariant = (e: React.MouseEvent) => {\n        e.preventDefault()\n        const target = e.target as HTMLButtonElement\n        setGameType(target.value as GameType)\n    }\n    const buttonClass = (value: GameType) => (`opponent-variant__b ${gameType === value ? 'actual' : ''}`)\n    const buttonTitle = (value: GameType) => {\n        switch(value) {\n            case('ranked'): \n                return 'ranked game'\n            case('casual'): {\n                return 'casual game'\n            }\n            case ('tournament'): {\n                return 'Service is not available for now'\n            }\n            default:\n                return ''\n        }\n    }\n return (\n    <div className=\"opponent-variant\" onClick={handleSelectOpponentVariant}>\n        <button\n            title={buttonTitle('ranked')}\n            className={buttonClass('ranked')}\n            type=\"button\"\n            value=\"ranked\"\n        >\n            Ranked\n        </button>\n        <button\n            title={buttonTitle('tournament')}\n            className={buttonClass('tournament')}\n            type=\"button\"\n            value=\"tournament\"\n        >\n            Tournament\n        </button>\n        <button\n            title={buttonTitle('casual')}\n            className={buttonClass('casual')}\n            type=\"button\"\n            value=\"casual\"\n        >\n            Casual\n        </button>\n    </div>\n    )\n}\n\nexport const RivalVariantComponent = gameTypeConnector(RivalVariant)\n\n// timing component\nconst timingMapState = (state: IRootState) => ({\n    timing: state.gameOptions.timing\n})\n\nconst timingMapDispatch = {\n    setTiming\n}\n \nconst timingConnector = connect(timingMapState, timingMapDispatch)\n\nconst Timing = (props: ConnectedProps<typeof timingConnector>) => {\n    const {timing: {timeToGame, adds}, setTiming} = props\n    const handleSelectTime = (e: React.MouseEvent) => {\n        e.preventDefault()\n        const values = (e.target as HTMLButtonElement).value.split(':').map(i => parseInt(i))\n        setTiming({timeToGame: values[0], adds: values[1]})\n    }\n\n    return (\n        <div className=\"timing-wrapper\" onClick={handleSelectTime}>\n            {StandartTiming.map((t: number[], i: number) => {\n                const Class = t[0] === timeToGame && t[1] === adds ? 'timing-menu-item actual' : 'timing-menu-item'\n                return <button \n                            title={\"time limit: minuts / add per move: seconds\"} \n                            key={i} \n                            className={Class}\n                            type=\"button\"\n                            value={t.join(':')}\n                        >\n                            {`${t[0]} / ${t[1]}`}\n                        </button>\n            })}\n        </div>\n    )\n}\n\nexport const TimingComponent = timingConnector(Timing)\n\n\n// pc level component\nconst levelMapState = (state: IRootState) => ({\n    level: state.gameOptions.rivalLevel\n})\n\nconst levelMapDispatch = {\n    setRivalLevel\n}\n \nconst levelConnector = connect(levelMapState, levelMapDispatch)\n\nconst Level = (props: ConnectedProps<typeof levelConnector>) => {\n    const {level, setRivalLevel} = props\n\n    return (\n        <div className=\"level-wrapper\" >\n            {[1,2,3,4,5,6,7,8,9].map((i: number) => {\n                const Class = level === i ? 'level-menu-item actual' : 'level-menu-item'\n                return (\n                    <button \n                    onClick={() => setRivalLevel(i)}\n                        title={\"Choose engine level\"} \n                        key={i} \n                        className={Class}\n                        type=\"button\"\n                        value={i}\n                    >\n                        {i}\n                    </button>\n                )\n            })}\n        </div>\n    )\n}\n\nexport const LevelComponent = levelConnector(Level)\n\n\nconst gameVariantMapState = (state: IRootState) => ({\n    gv: state.gameOptions.gameVariant\n})\n\nconst gameVariantMapDispatch = {\n    setGameVariant\n}\n \nconst gameVariantConnector = connect(gameVariantMapState, gameVariantMapDispatch)\n\nconst GameVariant = (props: ConnectedProps<typeof gameVariantConnector>) => {\n    const {gv, setGameVariant} = props\n\n    const handleSelect = (e: any) => {\n        e.preventDefault()\n        const target = e.target as HTMLSelectElement\n        setGameVariant(target.value as GameVariants)\n    }\n\n    return (\n        <select \n            title={\"select game\"}\n            className=\"game-variant\"\n            name=\"gameVariant\"\n            defaultValue={gv}\n            onChange={handleSelect}\n        >\n            <option value=\"towers\">{'Play Towers'}</option>\n            <option value=\"international\">{'Play Internstional'}</option>\n            <option value=\"russian\">{'Play Russian'}</option>\n        </select>\n    )\n}\n\nexport const GameVariantComponent = gameVariantConnector(GameVariant)\n\n// color presets \nconst colorMapState = (state: IRootState) => ({\n    color: state.gameOptions.playerColor\n})\n\nconst colorMapDispatch = {\n    setPlayerColor\n}\n\nconst colorConnector = connect(colorMapState, colorMapDispatch)\n\nconst PlayerColorPreset = (props: ConnectedProps<typeof colorConnector>) => {\n    const { color, setPlayerColor } = props\n    const handleSelectColor = (e: React.MouseEvent) => {\n        e.preventDefault()\n        const target = e.target as HTMLButtonElement\n        if (!target.classList.contains('select-color')) {\n            return\n        }        \n        setPlayerColor(target.value as PieceColor | 'random')\n    }\n\n    return (\n        <div className=\"select-color-wrapper\" onClick={handleSelectColor}>\n            <button\n                title=\"play white pieces\"\n                className={`select-color${color === PieceColor.w ? ' active' : ''}`}\n                type=\"button\" value={PieceColor.w}\n            ></button>\n            <button\n                title=\"play random color pieces\"\n                className={`select-color${color === 'random' ? ' active' : ''}`}\n                type=\"button\" \n                value=\"random\"\n            ></button>\n            <button\n                title=\"play black pieces\"\n                className={`select-color${color === PieceColor.b ? ' active' : ''}`}\n                type=\"button\"\n                value={PieceColor.b}\n            ></button>\n        </div>\n    )\n}\n\n// opponent type component\nconst rivalTypeMapState = (state: IRootState) => ({\n    rivalType: state.gameOptions.rivalType,\n    gameType: state.gameOptions.gameType\n})\n\nconst rivalTypeMapDispatch = {\n    setOpponentType,\n    setGameType\n}\n \nconst rivalTypeConnector = connect(rivalTypeMapState, rivalTypeMapDispatch)\n\nconst RivalTypeSelector = (props: ConnectedProps<typeof rivalTypeConnector>) => {\n    const {rivalType, setOpponentType, gameType, setGameType} = props\n\n    const handleSelect = (e: any) => {\n        e.preventDefault()\n        const target = e.target as HTMLSelectElement\n        setOpponentType(target.value as RivalType)\n        if (target.value === 'PC' && gameType === 'ranked') {\n            setGameType('casual')\n        }\n    }\n\n    return (\n        <select \n            title={\"select opponent type\"}\n            className=\"rival-type\"\n            name=\"rivalType\"\n            defaultValue={rivalType}\n            onChange={handleSelect}\n        >\n            <option value=\"player\">{'VS Player'}</option>\n            <option value=\"PC\">{'VS Computer'}</option>\n        </select>\n    )\n}\n\nconst OpponentTypeSelectorC = rivalTypeConnector(RivalTypeSelector)\n\n// custom timing presets\nconst customTimingMapState = (state: IRootState) => ({\n    timeToGame: state.gameOptions.timing.timeToGame,\n    adds: state.gameOptions.timing.adds\n})\n\nconst customTimingMapDispatch = {\n    setTiming\n}\n\nconst customTimingConnector = connect(customTimingMapState, customTimingMapDispatch)\n\ntype CTP = ConnectedProps<typeof customTimingConnector>\n\nexport class CustomTimingPreset extends React.Component<CTP, {limit: number, adds: number, open: boolean}> {\n    constructor(props: CTP) {\n        super(props)\n        this.state = {\n            limit: props.timeToGame,\n            adds: props.adds,\n            open: false\n        }\n    }\n    componentDidUpdate(prev: CTP) {\n        const {timeToGame, adds} = this.props\n        const ST = StandartTiming.map(t => t.join('/')).includes(`${timeToGame}/${adds}`)\n        if (timeToGame !== prev.timeToGame || adds !== prev.adds) {\n            if (!this.state.open && !ST) {\n                this.setState({open: true})\n            } else if (this.state.open && ST) {\n                this.setState({open: false})\n            }\n            this.setState({limit: timeToGame, adds})\n        }\n    }\n\n    handleClick:  React.MouseEventHandler<HTMLDivElement> = (e: React.MouseEvent) => {\n        e.preventDefault()\n        const target = e.target as Element\n        if (target.classList.contains('time-range')) {\n            return\n        }\n        if (target.classList.contains('custom-timing__values') && this.state.open) {\n            this.setState({open: false})\n        }\n        if (target.classList.contains('custom-timing')) {\n            this.setState({open: !this.state.open})\n        }\n    }\n\n    handleChange = (e: React.ChangeEvent) => {\n        e.preventDefault()\n        const target = e.target as HTMLInputElement\n        console.log(target.value)\n        if (target.name === 'lim') {\n            this.setState((state) => ({...state, limit: parseInt(target.value)}))\n        }\n        if (target.name === 'adds') {\n            this.setState({adds: parseInt(target.value)})\n        }\n    }\n\n    handleBlur = (e: React.FocusEvent) => {\n        const {limit, adds} = this.state\n        e.preventDefault()\n        this.props.setTiming({timeToGame: limit, adds})\n    }\n\n    render() {\n        const {open, limit, adds} = this.state\n        console.log(this.state)\n        return (\n            <div className={`custom-timing ${open ? 'open' : 'close'}`} onClick={this.handleClick}>\n                <p className=\"custom-preset-label\">\n                    <span>Custom Timing</span>\n                </p>\n                <div className=\"custom-timing__menu\">\n                    <input\n                        onBlur={this.handleBlur}\n                        onChange={this.handleChange}\n                        className=\"time-range\"\n                        name=\"lim\"\n                        type=\"range\" min=\"0\"\n                        step=\"1\"\n                        max=\"60\"\n                        value={limit}\n                    ></input>\n                    <div className=\"custom-timing__values\">{` ${limit} / ${adds} `}</div>\n                     <input\n                        onBlur={this.handleBlur}\n                        onChange={this.handleChange}\n                        className=\"time-range\"\n                        name=\"adds\"\n                        type=\"range\" min=\"0\"\n                        step=\"1\"\n                        max=\"60\"\n                        value={adds}\n                    ></input>\n                </div>\n            </div>\n        )\n    }\n    \n}\n\nexport const ColorPreset = colorConnector(PlayerColorPreset)\n\nexport const CustomTiming = customTimingConnector(CustomTimingPreset)\n\n\nconst mapState = (state: IRootState) => ({\n    waitingRival: state.gameOptions.waitingRival,\n    language: state.user.language,\n    rivalType: state.gameOptions.rivalType\n})\n\nconst mapDispatch = {\n    setTiming, setPlayerColor, findRival\n}\n \nconst presetGameConnector = connect(mapState, mapDispatch)\n\nconst PresetGameForm = (props: ConnectedProps<typeof presetGameConnector>) => {\n    const {waitingRival, findRival, language, rivalType} = props\n    const i18n = I18n[language.slice(0, 2)]\n    const className = `preset-game${waitingRival ? ' hidden' : ''}`\n    return (\n        <div className={className}>\n            <button className=\"new-game\" type=\"button\" value=\"new_game\" onClick={findRival}>{i18n.newGame}</button>\n            <RivalVariantComponent />\n            <div className=\"game-type-wrapper\">\n                <GameVariantComponent />\n                <OpponentTypeSelectorC />\n            </div>\n            {rivalType !== 'PC' ? <TimingComponent /> : <LevelComponent />}\n            <CustomTiming />\n            <ColorPreset />\n        </div>\n    )\n}\n\nexport const PresetGame = presetGameConnector(PresetGameForm)\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { timeToString } from '../common/helpers/time-to-string'\nimport { IRootState } from '../store/rootState&Reducer'\n\n\nexport const PlayerTimer = (props: {timeOf: string}) => {\n    const state = useSelector((state: IRootState) => ({\n        clock: state.clock[`${props.timeOf}Clock` as 'whiteClock' | 'blackClock'],\n        gameConfirmed: state.game.gameConfirmed,\n        pcGame: state.gameOptions.rivalType === 'PC'\n    }))\n    const {clock: {timeToFirstMove, timeToGame}, gameConfirmed, pcGame} = state\n    const [strTime, setStrTime] = useState({min: '', sec: ''})\n    let className = `${props.timeOf}-time`\n    useEffect(() => {\n        const time = gameConfirmed ? timeToGame: timeToFirstMove as number\n        setStrTime(timeToString(time))\n    }, [gameConfirmed, timeToFirstMove, timeToGame])\n    if (pcGame) {\n        return null\n    } \n    return (\n        <div className=\"clock-and-name\">\n            <div className={className}>{`${strTime.min}: ${strTime.sec}`}</div>\n        </div>\n    \n    )\n}\n","export  const timeToString = (time: number) => {\n    let min = Math.floor(time / 60).toString()\n    let sec = (time % 60).toString()\n    sec = sec.length < 2 ? `0${sec}` : sec\n    min = min.length < 2 ? `0${min}` : min\n    return {min, sec}\n}","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport {cancelRivalWaiting} from '../../store/gameOptions/actions'\nimport { IRootState } from '../../store/rootState&Reducer';\nimport './waiting-rival.scss';\n\n// spinner\nconst spinnerDispatchMap = {cancelRivalWaiting}\nconst spinnerStateMap = (state: IRootState) => ({waitingRival: state.gameOptions.waitingRival})\n\nconst connector = connect(spinnerStateMap, spinnerDispatchMap)\n\nconst WaitingRival: React.FC<ConnectedProps<typeof connector>> = props => {\n    \n    if (!props.waitingRival) return null\n    return (\n        <> \n            <div className=\"waiting-rival-spinner\" onClick={() => props.cancelRivalWaiting()}>\n                <div title=\"cancel\" className=\"logo\"></div>\n                <span className=\"material-icons\">cancel</span>\n            </div>\n            <Timer />\n            <div className=\"waiting-rival-back\"></div>\n        </>\n       \n    );\n};\n\nexport default connector(WaitingRival);\n\n\n\n\nclass Timer extends React.Component<{}, {timer: number}> {\n    interval: any\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            timer: 0\n        }\n    }\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState((s: {timer: number}) => ({...s, timer: s.timer + 1})), 1000)\n    }\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n    render() {\n        return <div className=\"waiting-rival-timer\">waiting time: {this.state.timer}</div>\n    }\n}\n","import React from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\n\nimport { IRootState } from '../../../store/rootState&Reducer'\nimport {requestRematch, findRival, finishGameSetup} from '../../../store/gameOptions/actions'\nimport {analyzeLastGame} from '../../../store/gameAnalysis/actions'\n\nimport './game-end-popup.scss'\nimport { useHistory } from 'react-router'\nimport { setGameMode } from '../../../store/game/actions'\n\n\nconst stateMap = (state: IRootState) => ({\n    gameResult: state.analyze.gameResult,\n    gameOver: state.game.gameMode === 'isOver',\n})\n\nconst dispatchMap = {\n    requestRematch,\n    findRival,\n    finishGameSetup,\n    analyzeLastGame,\n    setGameMode\n}\n\nconst connestor = connect(stateMap, dispatchMap)\n\nconst GameEndPopup: React.FC<ConnectedProps<typeof connestor>> = (props) => {\n    const {\n        requestRematch,\n        findRival,\n        gameOver,\n        gameResult: {reason, winner, movesHistory},\n        gameResult: {playerColor},\n        finishGameSetup,\n        analyzeLastGame,\n        setGameMode\n    } = props\n      \n    const history = useHistory()\n    const win = winner && winner === playerColor\n    const notAbandonByPlayer = !(reason && reason.startsWith('abandon') && reason.includes(playerColor as string))\n    let message\n    if (!winner) {\n        message = 'Game canceled'\n    } else {\n        message = winner === 'draw' ? 'Draw' : `You ${win ? 'win' : 'lose'}`\n    }\n    const handleClick = (e: any) => {\n        setGameMode('isPreparing')\n        const classList = e.target.classList\n        const containClass = (cl: string) => classList.contains(cl)\n        if (containClass('rematch')) {\n            requestRematch()\n        } else if (containClass('new-rival')) {\n            findRival()\n        } else if (containClass('game-options')) {\n            finishGameSetup(false)\n        } else if (containClass('analyze-game')) {\n            analyzeLastGame(true)\n            history.push('/analysis')  \n        }\n    }\n    const popupHTML = (\n        <section className=\"game-end-popup\">\n            <header className={`popup-header ${win ? 'win-bg' : 'lose-bg'}`}>\n                <h4 className=\"popup-title\">{message}</h4> \n                <span className=\"material-icons\" onClick={() => setGameMode('isPreparing')}>cancel</span>\n            </header>\n            <div className=\"popup-body\">\n\n            </div>\n            <div className={`popup-footer ${win ? 'win-bg' : 'lose-bg'}`} onClick={handleClick}>\n                <button className=\"popup-button rematch\" type=\"button\">\n                    rematch\n                </button>\n                <button className=\"popup-button new-rival\" type=\"button\">\n                    new\n                </button>\n                <button className=\"popup-button game-options\" type=\"button\">\n                    options\n                </button>\n                {movesHistory \n                    ? <button className=\"popup-button analyze-game\" type=\"button\">\n                        analyze\n                    </button>\n                    : null\n                }\n            </div>\n        </section>\n    )\n    \n    return  (\n        <>\n            {\n                gameOver && notAbandonByPlayer ? popupHTML : null\n            }\n        </>\n       \n    ) \n}\n\nexport default connestor(GameEndPopup)\n","export const oppositColor = (color) => (color === PieceColor.w ? PieceColor.b : PieceColor.w)\n\n\n\nexport class TowerConstructor {\n    onBoardPosition;\n    currentColor;\n    wPiecesQuantity;\n    bPiecesQuantity;\n    positionInDOM;\n    currentType;\n    veiw;\n    mandatoryMove;\n    constructor(props) {\n        this.currentType = props.currentType || TowerType.m;\n        this.currentColor = props.currentColor;\n        this.wPiecesQuantity = props.wPiecesQuantity || (props.currentColor === PieceColor.w ? 1 : 0);\n        this.bPiecesQuantity = props.bPiecesQuantity || (props.currentColor === PieceColor.b ? 1 : 0);\n        this.positionInDOM = props.positionInDOM || {x: 0, y: 0};\n        this.onBoardPosition = props.onBoardPosition\n        this.veiw = props.veiw || 'face'\n        this.mandatoryMove = props.mandatoryMove || false\n    }\n}\n\nexport const PieceColor = {\n    w: 'white',\n    b: 'black',\n}\n\nexport const TowerType = {\n    m: 'man',\n    k: 'king'\n}\n\nexport const copyMap = (board) => {\n    const nm = new Map()\n    board.forEach((v, k) => {\n        if (typeof v === 'object') {\n            if (Array.isArray(v)) {\n                nm.set(k, [...v])\n            } else {\n                nm.set(k, {...v})\n            }\n        } else {\n            nm.set(k, v)\n        }\n    })\n    return nm\n}\n\nexport const copyObj = (board) => {\n    return JSON.parse(JSON.stringify(board))\n}\n\nexport const possibleOutOfMandatory = (state, key) => {\n    const posibleMoves = new Map()\n    const {mandatoryMoveStep: MS, mandatoryMoves, cellsMap } = state\n    const availableSteps = mandatoryMoves\n    .filter((m) => m.move.includes(key)).map((m) => m.move.split(':')[MS + 1])\n    availableSteps.forEach((step) => {\n        posibleMoves.set(step, cellsMap.get(step))\n    })\n    return posibleMoves\n}\n\nexport const compareMaps = (map1, map2) => {\n    return JSON.stringify([...map1.entries()]) !== JSON.stringify([...map2.entries()])\n}\n\nexport const filterArrayByLength = (arr) => {\n    const maxLength = arr.reduce((acc, val) => (acc > val.move.length ? acc : val.move.length), 0)\n    return arr.filter((val) => val.move.length === maxLength)\n}\n\nexport const crossDirections = (dir) => {\n    const directions = {}\n    directions[`${dir.includes('left') ? 'left' : 'right'}${dir.includes('Up') ? 'Down' : 'Up'}`] = true\n    directions[`${dir.includes('left') ? 'right' : 'left'}${dir.includes('Up') ? 'Up' : 'Down'}`] = true\n    return directions\n}\n \nexport function checkMoveTargetCell(pos, pM, cellSize, ref) {\n    const possibleCells =  pM.entries()\n    const size = cellSize\n    const boardRect = ref.current.querySelector('.board__body').getBoundingClientRect();\n    const [x, y] = [pos.x - boardRect.x, pos.y - boardRect.y]\n    const targetCell = [...possibleCells].filter((props) => {\n        const [cellX, cellY] = [props[1].x + size / 4, props[1].y + size / 4]\n        const distance = Math.sqrt(Math.pow((cellX - x), 2) + Math.pow((cellY - y), 2))\n        return distance < size\n    })[0]\n    if (targetCell) {\n        return targetCell[0]\n    }\n    return null\n}\n\nexport const checkIfNumberOfKingsChanged = (board1, board2) => {\n    const calcKings = (board) => Object.values(board).filter((cell) => \n        cell.tower && cell.tower.currentType === TowerType.k).length\n    return calcKings(board1) - calcKings(board2)\n}\n\nexport const convertToMovesHistory = (arr) => {\n    const result = []\n    for (let i = 0; i < arr.length; i += 2) {\n        result.push({white: arr[i], black: arr[i+1] || ''})\n    }\n    return result\n}\n\nexport function getCellSize(refElem, size) {\n    const boardHtmlRect = refElem.querySelector('.board__body').getBoundingClientRect();\n    const {width, left, right} = boardHtmlRect\n    const cellWidth = (width ? width:  left - right) / size;\n    return Math.round(cellWidth)\n}\n\nexport function checkIfBoardFitTowers(towers, board) {\n    let res = true\n    towers.forEach((tower, key) => {\n        const towerOnBoard = board[key].tower\n        if (tower.onBoardPosition !== towerOnBoard?.onBoardPosition\n            || tower.bPiecesQuantity !== towerOnBoard.bPiecesQuantity\n            || tower.wPiecesQuantity !== towerOnBoard.wPiecesQuantity\n            || tower.currentColor !== towerOnBoard.currentColor\n            || tower.currentType !== towerOnBoard.currentType) {\n                res = false\n                throw new Error(\"board do not fit towers\")\n            }\n    })\n    return res\n}\n\nconst GHF = {\n    checkIfBoardFitTowers,\n    getCellSize,\n    convertToMovesHistory,\n    checkIfNumberOfKingsChanged,\n    checkMoveTargetCell,\n    crossDirections,\n    copyObj,\n    copyMap,\n    oppositColor,\n    compareMaps,\n    filterArrayByLength,\n}\n\nexport default GHF\n","import { ConnectedProps, connect} from \"react-redux\"\nimport { Logo } from \"../../common/LogoIcon\"\nimport { \n    endGame,\n    declineDraw,\n    offerDraw,\n    cancelGame,\n    confirmStartGame,\n    setGameMode,\n    surrender\n} from \"../../store/game/actions\"\nimport {undoLastMove} from '../../store/board/actions'\nimport { findRival, finishGameSetup } from \"../../store/gameOptions/actions\"\nimport { IRootState } from \"../../store/rootState&Reducer\"\nimport { PieceColor } from \"../../game-engine/js-engine/gameplay-helper-fuctions\"\nimport { analyzeLastGame } from \"../../store/gameAnalysis/actions\"\nimport { useHistory } from \"react-router\"\n\nconst gameMenuMapState = (state: IRootState) => ({\n    drawOffered: state.game.rivalOfferedDraw,\n    gameConfirmed: state.game.gameConfirmed,\n    playerColor: state.game.playerColor,\n    gameMode: state.game.gameMode,\n    pcGame: state.gameOptions.rivalType === 'PC',\n    historyLength: state.game.history.length > 2\n})\n\nconst gameMenuMapDispatch = {\n    endGame,\n    declineDraw,\n    offerDraw,\n    cancelGame,\n    confirmStartGame,\n    findRival,\n    finishGameSetup,\n    setGameMode,\n    surrender,\n    undoLastMove,\n    analyzeLastGame,\n}\n\nconst gameMenuConnector = connect(gameMenuMapState, gameMenuMapDispatch)\n\nconst GameMenuComponent: React.FC<ConnectedProps<typeof gameMenuConnector>> = (props) => {\n    const history = useHistory()\n    const {\n        surrender,\n        endGame,\n        declineDraw,\n        drawOffered,\n        offerDraw,\n        gameConfirmed,\n        gameMode,\n        findRival,\n        finishGameSetup,\n        setGameMode,\n        cancelGame,\n        playerColor,\n        pcGame,\n        undoLastMove,\n        historyLength,\n        analyzeLastGame\n    } = props\n\n    const reason = playerColor === PieceColor.w ? `abandonedByWhite` : 'abandonedByBlack'\n\n    const handleCancelGame = (e: React.MouseEvent) => {\n        cancelGame()\n    }\n   \n    const handleDrawOffer = (e: React.MouseEvent) => {\n        e.preventDefault()\n        offerDraw()\n    }\n\n    const handleAnalizeGame = (e: React.MouseEvent) => {\n        if (gameMode === 'isPlaying') {\n            endGame(reason)\n            setGameMode('isAnalyzing')\n        }\n        analyzeLastGame(true)\n        history.push('/analysis')\n    }\n\n    const handleUndo = () => {\n        if (historyLength ) {\n            undoLastMove()\n        }\n    }\n\n    const handleResetGameOption = () => {\n        if (gameMode === 'isPlaying') {\n            endGame(reason)\n        }\n        finishGameSetup(false)\n       \n    }\n\n    const handleNewGame = () => {\n        if (gameMode === 'isPlaying') {\n            endGame(reason)\n        }\n        findRival()\n    }\n   \n    const undoClass = !historyLength ? \"game-menu__item hide-undo\" : \"game-menu__item\"\n    if (pcGame && gameConfirmed) {\n        return (\n            <ul className=\"game-menu\">\n                <li title=\"undo move\" className={undoClass} role=\"button\" onClick={handleUndo}>\n                    <i className=\"material-icons\">history</i>\n                </li>\n                <li title=\"new game\" role=\"button\" className=\"game-menu__item\" onClick={handleNewGame}>\n                    <Logo size={13} />\n                </li>\n                <li \n                    title=\"game options\" \n                    role=\"button\" className=\"game-menu__item\" \n                    onClick={handleResetGameOption}\n                >\n                    <i className=\"material-icons\">settings_applications</i>\n                </li>\n                <li title=\"analize game\" role=\"button\" className=\"game-menu__item\" onClick={handleAnalizeGame}>\n                    <i className=\"material-icons\">zoom_in</i>\n                </li>\n            </ul>\n        )\n    }\n\n    if (gameMode === 'isPlaying' && !gameConfirmed) {\n        return (\n            <ul className=\"game-menu\">\n                <li title=\"cancel game\" className=\"game-menu__item\" role=\"button\" onClick={handleCancelGame}>\n                    <i className=\"material-icons\">close</i>\n                </li>\n            </ul>\n        )\n    }\n\n    if (gameMode !== 'isPlaying') {\n        return (\n            <ul className=\"game-menu\">\n                <li title=\"new game\" role=\"button\" className=\"game-menu__item\" onClick={findRival}>\n                    <Logo size={13} />\n                </li>\n                <li \n                    title=\"game options\" \n                    role=\"button\" className=\"game-menu__item\" \n                    onClick={() => finishGameSetup(false)}\n                >\n                    <i className=\"material-icons\">settings_applications</i>\n                </li>\n                <li title=\"analize game\" role=\"button\" className=\"game-menu__item\" onClick={handleAnalizeGame}>\n                    <i className=\"material-icons\">zoom_in</i>\n                </li>\n            </ul>\n        )\n    }\n    \n    return ( \n        <ul className=\"game-menu\">\n            {!drawOffered\n                ? <>\n                    <li \n                        title=\"resign\"\n                        role=\"button\"\n                        className=\"game-menu__item\"\n                        onClick={() => surrender(playerColor)}\n                    >\n                        <i className=\"material-icons\">flag</i>\n                    </li>\n                    <li \n                        title=\"offer draw\"\n                        role=\"button\"\n                        className=\"game-menu__item\"\n                        onClick={handleDrawOffer}\n                    >\n                        <i className=\"offer_draw\">1/2</i>\n                    </li>\n                </>\n                : <>\n                    <li \n                        role=\"button\" \n                        title=\"accept draw\"\n                        className=\"game-menu__item\"\n                        onClick={() => endGame('drawByAgreement')}\n                    >\n                        <i className=\"material-icons\">thumb_up</i>\n                    </li>\n                    <li \n                        role=\"button\"\n                        title=\"decline draw\"\n                        className=\"game-menu__item\"\n                        onClick={() => declineDraw(false)}\n                    >\n                        <i className=\"material-icons\">thumb_down</i>\n                    </li>\n                </>\n            }\n        </ul>\n    )\n}\n\nexport const GameMenu = gameMenuConnector(GameMenuComponent)\n","import React from 'react'\nimport {connect, ConnectedProps, useSelector} from 'react-redux'\nimport { IRootState } from '../../store/rootState&Reducer'\nimport {PieceColor} from '../../store/app-interface'\n\nconst PlayerInfo = (props: {color: PieceColor}) => {\n    const {color} = props\n    const {onlineStatus, name, rating} = useSelector((state: IRootState) => state.game[color])\n    const rt = useSelector((state: IRootState) => state.gameOptions.rivalType) \n    const VSComputer = rt === 'PC'\n    const Color = `${(color as string)[0].toUpperCase()}${(color as string).substring(1)}`\n    return (\n        <div className=\"player-info\">\n            <h3>{Color}</h3>\n            {!VSComputer && <span className=\"player-status\">{onlineStatus}</span>}\n            <h4 className=\"player-name\">{name}</h4>\n            {!VSComputer && <span className=\"palyer-raiting\">{rating}</span>}\n        </div>\n    )\n}\n\nconst mapState = (state: IRootState) => ({\n    gv: state.gameOptions.gameVariant,\n    white: state.game.white,\n    black: state.game.black,\n    gt: state.gameOptions.gameType,\n    ot: state.gameOptions.rivalType,\n    ti: state.gameOptions.timing\n})\n\nconst mapDispatch = {\n    \n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype GameInfoProps = ConnectedProps<typeof connector>\n\nconst GameInfo: React.FC<GameInfoProps> = (props) => {\n    const {gv, gt, ot, ti} = props\n    const VSCompouter = ot === 'PC'\n    const gameType = VSCompouter ? 'casual' : gt\n    const timing = !VSCompouter ? `${ti.timeToGame} / ${ti.adds}` : ''\n    const gameVariant = `${gv[0].toUpperCase()}${gv.substring(1)}`\n    return (\n        <div className=\"game-info\">\n            <h2 className=\"game-info_header\">{gameVariant}&nbsp; draughts</h2>\n            <p className=\"game-info_type\">{gameType}&nbsp;{timing}</p>\n            <PlayerInfo color={PieceColor.w} />\n            <PlayerInfo color={PieceColor.b} />\n        </div>\n    )\n}\n\nexport default connector(GameInfo)\n","import React, {Suspense, useState} from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\n\nimport { SideBar } from '../../page-components/Sidebar'\nimport {GameBoard} from './GameBoard'\nimport Spinner from '../../page-components/spinners/Spinner'\nimport { IRootState } from '../../store/rootState&Reducer'\nimport { PresetGame} from './presetGameForm/PresetGameForm'\nimport { PlayerTimer } from '../../game-components/PlayerTimer'\nimport WaitingRival from '../../page-components/spinners/WatingRival'\nimport GameEndPopup from './gameEndPopup/GameEndPopup'\nimport { \n    endGame,\n    declineDraw,\n} from '../../store/game/actions'\nimport { oppositColor } from '../../game-engine/gameplay-helper-fuctions'\nimport { PieceColor } from '../../store/app-interface'\nimport { MovesHistory } from '../../game-components/moves-history/MovesHistory'\nimport { GameMenu } from './PlayerGameMenu'\nimport GameInfo from './GameInfo'\n\nimport './game-page.scss'\n\n\n// player bar\nconst PlayerGameBarMapState = (state: IRootState) => ({\n    name: state.user.name,\n})\n\nconst PlayerGameBarMapDispatch = {endGame, declineDraw}\n\nconst PlayerGameBarConnector = connect(PlayerGameBarMapState, PlayerGameBarMapDispatch)\n\ntype PGBProps = ConnectedProps<typeof PlayerGameBarConnector>\n\nconst PlayerGameBar: React.FC<PGBProps> = ({children, ...props}) => {\n    return <div className=\"player-game-bar\">\n                <h2>{props.name}</h2>\n                <GameMenu />\n            </div>\n}\n\nexport const PlayerGameBarComponent = PlayerGameBarConnector(PlayerGameBar)\n\n// opponent bar\nconst barMapState = (state: IRootState) => ({\n    rival: state.game.playerColor !== PieceColor.b ? state.game.black.name : state.game.white.name\n})\n\nconst barMapDispatch = {}\n\nconst RivalBarConnector = connect(barMapState, barMapDispatch)\n\ntype RivalBarProps = ConnectedProps<typeof RivalBarConnector>\n\nconst RivalGameBar: React.FC<RivalBarProps> = ({children, ...props}) => {\n    const [name] = useState(props.rival)\n    return <div className=\"opponent-game-bar\">\n                {children}\n                <h2>{name}</h2>\n            </div>\n}\n\nconst RivalGameBarComponent = RivalBarConnector(RivalGameBar)\n\n\nconst GPmapState = (state: IRootState) => ({\n    playerColor: state.game.playerColor,\n    gameSetupFinished: state.gameOptions.gameSetupFinished,\n    portrait: state.app.portrait,\n\n})\n\nconst GPConnector = connect(GPmapState, {})\n\ntype GPProps = ConnectedProps<typeof GPConnector>\n\nclass GamePage extends React.Component<GPProps, {}> {\n\n    shouldComponentUpdate(prevProps: GPProps) {\n        return JSON.stringify(prevProps) !== JSON.stringify(this.props)\n    }\n    render() {\n        const {portrait, playerColor, gameSetupFinished} = this.props\n        const GameBoardWithBars = portrait\n        ? <>\n            <main className=\"portrait\">\n                <RivalGameBarComponent>\n                    <PlayerTimer timeOf={oppositColor(playerColor as PieceColor)} />\n                </RivalGameBarComponent>\n                <GameBoard />\n                <PlayerGameBarComponent>\n                    <PlayerTimer timeOf={playerColor} />\n                </PlayerGameBarComponent>\n            </main>\n            <div className=\"bars-wrapper\">\n                <SideBar side=\"left\">\n                    <GameInfo />\n                </SideBar>\n                <SideBar side=\"right\">\n                    <MovesHistory />\n                </SideBar>\n            </div>\n        </>\n        : <>\n            <SideBar side=\"left\">\n                <GameInfo />\n            </SideBar>\n            <main className=\"landscape\">\n                 <GameBoard />\n            </main>\n            <SideBar side=\"right\">\n                <RivalGameBarComponent>\n                    <PlayerTimer timeOf={oppositColor(playerColor as PieceColor)} />\n                </RivalGameBarComponent>\n                <MovesHistory />\n                <PlayerGameBarComponent>\n                    <PlayerTimer timeOf={playerColor} />\n                </PlayerGameBarComponent>\n            </SideBar>\n        </> \n          \n        return (\n            <Suspense fallback={<Spinner />}>\n                <div className=\"game page noselect\" >             \n                    {\n                        gameSetupFinished ? GameBoardWithBars : <PresetGame />\n                    }\n                    <WaitingRival />\n                    <GameEndPopup />\n                </div>\n            </Suspense>\n        )\n    }\n} \n\nexport default GPConnector(GamePage)\n"],"sourceRoot":""}