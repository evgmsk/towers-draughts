{"version":3,"sources":["store/app-interface.ts","constants/gameConstants.ts","game-engine/gameplay-helper-fuctions.ts","store/game/types.ts","store/gameAnalysis/types.ts","store/gameOptions/types.ts","store/board/types.ts","game-engine/prestart-help-function-constants.ts","game-engine/update-towers-functions.ts","store/boardOptions/types.ts","assets/i18n.ts","page-components/spinners/Spinner.js","game-engine/common-fn-moves-resolver.ts","game-engine/king-mandatory-move-resolver.ts","game-engine/mandatory-move-resolver.ts","page-components/Sidebar.tsx","store/gameOptions/actions.ts","common/LogoIcon.tsx","assets/game-example.gif","pages/home/Home.tsx","AppRoutes.tsx","store/user/types.ts","page-components/MobileDropdownNav.tsx","page-components/Navbar.tsx","store/user/actions.ts","page-components/Header.tsx","assets/icons8-github.svg","store/app/types.ts","page-components/Footer.tsx","store/app/actions.ts","App.tsx","reportWebVitals.ts","store/game/reducers.ts","store/gameOptions/reducers.ts","store/user/reducer.ts","store/app/reducers.ts","store/clock/types.ts","store/clock/reducers.ts","store/gameAnalysis/reducers.ts","store/board/reducers.ts","store/boardOptions/reducers.ts","store/rootState&Reducer.ts","store/sagas/watcherGame.ts","store/sagas/watcherGamePresets.ts","store/sagas/watcherTimer.ts","store/sagas/watcherGameAnalysis.ts","store/sagas/watcherBoard.ts","store/sagas/sagaRoot.ts","store/index.ts","index.tsx"],"names":["TowerType","PieceColor","BoardNotation","Online","TowerConstructor","props","onBoardPosition","currentColor","wPiecesQuantity","bPiecesQuantity","positionInDOM","currentType","veiw","mandatoryMove","this","m","w","b","x","y","TopLegendValues","SideLegendValues","Array","fill","map","i","j","DefaultTime","BaseBoardSize","StandartTiming","PrestartTimeLimit","Interval","BaseCellSize","AnimationDuration","CellTowerRatio","sampleLink","RoutesPath","home","game","settings","analysis","stats","rules","auth","profile","RoutesTitle","analyze","defaultWhiteTowerCells8x8","defaultBlackTowerCells8x8","board8x8EmptyCells","defaultWhiteTowerCells","concat","defaultBlackTowerCells","filter","includes","board10x10EmptyCells","getDefaultBlackTowersCells","boardSize","getDefaultWhiteTowersCells","splitMove","move","split","oppositColor","color","copyMap","board","nm","Map","forEach","v","k","isArray","set","copyObj","Object","keys","reduce","acc","possibleOutOfMandatory","state","key","posibleMoves","MS","mandatoryMoveStep","mandatoryMoves","cellsMap","step","get","compareMaps","map1","map2","JSON","stringify","entries","filterArrayByLength","arr","maxLength","val","length","cont","push","ended","crossDirections","dir","directions","checkMoveTargetCell","pos","pM","cellSize","ref","possibleCells","size","boardRect","current","querySelector","getBoundingClientRect","targetCell","cellX","cellY","Math","sqrt","pow","checkIfNumberOfKingsChanged","board1","board2","calcKings","values","cell","tower","convertToMovesHistory","result","white","black","getCellSize","refElem","boardHtmlRect","width","left","right","cellWidth","round","GameActions","SET_MOVE_ORDER","SET_GAME_STARTED","MAKE_MOVE","CONFIRM_START_GAME","UPDATE_GAME_STATE","INEFFECTIVE_MOVE","SAVE_MOVE_TO_HISTORY","SET_PLAYER_MOVE_ORDER","SET_GAME","END_GAME","OFFER_DRAW","DECLINE_DRAW","RIVAL_OFFER_DRAW","SURRENDER","SET_PORTRAIT","SET_GAME_MODE","CANCEL_GAME","NEW_GAME_VS_PC","NEW_GAME_VS_PLAYER","CLEAR_HISTORY","GameAnalysisActions","ANALYZE_LAST_GAME","DOWNLOAD_GAME","SAVE_GAME_RESULT","SETTING_BOARD","UPDATE_POSITION","STEP_FORWARD","STEP_BACK","SAVE_POSITION","GO_TO_POSITION","CREATE_POSITION_TREE","UPDATE_ANALYSIS_STATE","EVALUATE_POSITION","SET_DEPTH","PLAY_MOVES","SET_START_POSITION","REMOVE_PIECE","START_NEW_LINE","MAKE_NEW_MOVE","GameOptionActions","CHOOSE_COLOR","SET_TIME_LIMIT","SET_TIME_ADDS","SET_GAME_TIMING","SET_RIVAL","SET_PLAYER","SET_GAME_VARIANT","SET_RIVAL_ONLINE_STATUS","SET_PLAYER_ONLINE_STATUS","SET_GAME_TYPE","SET_RIVAL_LEVEL","FIND_RIVAL","SET_RIVAL_TYPE","FINISH_GAME_SETUP","WAIT_RIVAL","CANCEL_RIVAL_WAITING","REMATCH_REQUEST","BoardActions","CREATE_GAME_BOARD","CREATE_SETUP_BOARD","CREATE_ANALYSIS_BOARD","UPDATE_BOARD_STATE","UPDATE_BOARD_SIZE","TURN","UPDATE_POSITION_TREE","UNDO_LAST_MOVE","createEmptyBoard","GameBoard","boardKey","neighbors","defineNeighborCells","createStartBoardToDraw","boardOptions","reversedBoard","currentPosition","createStartBoard","positionsTree","towers","createDefaultTowers","createCellsMap","animationStarted","moveDone","mouseDown","lastMoveSquares","createEmptyBoardForCustomPosition","createOutBoardTowers","createAnalysisBoard","defineCellDomPosition","reversed","topInd","slice","reverse","sideInd","indexOf","parseInt","updateCellsMap","newMap","topLegend","sideLegend","leftUp","leftDown","rightUp","rightDown","newOnBoardTower","DBTC","DWTC","defaultTowerProps","oBKey","tur","previousPosition","callBack","setCalBack","cb","calcPositionOutboardTowers","boardElem","document","boardHeight","height","towerWidth","dY","bottom","calcTowerPosition","cellPosition","towerElem","console","error","updateTowersPosition","_towers","updateCellsPosition","boardRef","newCellSize","newCellMap","newTowers","from","to","log","checkTowerTypeChanging","delete","towerTouched","last","GV","history","currentPositionKey","join","tP","isTowers","updateTowersAfterMoveAnimation","middlePieceKey","middlePiece","takenTower","cuptureTower","_tower","newMiddleTower","wT","BaseMoveResolver","BoardOptionActions","SET_GAME_BOARD_OPTIONS","REVERSE_BOARD","SET_BOARD_THEME","SET_BOARD_NOTATION","SET_BOARD_SIZE","I18n","en","shortMainTitle","mainTitle","newGame","submitLog","submitReg","logTitle","regTitle","logMess","regMess","modeButtonLog","modeButtonReg","labelPassword","labelNickname","submitButton","about","ru","Spinner","className","onClick","cancelRivalWaiting","title","setProps","getCapturedPieceKey","getInterval","c","Error","newTower","type","start","end","getMoveDirection","interval","nextCellKey","direction","startCellKey","diagonal","nextCell","preDirected","diagonals","availibleDirections","d","getDiagonal","MoveResolveCommons","lookForTowerFreeMoves","checkNeighborsIsEmpty","lookForKingFreeMoves","lookForAllPosibleMoves","moves","getFromToKeys","moveArr","repetition","lastIndexOf","makeMoveWithoutTakingPieces","_board","nextMoves","fromTower","whiteMove","checkLastLine","getBoardFromTowers","value","getNewOrder","newPieceOrder","moveOrder","pieceOrder","playerTurn","name","getPropsToMakeFreeMove","position","makeFreeMove","moveToSave","manTowerFreeMoves","cellNeighbors","towerLine","neighborLine","kingTowerFreeMoves","moveSteps","cellKey","makeMandatoryMove","nextMove","makeMandatoryMoveStep","newBoard","updateBoardOnMandatoryMoveStep","fN","moveLength","getCapturedTowers","diag","currentLine","getDiagonals","checkDiagonalForKingMove","KingMandatoryMoveResolver","checkFirstKingDiagonals","checkKingNextSteps","firstMove","takenPieces","_moves","checkDiagonalToMadatoryMove","cM","movesToCheckContinue","compleatedMoves","nextStepResult","checkNextMoveStepDirections","_m","startsWith","resultMoves","checkIfDiagonalNotFit","takenPiece","notTaken","nMove","lastCell","MRC","mmr","lookForAllMoves","lookForMandatoryMoves","checkMandatoryMoveNextStep","moveArray","exludedDirection","checkManDirection","checkMandatoryMoveNextSteps","mr","gameVariantMoveContinueRestriction","removeTakenPieces","checkKingMandatoryMoves","checkManMandatoryMoves","nBoard","startProps","checkManFristMandatoryStep","preMove","neighborCell","KMMR","SideBar","ClassName","side","children","setRivalLevel","payload","setPlayerColor","setOpponentType","setTiming","findRival","finishGameSetup","setGameVariant","requestRematch","setGameType","Logo","Home","language","useSelector","store","user","internalization","href","fallback","target","rel","src","gameExample","alt","GameAnalizePage","lazy","GamePage","Router","path","exact","React","memo","UserActions","MobileMenu","useState","dropdown","setDropdown","visible","setVisible","mobileMenuClass","createRef","handleClickOutside","ev","stopPropagation","elem","contains","useEffect","window","addEventListener","removeEventListener","e","preventDefault","setTimeout","mapDispatch","setLanguage","connector","connect","winWidth","app","windowSize","DuoLanguageSwitcher","lang","langs","blur","handleClick","useHistory","innerWidth","mobile","setMobile","isAuthLogo","logo","event","Header","AppActions","close","setWindowSize","setPortrait","token","portrait","gameMode","handleResize","innerHeight","abs","onClose","referrerPolicy","git","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","InitialGameState","gameConfirmed","gameStarted","playerColor","rivalOfferedDraw","ineffectiveMoves","InitialGameOptionsState","gameVariant","timing","timeToGame","adds","rivalType","rivalLevel","gameSetupFinished","waitingRival","gameType","InitialUserState","userId","rating","navigator","AppDefaultState","commonChat","gameChat","ClockActions","InitialClockState","whiteClock","timeToFirstMove","blackClock","InitialGameAnalysisState","gameResult","analyzeLastGame","settingPosition","movesMainLine","movesCurrentLine","lastMove","depth","evaluate","removePiece","startPosition","InitialBoardState","towerView","InitialBoardOptionsState","boardTheme","withOutLegend","lengendsInside","boardNotation","r","InitialState","gameOptions","clock","AppReducers","action","GM","UA","movesHistory","workerNewGameVSPlayer","workerNewGameVsPC","checkDraw","workerPlayerClockAfterMove","workerMove","workerGameEnd","workerSurrender","resolveEndGame","cancelGameWorker","watcherGame","put","GOA","select","random","BOA","gamePayload","delay","rival","numberOfKingsChanged","draw","winner","reason","PC","date","Date","analysisPayload","index","takeLatest","cancelRival","workerGameVariant","watcherPreGame","GA","waitingListKey","workerGameClock","workerStartClock","workerPreTicks","watcherTimer","workerUpdatePosition","workerStepForward","workerGoToPosition","workerPlayMoves","workerStepBack","workerSettingBoard","workerGameAnalysis","workerCurrentLine","workerMainLine","workerNewMove","workerStartPosition","watcherAnalysis","nextLastMove","nextPositionKey","newCurrentLine","updateTowersToBoard","nextIndex","movesLine","_positionsTree","newKey","currentPositoin","_positionTree","clear","paylaod","workerGameBoard","workerSetupBoard","workerBoardSize","workerAnalysisBoard","animateFreeMove","animateMandatoryTowerStep","animateMandatoryStep","animateMandatoryMove","workerTurn","workerUndo","watcherBoard","BA","relocateTower","newState","finalizeSimpleMove","totalSteps","capturedTowerKey","finalizeMandatoryMoveStep","isLast","pKey","boardProps","boardPayload","sagaRoot","all","watcherAnalsis","sagaMiddleware","createSagaMiddleware","storeFactory","data","middleware","composeWithDevTools","applyMiddleware","rootReducer","combineReducers","createStore","run","ReactDOM","render","StrictMode","getElementById","dispatch"],"mappings":"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","file":"static/js/main.ab3846c3.chunk.js","sourcesContent":["// app state\nexport interface IApp {\n    windowSize: {width: number, height: number}\n    portrait: boolean\n    theme?: string\n    message?: {content: string, exposition?: string}\n    commonChat: IMessage[]\n    gameChat: IMessage[]\n}\n\nexport interface IMessage {content: string, from: string, to: string, date: Date, emoji: number, }\n\nexport interface IUserState extends IUser{\n    name: string | null\n    token: string | null\n    userId: string | null\n    rating: number\n    language: string\n    notifications: [{[key: string]: any}]\n}\n\n// timer interfaces\nexport interface ITimer {\n    min: string;\n    sec: string;\n}\n\nexport interface IClock {\n    timeToGame: number\n    adds?: number \n    timeToFirstMove?: number\n}\n\nexport interface Timing {\n    timeToGame: number,\n    adds: number\n}\n\nexport interface IError {\n    message: string | null\n};\n\n// boardtodraw\nexport enum TowerType {\n    m = 'man',\n    k = 'king'\n}\n\nexport enum PieceColor {\n    b = 'black',\n    w = 'white'\n}\n\nexport enum BoardNotation {\n    r = 'chess',\n    i = 'international'\n}\n\nexport interface IBoardAndTowers extends IBoardToDraw {\n    lastMoveSquares: string[]\n    towerView: string,\n    currentPosition: IBoardToGame\n    mandatoryMoveStep: number\n    animationStarted: boolean\n    moveDone: boolean\n}\n\nexport interface IAnalysisState {\n    gameResult: IGameResult\n    settingPosition: boolean\n    pieceOrder: PieceColor\n    movesMainLine?: string[]\n    analyzeLastGame: boolean\n    movesCurrentLine: string[]\n    lastMove: {index: number, move: string}\n    depth: number\n    evaluate: boolean\n    removePiece: boolean\n    startPosition: boolean,\n}\n\nexport type CellsMap = Map<string, ITowerPosition>\n\nexport interface IBoardProps {boardOptions: IBoardOptions, posibleMoves?: CellsMap, lastMove: string[]}\n\nexport interface IBoardToDraw {\n    cellsMap: CellsMap\n    cellSize: number\n    towerTouched?: TowerTouched\n    posibleMoves?: CellsMap\n    towers: TowersMap\n    mouseDown: boolean\n    mandatoryMoves?: IMMRResult[]\n    positionsTree?: Map<string, IBoardToGame>\n    lastMoveSquares: string[]\n    currentPosition: IBoardToGame\n}\n\nexport interface IGameBoard extends IBoardToDraw{\n    mandatoryMoveStep?: number;\n    mandatoryMovesChecked?: boolean;\n    animationStarted?: boolean;\n    moveDone?: boolean;\n    currentPosition: IBoardToGame,\n}\n\nexport interface IAnalysisBoard extends IBoardToDraw{\n    mandatoryMoveStep?: number;\n    moveDone?: boolean    \n}\n\nexport interface ICell {\n    type?: 'light' | 'dark';\n    indexes?: string;\n    [propName: string]: any;  \n}\n\n// towers\nexport interface ITowerPosition {\n    x: number;\n    y: number;\n}\n\nexport type TowersMap = Map<string, TowerConstructor>\n\nexport interface IRef<T> {\n    readonly current: T | null\n}\n\nexport type NeighborsKeys = 'leftUp' | 'leftDown' | 'rightUp' | 'rightDown'\n\nexport interface ICheckerTower  {\n    currentType?: TowerType;\n    currentColor: PieceColor;\n    wPiecesQuantity?: number;\n    bPiecesQuantity?: number;\n    positionInDOM?: ITowerPosition;\n    onBoardPosition: string;\n    [key: string]: any;\n}\n\n\nexport interface INewGameProps {\n    gameKey: string\n    white: IPlayer,\n    black: IPlayer,\n    whiteClock: IClock,\n    blackClock: IClock,\n    moveOrder: IMoveOrder\n}\n\nexport class TowerConstructor implements ICheckerTower {\n    onBoardPosition: string;\n    currentColor: PieceColor;\n    wPiecesQuantity: number;\n    bPiecesQuantity: number;\n    positionInDOM?: ITowerPosition;\n    currentType: TowerType;\n    veiw?: string;\n    mandatoryMove?: boolean;\n    constructor(props: ICheckerTower ) {\n        this.currentType = props.currentType || TowerType.m;\n        this.currentColor = props.currentColor;\n        this.wPiecesQuantity = props.wPiecesQuantity || (props.currentColor === PieceColor.w ? 1 : 0);\n        this.bPiecesQuantity = props.bPiecesQuantity || (props.currentColor === PieceColor.b ? 1 : 0);\n        this.positionInDOM = props.positionInDOM || {x: 0, y: 0};\n        this.onBoardPosition = props.onBoardPosition\n        this.veiw = props.veiw || 'face'\n        this.mandatoryMove = props.mandatoryMove || false\n    }\n}\n\nexport type PartialTower = Partial<TowerConstructor>\n\n// game\nexport interface IMoveOrder {\n    pieceOrder: PieceColor\n    playerTurn: string\n}\n\nexport interface IMoveProps {\n    gameKey?: string,\n    moveToSave: IMMRResult,\n    moveOrder: IMoveOrder,\n    recievedAt?: Date,\n    whiteClock?: IClock,\n    blackClock?: IClock\n}\n\nexport type IGameMode = 'isPlaying' | 'isOver' | 'isAnalyzing' | 'isPreparing'\n\nexport interface IGameState {\n    gameKey?: string\n    moveOrder: IMoveOrder\n    gameStarted: boolean\n    gameConfirmed: boolean\n    history: string[]\n    playerColor: PieceColor\n    white: IPlayer\n    black: IPlayer\n    lastGameResult?: IGameResult | null\n    ineffectiveMoves?: number\n    portrait?: boolean\n    gameMode: IGameMode\n    rivalOfferedDraw: boolean,\n    // [key: string]: any\n}\n\nexport type GameType = 'ranked' | 'casual' | 'tournament'\n\nexport interface IGameOptionState {\n    timing: Timing\n    gameType: GameType\n    playerColor: PieceColor | 'random'\n    rivalType: RivalType\n    rivalLevel: number\n    gameVariant: GameVariants\n    gameSetupFinished: boolean\n    waitingRival: boolean\n}\n\nexport interface TowerTouched {\n    key: string\n    posibleMoves: CellsMap\n    startCursorPosition: ITowerPosition\n    startTowerPosition: ITowerPosition\n    towerColor: PieceColor\n    towerType: TowerType\n}\n\nexport type GameVariants = 'towers' | 'russian' | 'international'\nexport type BoardToGame = Map<string, IBoardCell>\n\nexport interface IBoardToGame {\n    [key: string]: IBoardCell\n}\n\nexport interface IBoardOptions {\n    boardSize: number,\n    boardTheme?: string,\n    topLegend?: string[],\n    sideLegend?: number[],\n    withOutLegend?: boolean,\n    lengendsInside?: boolean,\n    boardNotation: BoardNotation,\n    reversedBoard: boolean\n}\n\nexport enum Online {\n    online,\n    offline,\n    reconnecting\n}\n\nexport interface IPlayer {\n    name: string\n    onlineStatus?: Online\n    userId?: string\n    rating?: number\n}\n\nexport type EndGameConditions = 'surrender' \n    | 'outOfTime'\n    | 'noMoves'\n    | 'drawByAgreement' \n    | 'drawByRules'\n    | 'abandonedByWhite'\n    | 'abandonedByBlack'\n\nexport interface IGameResult {\n    gameKey?: string,\n    winner: PieceColor | 'draw'\n    reason: EndGameConditions\n    white: IPlayer\n    black: IPlayer\n    playerColor?: PieceColor\n    movesHistory: string[]\n    gameVariant: GameVariants\n    timing: string\n    boardSize?: number\n    date: Date\n}\n\nexport interface IBoardCell {\n    pos?: ITowerPosition;\n    tower: PartialTower | null\n    neighbors: INeighborCells;\n    boardKey: string\n}\n\nexport interface INeighborCells {\n    [key: string]: string\n}\n\nexport interface IDaigonals {[key: string]: IBoardCell[]}\n\nexport interface IMMRResult {\n    move: string\n    position: IBoardToGame\n    takenPieces?: string[]\n}\n\nexport interface IBoardDiagonal {\n    direction: NeighborsKeys;\n    values: IBoardDiagonalCell[];\n}\n \nexport interface IBoardDiagonalCell {\n    cellIndex: string;\n    towerColor: PieceColor | null\n}\n\nexport type RivalType = 'player' | 'PC' \n\n// user\nexport interface IUser {\n    token: string | null,\n    userId: string | null,\n    name: string | null,\n    rating: number | null\n    language: string\n}\n","export const TopLegendValues = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm'];\nexport const SideLegendValues = new Array(12).fill(0).map((i: undefined, j: number): number => j + 1);\nexport const BoardDirections = ['leftUp', 'leftDown', 'rightUp', 'rightDown'];\nexport const BaseTransform = 'translate(-50%, -50%)';\nexport const DefaultTime = 300;\nexport const Storage = 'chekers';\nexport const BaseBoardSize = 8;\nexport const InternationalBoardSize = 10;\nexport const StandartTiming = [[1,0], [2,1], [3,0], [3,1], [5,0], [5,3], [10, 0], [10, 3], [15, 0]]\nexport const PrestartTimeLimit = 10\nexport const Interval = 1000\nexport const BaseCellSize = 50\nexport const AnimationDuration = 300\nexport const CellTowerRatio = .7\n\n\nexport const sampleLink = \"https://ru.wikipedia.org/wiki/%D0%A8%D0%B0%D1%88%D0%BA%D0%B8#%D0%A1%D1%82%D0%BE%D0%BB%D0%B1%D0%BE%D0%B2%D1%8B%D0%B5\"\n\nexport const RoutesPath = {\n    home: '/',\n    game: '/game',\n    settings: '/settings',\n    analysis: '/analysis',\n    stats: '/stats',\n    rules: '/rules',\n    auth: '/auth',\n    profile: '/profile',\n}\n\nexport const RoutesTitle= {\n    home: 'home',\n    game: 'apps',\n    analyze: 'zoom_in',\n    rules: 'import_contacts',\n    stats: 'insert_chart',\n    settings: 'settings',\n    profile: 'person',\n    auth: 'login',\n}\n\nexport const storageName = 'checkers'\n\nexport const defaultWhiteTowerCells8x8 = ['a1', 'a3', 'b2', 'c1', 'c3', 'd2', 'e1', 'e3', 'f2', 'g1', 'g3', 'h2',]\nexport const defaultBlackTowerCells8x8 = ['a7', 'b8', 'b6', 'c7', 'd8', 'd6', 'e7', 'f8', 'f6', 'g7', 'h8', 'h6']\n\nexport const board8x8EmptyCells = ['b4', 'd4', 'f4', 'h4', 'a5', 'c5', 'e5', 'g5']\nexport const boardEmptyCells = board8x8EmptyCells.concat(['k4', 'i5'])\n\n// export const board8x8Cells = defaultBlackTowerCells8x8.concat(board8x8EmptyCells).concat(defaultWhiteTowerCells8x8)\n\nexport const defaultWhiteTowerCells = defaultWhiteTowerCells8x8\n.concat(['i1', 'i3', 'k2', 'b4', 'd4', 'f4', 'h4', 'k4'])\nexport const defaultBlackTowerCells = defaultBlackTowerCells8x8\n.filter((x: string) => !x.includes('6'))\n.concat(['i7', 'k10', 'k8', 'i9', 'a9', 'c9', 'e9', 'g9', 'b10', 'd10', 'f10', 'h10'])\n\nexport const board10x10EmptyCells = board8x8EmptyCells.concat(['k4', 'i5'])\n\nexport const getDefaultBlackTowersCells = (boardSize: number): string[] => {\n    return boardSize === 8 ? defaultBlackTowerCells8x8 : defaultBlackTowerCells\n}\n\nexport const getDefaultWhiteTowersCells = (boardSize: number): string[] => {\n    return boardSize === 8 ? defaultWhiteTowerCells8x8 : defaultWhiteTowerCells\n}\n\nexport const board10x10Cells = defaultBlackTowerCells.concat(defaultWhiteTowerCells).concat(board10x10EmptyCells)\n","import { \n    CellsMap,\n    IBoardCell,\n    IBoardToGame,\n    IGameBoard,\n    IMMRResult,\n    IRef,\n    ITowerPosition,\n    PieceColor,\n    TowerConstructor,\n    TowersMap,\n    TowerType,\n} from \"../store/app-interface\"\n\n//common functions\nexport const splitMove = (move: string) => {\n    if (move.includes(':')) {\n        return move.split(':')\n    }\n    return move.split('-')\n}\n\nexport const oppositColor = (color: PieceColor): PieceColor => (color === PieceColor.w ? PieceColor.b : PieceColor.w)\n\nexport const copyMap = (board: Map<string, any>) => {\n    const nm = new Map()\n    board.forEach((v: any, k: string) => {\n        if (typeof v === 'object') {\n            if (Array.isArray(v)) {\n                nm.set(k, [...v])\n            } else {\n                nm.set(k, {...v})\n            }\n        } else {\n            nm.set(k, v)\n        }\n    })\n    return nm\n}\n\nexport const copyObj = (board: {[key: string]: any}): {[key: string]: any} => {\n    return Object.keys(board).reduce((acc: {[key: string]: any}, k: string) => {\n        const v = board[k]\n        if (typeof v === 'object') {\n            if (Array.isArray(v)) {\n                acc[k] = [...v]\n            } else {\n                acc[k] = {...v}\n            }\n        } else {\n            acc[k] = v\n        }\n        return acc\n    }, {})\n}\n\nexport const possibleOutOfMandatory = (state: Partial<IGameBoard>, key: string):CellsMap => {\n    const posibleMoves = new Map() as CellsMap\n    const {mandatoryMoveStep: MS, mandatoryMoves, cellsMap } = state\n    const availableSteps = mandatoryMoves!\n    .filter((m: IMMRResult) => m.move.includes(key)).map((m: IMMRResult) => m.move.split(':')[MS as number + 1])\n    availableSteps.forEach((step: string) => {\n        posibleMoves.set(step, cellsMap!.get(step) as ITowerPosition)\n    })\n    return posibleMoves\n}\n\nexport const compareMaps = (map1: TowersMap, map2: TowersMap): boolean => {\n    return JSON.stringify([...map1.entries()]) !== JSON.stringify([...map2.entries()])\n}\n\nexport const filterArrayByLength = (arr: IMMRResult[]):  {ended: IMMRResult[], cont: IMMRResult[]} => {\n    const maxLength = arr.reduce((acc: number, val: IMMRResult) => (acc > val.move.length ? acc : val.move.length), 0)\n    return arr.reduce((acc: {ended: IMMRResult[], cont: IMMRResult[]}, val: IMMRResult) => {\n        if(val.move.length === maxLength) {\n            acc.cont.push(val)\n        } else {\n            acc.ended.push(val)\n        }\n        return acc\n    }, {ended: [], cont: []})\n}\n\nexport const crossDirections = (dir: string): {[key: string]: boolean} => {\n    const directions = {} as {[key: string]: boolean}\n    directions[`${dir.includes('left') ? 'left' : 'right'}${dir.includes('Up') ? 'Down' : 'Up'}`] = true\n    directions[`${dir.includes('left') ? 'right' : 'left'}${dir.includes('Up') ? 'Up' : 'Down'}`] = true\n    return directions\n}\n \nexport function checkMoveTargetCell(pos: ITowerPosition, pM: CellsMap, cellSize: number, ref: IRef<any>) {\n    const possibleCells =  pM.entries()\n    const size = cellSize\n    const boardRect = ref.current!.querySelector('.board__body')!.getBoundingClientRect();\n    \n    const [x, y] = [pos.x - boardRect.x, pos.y - boardRect.y]\n    if (x < 0 || y < 0) {\n        return null\n    }\n    const targetCell = [...possibleCells].filter((props) => {\n        const [cellX, cellY] = [props[1].x + size! / 4, props[1].y + size! / 4]\n        const distance = Math.sqrt(Math.pow((cellX - x), 2) + Math.pow((cellY - y), 2))\n        return distance < size!\n    })[0]\n    if (targetCell) {\n        return targetCell[0]\n    }\n    return null\n}\n\nexport const checkIfNumberOfKingsChanged = (board1: IBoardToGame, board2: IBoardToGame) => {\n    const calcKings = (board: IBoardToGame) => Object.values(board).filter((cell: IBoardCell) => \n        cell.tower?.currentType === TowerType.k).length\n        \n    return calcKings(board1) !== calcKings(board2)\n}\n\nexport const convertToMovesHistory = (arr: string[]): {white: string, black: string}[] => {\n    const result: {white: string, black: string}[] = []\n    for (let i = 0; i < arr.length; i += 2) {\n        result.push({white: arr[i], black: arr[i+1] || ''})\n    }\n    return result\n}\n\nexport function getCellSize(refElem: HTMLDivElement, size: number) {\n    const boardHtmlRect = refElem.querySelector('.board__body')!.getBoundingClientRect();\n    const {width, left, right} = boardHtmlRect\n    const cellWidth = (width ? width:  left - right) / size;\n    return Math.round(cellWidth)\n}\n\nexport function checkIfBoardFitTowers(towers: TowersMap, board: IBoardToGame): boolean {\n    let res = true\n    towers.forEach((tower: TowerConstructor, key: string) => {\n        const towerOnBoard = board[key].tower\n        if (tower.onBoardPosition !== towerOnBoard?.onBoardPosition\n            || tower.bPiecesQuantity !== towerOnBoard.bPiecesQuantity\n            || tower.wPiecesQuantity !== towerOnBoard.wPiecesQuantity\n            || tower.currentColor !== towerOnBoard.currentColor\n            || tower.currentType !== towerOnBoard.currentType) {\n                res = false\n                throw new Error(\"board do not fit towers\")\n            }\n    })\n    return res\n}\n\nconst GHF = {\n    checkIfBoardFitTowers,\n    getCellSize,\n    convertToMovesHistory,\n    checkIfNumberOfKingsChanged,\n    checkMoveTargetCell,\n    crossDirections,\n    copyObj,\n    copyMap,\n    oppositColor,\n    compareMaps,\n    filterArrayByLength,\n}\n\nexport default GHF\n","import {EndGameConditions, IBoardToGame, INewGameProps, IGameMode, IGameState, IMoveOrder, IMoveProps, PieceColor} from \"../app-interface\";\n// import { GameOptionActions } from \"../gameOptions/types\";\n\nexport const GameActions = {\n    SET_MOVE_ORDER: 'SET_MOVE_ORDER',\n    SET_GAME_STARTED: 'SET_GAME_STARTED',\n    MAKE_MOVE: 'MAKE_MOVE',\n    CONFIRM_START_GAME: 'CONFIRM_START_GAME',\n    UPDATE_GAME_STATE: 'UPDATE_GAME_STATE',\n    INEFFECTIVE_MOVE: 'INEFFECTIVE_MOVE',\n    SAVE_MOVE_TO_HISTORY: 'SAVE_HISTORY',\n    SET_PLAYER_MOVE_ORDER: 'SET_PLAYER_MOVE_ORDER',\n    SET_GAME: 'SET_GAME',\n    END_GAME: 'END_GAME',\n    OFFER_DRAW: 'OFFER_DRAW',\n    DECLINE_DRAW: 'DECLINE_DRAW',\n    RIVAL_OFFER_DRAW: 'RIVAL_OFFER_DRAW',\n    SURRENDER: 'SURRENDER',\n    SET_PORTRAIT: 'SET_PORTRAIT',\n    SET_GAME_MODE: 'SET_GAME_MODE',\n    CANCEL_GAME: 'CANCEL_GAME',\n    NEW_GAME_VS_PC: 'NEW_GAME_VS_PC',\n    NEW_GAME_VS_PLAYER: 'NEW_GAME_VS_PLAYER',\n    CLEAR_HISTORY: 'CLEAR_HISTORY',\n}\n\ninterface ClearHistoryAction {\n    type: typeof GameActions.CLEAR_HISTORY,\n    payload: null\n}\n\ninterface NewGameVSPCAction {\n    type: typeof GameActions.NEW_GAME_VS_PC,\n    payload: null\n}\n\ninterface NewGameVSPlayerAction {\n    type: typeof GameActions.NEW_GAME_VS_PLAYER,\n    payload: INewGameProps\n}\n\ninterface SurrenderAction {\n    type: typeof GameActions.SURRENDER,\n    payload: PieceColor\n}\n\ninterface CancelGameAction {\n    type: typeof GameActions.CANCEL_GAME,\n    payload: null\n}\n\ninterface SetGameModeAction {\n    type: typeof GameActions.SET_GAME_MODE,\n    payload: IGameMode\n}\n\ninterface SetPortraitAction {\n    type: typeof GameActions.SET_PORTRAIT,\n    payload: boolean\n}\n\ninterface SetGameAction {\n    type: typeof GameActions.SET_GAME,\n    payload: Partial<IGameState>\n}\n\ninterface IneffectiveMoveAction {\n    type: typeof GameActions.INEFFECTIVE_MOVE,\n    payload: number\n}\n\ninterface OpponentOfferDrawAction {\n    type: typeof GameActions.RIVAL_OFFER_DRAW\n    payload: null\n}\n\ninterface SetPlayerMoveOrderAction {\n    type: typeof GameActions.SET_PLAYER_MOVE_ORDER,\n    payload: boolean\n}\n\ninterface DeclineDrawAction {\n    type: typeof GameActions.DECLINE_DRAW,\n    payload?: boolean\n}\n\ninterface SaveHistoryAction {\n    type: typeof GameActions.SAVE_MOVE_TO_HISTORY,\n    payload: string[]\n}\n\ninterface SetMoveOrderAction {\n    type: typeof GameActions.SET_MOVE_ORDER,\n    payload: IMoveOrder\n}\n\ninterface UpdateGameStateAction {\n    type: typeof GameActions.UPDATE_GAME_STATE,\n    payload: IBoardToGame\n}\n\ninterface SetGameStartedAction {\n    type: typeof GameActions.SET_GAME_STARTED,\n    payload: boolean\n}\n\ninterface OfferDrawAction {\n    type: typeof GameActions.OFFER_DRAW,\n    payload: boolean\n}\n\ninterface MakeMoveAction {\n    type: typeof GameActions.MAKE_MOVE,\n    payload: IMoveProps\n}\n\ninterface ConfirmStartGameAction {\n    type: typeof GameActions.CONFIRM_START_GAME,\n    payload: boolean\n}\n\ninterface EndGameAction {\n    type: typeof GameActions.END_GAME,\n    payload: EndGameConditions\n}\n\nexport type GameActionTypes = \n| IneffectiveMoveAction\n| CancelGameAction\n| SetGameStartedAction\n| SetMoveOrderAction\n| UpdateGameStateAction\n| SetPortraitAction\n| SaveHistoryAction\n| SetPlayerMoveOrderAction\n| EndGameAction\n| SetGameAction\n| SurrenderAction\n| MakeMoveAction\n| OfferDrawAction\n| OpponentOfferDrawAction\n| DeclineDrawAction\n| ConfirmStartGameAction\n| SetGameModeAction\n| NewGameVSPCAction\n| NewGameVSPlayerAction\n| CancelGameAction\n| ClearHistoryAction\n","import { IAnalysisState, IBoardToGame, IGameResult, IMoveProps } from \"../app-interface\"\n\nexport const GameAnalysisActions = {\n    ANALYZE_LAST_GAME: 'ANALYZE_LAST_GAME',\n    DOWNLOAD_GAME: \"DOWNLOAD_GAME\",\n    SAVE_GAME_RESULT: 'SAVE_GAME_RESULT',\n    SETTING_BOARD: 'SETTING_BOARD',\n    UPDATE_POSITION: 'UPDATE_POSITION',\n    STEP_FORWARD: 'STEP_FORWARD',\n    STEP_BACK: \"STEP_BACK\",\n    SAVE_POSITION: \"SAVE_POSITION\",\n    GO_TO_POSITION: 'GO_TO_POSITION',\n    CREATE_POSITION_TREE: 'CREATE_POSITION_TREE',\n    UPDATE_ANALYSIS_STATE: 'UPDATE_ANALYSIS_STATE',\n    EVALUATE_POSITION: 'EVALUATE_POSITION',\n    SET_DEPTH: 'SET_DEPTH',\n    PLAY_MOVES: 'PLAY_MOVES',\n    SET_START_POSITION: 'SET_START_POSITION',\n    REMOVE_PIECE: 'REMOVE_PIECE',\n    START_NEW_LINE: 'START_NEW_LINE',\n    MAKE_NEW_MOVE: 'MAKE_NEW_MOVE',\n} \n\nexport interface MakeNewMoveAction {\n    type: typeof GameAnalysisActions.MAKE_NEW_MOVE,\n    payload: Partial<IMoveProps>\n}\n\nexport interface StartNewLineAction {\n    type: typeof GameAnalysisActions.START_NEW_LINE,\n    payload: IMoveProps\n}\n\nexport interface RemovePieceAction {\n    type: typeof GameAnalysisActions.REMOVE_PIECE,\n    payload: boolean\n}\n\nexport interface PlayMovesAction {\n    type: typeof GameAnalysisActions.PLAY_MOVES,\n    payload: null\n}\n\nexport interface SetDepthAction {\n    type: typeof GameAnalysisActions.SET_DEPTH\n    payload: number\n}\n\nexport interface EvaluatePositionhAction {\n    type: typeof GameAnalysisActions.EVALUATE_POSITION\n    payload: boolean\n}\n\nexport interface UpdateAnalysisStateAction {\n    type: typeof GameAnalysisActions.UPDATE_ANALYSIS_STATE,\n    payload: Partial<IAnalysisState>\n}\n\nexport interface CreatePositionTreeAction {\n    type: typeof GameAnalysisActions.CREATE_POSITION_TREE,\n    payload: Map<string, IBoardToGame>\n}\n\nexport interface SavePositionAction {\n    type: typeof GameAnalysisActions.SAVE_POSITION,\n    payload: Map<string, IBoardToGame>\n}\n\nexport interface GoToPositionAction {\n    type: typeof GameAnalysisActions.GO_TO_POSITION\n    payload: {index: number, move: string}\n}\n\nexport interface StepForwardAction {\n    type: typeof GameAnalysisActions.STEP_FORWARD,\n    payload: number\n}\n\nexport interface StepBackdAction {\n    type: typeof GameAnalysisActions.STEP_BACK,\n    payload: number\n}\n\nexport interface UpdatePositionActions {\n    type: typeof GameAnalysisActions.UPDATE_POSITION,\n    payload: Partial<IMoveProps>\n}\n\nexport interface SettingBoardAction {\n    type: typeof GameAnalysisActions.SETTING_BOARD\n    payload: boolean\n}\n\nexport interface AnalyzeLastGame {\n    type: typeof GameAnalysisActions.ANALYZE_LAST_GAME,\n    payload: boolean\n}\n\nexport interface DownloadGame {\n    type: typeof GameAnalysisActions.DOWNLOAD_GAME,\n    payload: IGameResult\n}\n\nexport interface SaveGameResult {\n    type: typeof GameAnalysisActions.SAVE_GAME_RESULT,\n    payload: IGameResult\n}\n\nexport interface SetStartPositionAction {\n    type: typeof GameAnalysisActions.SET_START_POSITION,\n    payload: null\n}\n\nexport type GameAnalysisTypes = AnalyzeLastGame \n| DownloadGame \n| SaveGameResult \n| SettingBoardAction \n| UpdatePositionActions\n| GoToPositionAction\n| StepForwardAction\n| StepBackdAction\n| SavePositionAction\n| CreatePositionTreeAction\n| UpdateAnalysisStateAction\n| RemovePieceAction\n| StartNewLineAction\n| MakeNewMoveAction\n| SetStartPositionAction\n\n","import { GameVariants, PieceColor, Online, IPlayer, Timing, RivalType, GameType } from \"../app-interface\";\n\nexport const GameOptionActions = {\n    CHOOSE_COLOR: 'CHOOSE_COLOR',\n    SET_TIME_LIMIT: 'SET_TIME_LIMIT',\n    SET_TIME_ADDS: 'SET_TIME_ADDS',\n    SET_GAME_TIMING: 'SET_GAME_TIMING',\n    SET_RIVAL: 'SET_RIVAL',\n    SET_PLAYER: 'SET_PLAYER',\n    SET_GAME_VARIANT: 'SET_GAME_VARIANT',\n    SET_RIVAL_ONLINE_STATUS: 'SET_RIVAL_ONLINE_STATUS',\n    SET_PLAYER_ONLINE_STATUS: 'SET_PLAYER_ONLINE_STATUS',\n    SET_GAME_TYPE: 'SET_GAME_TYPE',\n    SET_RIVAL_LEVEL: 'SET_RIVAL_LEVEL',\n    FIND_RIVAL: 'FIND_RIVAL',\n    SET_RIVAL_TYPE: 'SET_RIVAL_TYPE',\n    FINISH_GAME_SETUP: 'FINISH_GAME_SETUP',\n    WAIT_RIVAL: 'WAIT_RIVAL',\n    CANCEL_RIVAL_WAITING: 'CANCEL_RIVAL_WAITING',\n    REMATCH_REQUEST: 'REMATCH_REQUEST',\n};\n\ninterface SetGameTypeAction {\n    type: typeof GameOptionActions.SET_GAME_TYPE,\n    payload: GameType\n}\n\ninterface SetRivalLevelAction {\n    type: typeof GameOptionActions.SET_RIVAL_LEVEL\n    payload: number\n}\n\ninterface RequestRematchAction {\n    type: typeof GameOptionActions.REMATCH_REQUEST,\n    payload: null,\n}\n\ninterface CancelRivalWaitingAction {\n    type: typeof GameOptionActions.CANCEL_RIVAL_WAITING,\n    payload: null\n}\n\ninterface FinishGameSetupAcion {\n    type: typeof GameOptionActions.FINISH_GAME_SETUP\n    payload: boolean\n}\n\ninterface SetOpponentTypeAction {\n    type: typeof GameOptionActions.SET_RIVAL_TYPE\n    payload: RivalType\n}\n\ninterface SetGameTimingAction {\n    type: typeof GameOptionActions.SET_GAME_TIMING,\n    payload: Timing\n}\n\ninterface SetOpponentStatusAction {\n    type: typeof GameOptionActions.SET_RIVAL_ONLINE_STATUS,\n    payload: Online\n}\n\nexport interface SetGameVariantAction {\n    type: typeof GameOptionActions.SET_GAME_VARIANT,\n    payload: GameVariants\n}\n\ninterface SetPlayerAction {\n    type: typeof GameOptionActions.SET_RIVAL,\n    payload: IPlayer\n}\n\ninterface SetPlayerStatusAction {\n    type: typeof GameOptionActions.SET_RIVAL_ONLINE_STATUS,\n    payload: Online\n}\n\nexport interface ChooseColorAction {\n    type: typeof GameOptionActions.CHOOSE_COLOR,\n    payload: PieceColor | 'random'\n}\n\ninterface SetRivalAction {\n    type: typeof GameOptionActions.SET_RIVAL,\n    payload: IPlayer\n}\n\nexport interface FindOpponentAction {\n    type: typeof GameOptionActions.FIND_RIVAL\n}\n\nexport interface WaitRivalAction {\n    type: typeof GameOptionActions.WAIT_RIVAL,\n    payload: boolean\n}\n\nexport type GameOptionActionTypes = SetRivalAction\n| ChooseColorAction\n| SetOpponentStatusAction\n| SetPlayerStatusAction\n| SetPlayerAction\n| SetGameVariantAction\n| SetGameTimingAction\n| SetOpponentTypeAction\n| FinishGameSetupAcion\n| WaitRivalAction\n| CancelRivalWaitingAction\n| RequestRematchAction\n| SetGameTypeAction\n| SetRivalLevelAction\n","import { IBoardAndTowers, IMoveProps } from \"../app-interface\";\n\nexport const BoardActions = {\n    CREATE_GAME_BOARD: 'CREATE_GAME_BOARD',\n    CREATE_SETUP_BOARD: 'CREATE_SETUP_BOARD',\n    CREATE_ANALYSIS_BOARD: 'CREATE_ANALYSIS_BOARD',\n    UPDATE_BOARD_STATE: 'UPDATE_BOARD_STATE',\n    UPDATE_BOARD_SIZE: 'UPDATE_BOARD_SIZE',\n    TURN: 'TURN',\n    UPDATE_POSITION_TREE: 'CREATE_POSITION_TREE',\n    UNDO_LAST_MOVE: 'UNDO_LAST_MOVE',\n}\n\ninterface UndoLastMoveAction {\n    type: typeof BoardActions.UNDO_LAST_MOVE,\n    payload: null\n}\n\ninterface TurnAction {\n    type: typeof BoardActions.TURN,\n    payload: Partial<IMoveProps>\n}\n\ninterface UpdateBoardStateAction {\n    type: typeof BoardActions.UPDATE_BOARD_STATE,\n    payload: Partial<IBoardAndTowers>\n}\n\ninterface CreateGameBoardAction {\n    type: typeof BoardActions.CREATE_GAME_BOARD,\n    payload: null\n}\n\ninterface CreateAnalysisBoardAction {\n    type: typeof BoardActions.CREATE_ANALYSIS_BOARD\n    payload: null\n}\n\ninterface CreateSetupBoardAction {\n    type: typeof BoardActions.CREATE_SETUP_BOARD\n    payload: null\n}\n\ninterface UpdateBoardSizeAction {\n    type: typeof BoardActions.UPDATE_BOARD_SIZE\n    payload: number\n}\n\nexport type BoardActionTypes = UpdateBoardStateAction\n| CreateAnalysisBoardAction\n| CreateGameBoardAction\n| CreateSetupBoardAction\n| UpdateBoardSizeAction\n| TurnAction\n| UndoLastMoveAction\n","import { \n    INeighborCells, \n    TowersMap,\n    PieceColor,\n    TowerConstructor,\n    TowerType,\n    ITowerPosition,\n    IBoardToGame,\n    PartialTower,\n    IBoardOptions,\n    IAnalysisBoard,\n    IGameBoard,\n} from \"../store/app-interface\"\nimport {\n    TopLegendValues,\n    SideLegendValues,\n    BaseCellSize,\n    getDefaultBlackTowersCells,\n    getDefaultWhiteTowersCells\n} from '../constants/gameConstants'\n\nexport const oppositColor = (color: PieceColor) => { return color === PieceColor.w ? PieceColor.b : PieceColor.w }\n\nexport const createEmptyBoard = (size: number = 8) => {\n    const GameBoard: IBoardToGame = {}\n    for(let i = 0; i < size; i++) {\n        for(let j = 0; j < size; j++) {\n            if ((i + j + 1) % 2) {\n                const key = `${TopLegendValues[i]}${SideLegendValues[j]}`;\n                GameBoard[key] = {boardKey: key, tower: null, neighbors: defineNeighborCells(i ,j, size)}\n            }\n        }\n    }\n    return GameBoard\n}\n\nexport const createStartBoardToDraw = (props: {boardOptions: IBoardOptions}): IGameBoard => {\n    const { \n        boardOptions,\n    } = props\n    const {boardSize, reversedBoard} = boardOptions \n    const currentPosition = createStartBoard(boardSize)\n    const positionsTree = new Map()\n    positionsTree.set('sp', currentPosition)\n    return {\n        towers: createDefaultTowers(boardSize),\n        cellSize: BaseCellSize,\n        cellsMap: createCellsMap(boardSize, BaseCellSize, reversedBoard),\n        animationStarted: false,\n        mandatoryMoves: [],\n        moveDone: false,\n        mandatoryMoveStep: 0,\n        currentPosition,\n        mouseDown: false,\n        lastMoveSquares: [],\n        positionsTree\n    }\n}\n\nexport const createEmptyBoardForCustomPosition = (props: {[key: string]: any}): IAnalysisBoard => {\n    const {boardSize, reversedBoard} = props.boardOptions\n    const currentPosition = createEmptyBoard(boardSize)\n    const positionsTree = new Map()\n    positionsTree.set('sp', currentPosition)\n    return {\n        towers: createOutBoardTowers(boardSize),\n        cellSize: BaseCellSize,\n        cellsMap: createCellsMap(boardSize, BaseCellSize, reversedBoard),\n        currentPosition,\n        positionsTree,\n        mandatoryMoves: [],\n        mandatoryMoveStep: 0,\n        mouseDown: false,\n        lastMoveSquares: []\n    }\n}\n\nexport const createAnalysisBoard = (props: {boardOptions: IBoardOptions}): Partial<IAnalysisBoard> => { \n    const {boardOptions: {boardSize, reversedBoard}} = props   \n    return {\n        cellSize: BaseCellSize,\n        cellsMap: createCellsMap(boardSize  as number, BaseCellSize, reversedBoard),\n        mandatoryMoves: [],\n        mandatoryMoveStep: 0,\n        mouseDown: false,\n        lastMoveSquares: [],\n    }\n}\n\nexport const defineCellDomPosition = (key: string, cellSize: number, reversed = false, boardSize = 8) => {\n    const topInd = reversed ? TopLegendValues.slice(0, boardSize).reverse() : TopLegendValues.slice(0, boardSize)\n    const sideInd = reversed ? SideLegendValues.slice(0, boardSize) : SideLegendValues.slice(0, boardSize).reverse()\n    const y = sideInd.indexOf(parseInt(key.slice(1))) * cellSize \n    const x = topInd.indexOf(key[0]) * cellSize\n    return {x, y}\n}\n\nexport const createCellsMap = (boardSize: number, cellSize = BaseCellSize, reversed = false) => {\n    const map = new Map<string, ITowerPosition>()\n    Object.keys(createEmptyBoard(boardSize)).forEach((key: string) => {\n        map.set(key, defineCellDomPosition(key, cellSize, reversed, boardSize))\n    })\n    return map\n}\n\nexport const updateCellsMap = (cellsMap: Map<string, ITowerPosition>, cellSize: number, reversed = false) => {\n    const boardSize = cellsMap.size === 50 ? 10 : 8\n    const newMap = new Map<string, ITowerPosition>()\n    cellsMap.forEach((val: ITowerPosition, key: string) => {\n        newMap.set(key, defineCellDomPosition(key, cellSize, reversed, boardSize))\n    })\n    return newMap\n}\n\nexport function defineNeighborCells(i: number, j: number, size: number): INeighborCells {\n    const topLegend = TopLegendValues.slice(0, size)\n    const sideLegend = SideLegendValues.slice(0, size) \n    const neighbors: INeighborCells = {}\n    if (i) {\n        if (j < size - 1) {\n            neighbors.leftUp = `${topLegend[i - 1]}${sideLegend[j + 1]}` \n        }\n        if (j) {\n            neighbors.leftDown = `${topLegend[i - 1]}${sideLegend[j - 1]}`\n        }\n    }\n    if (i < size - 1) {\n        if (j < size - 1) {\n                neighbors.rightUp = `${topLegend[i + 1]}${sideLegend[j + 1]}` \n            }\n        if (j) {\n            neighbors.rightDown = `${topLegend[i + 1]}${sideLegend[j - 1]}`\n        }\n    }\n    return neighbors\n}\n\nexport const newOnBoardTower = (currentColor: PieceColor, currentType = TowerType.m): PartialTower => {\n    const wPiecesQuantity = currentColor === PieceColor.w ? 1 : 0\n    const bPiecesQuantity = currentColor === PieceColor.b ? 1 : 0\n    return {currentColor, currentType, wPiecesQuantity, bPiecesQuantity}\n}\n\nexport function createStartBoard (boardSize: number): IBoardToGame {\n    const board: IBoardToGame = createEmptyBoard(boardSize)\n    const DBTC = getDefaultBlackTowersCells(boardSize)\n    const DWTC = getDefaultWhiteTowersCells(boardSize)\n    for (let key of Object.keys(board)) {\n        board[key].tower = (DBTC.includes(key) && newOnBoardTower(PieceColor.b))\n        || (DWTC.includes(key) ? newOnBoardTower(PieceColor.w) : null)\n    }\n    return board\n}\n\nconst defaultTowerProps = (cell: string, color: PieceColor, ): TowerConstructor => ({\n    currentType: TowerType.m,\n    currentColor: color,\n    onBoardPosition: cell,\n    bPiecesQuantity: color === PieceColor.w ? 0 : 1,\n    wPiecesQuantity: color === PieceColor.w ? 1 : 0,\n})\n\nexport const createDefaultTowers = (boardSize: number): TowersMap => {\n    const towers = new Map() as TowersMap\n    getDefaultBlackTowersCells(boardSize).forEach((key: string) => {\n        towers.set(key, new TowerConstructor(defaultTowerProps(key, PieceColor.b)))\n    })\n    getDefaultWhiteTowersCells(boardSize).forEach((key: string) => {\n        towers.set(key, new TowerConstructor(defaultTowerProps(key, PieceColor.w)))\n    })\n    return towers\n}\n\nexport const createOutBoardTowers = (boardSize: number): TowersMap => {\n    const towers = new Map() as TowersMap\n    getDefaultBlackTowersCells(boardSize).forEach((key: string, i: number) => {\n        const oBKey = `oB b${i}`\n        towers.set(oBKey, new TowerConstructor(defaultTowerProps(oBKey, PieceColor.b)))\n    })\n    getDefaultWhiteTowersCells(boardSize).forEach((key: string, i: number) => {\n        const oBKey = `oW w${i}`\n        towers.set(oBKey, new TowerConstructor(defaultTowerProps(oBKey, PieceColor.w)))\n    })\n    return towers\n}\n","import { CellTowerRatio } from \"../constants/gameConstants\"\nimport {\n    CellsMap,\n    IBoardOptions,\n    IBoardToDraw,\n    IBoardToGame, \n    IGameBoard, \n    ITowerPosition, \n    PartialTower,\n    PieceColor,\n    TowerConstructor,\n    TowersMap,\n    TowerTouched,\n} from \"../store/app-interface\"\n\nimport {BaseMoveResolver} from './common-fn-moves-resolver'\nimport { copyMap, getCellSize } from \"./gameplay-helper-fuctions\"\nimport { createStartBoard, updateCellsMap } from \"./prestart-help-function-constants\"\n\n\nexport class TowersUpdateResolver extends BaseMoveResolver {\n    currentPosition = createStartBoard(this.size) as IBoardToGame\n    previousPosition = createStartBoard(this.size) as IBoardToGame\n    callBack: Function = () => {}\n\n    setCalBack = (cb: Function) => {\n        this.callBack = cb\n    }\n\n    // animateRivalMove(history: string[], board: IBoardToDraw, reversed: boolean) {\n    //     this.setPositions(board.positionsTree!, history)\n    //     const move = history.slice(-1)[0]\n    //     const mandatory = move.includes(':')\n    //     if (mandatory) {\n    //         return this.animateMadatoryMove(move)\n    //     }\n    //     return this.animateSimpleMove(move, board, reversed)\n    // }\n\n    animateMadatoryMove(move: string) {\n\n    }\n\n    animateSimpleMove(move: string, board: IBoardToDraw, reversed: boolean) {\n       \n    }\n\n    relocateTower(from: string, to: string, board: IGameBoard, reversed: boolean) {\n        const {cellSize, cellsMap} = board\n        const towers = copyMap(board.towers)\n        const tower = towers.get(from) as TowerConstructor\n        tower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize, reversed)\n        towers.set(from, tower)\n        console.log(tower)\n        this.callBack({towers})\n    }\n\n    finalizeSimpleMove(from: string, to: string, board: IGameBoard, reversed = false) {\n        const {cellSize, cellsMap} = board\n        const towers = copyMap(board.towers)\n        const tower = towers.get(from) as TowerConstructor\n        tower.onBoardPosition = to\n        tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\n        tower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize, reversed)\n        towers.set(to, tower)\n        towers.delete(from)\n        const towerTouched = null as unknown as TowerTouched\n        const lastMoveSquares = [from, to]\n        this.callBack({towers, towerTouched, lastMoveSquares, mouseDown: false, moveDone: true})\n    }\n\n    finalizeMandatoryMoveStep(from: string, to: string, board: IGameBoard, reversed = false, last = false) {\n        const towers = copyMap(board.towers)\n        const {cellSize, cellsMap} = board\n        const tower = towers.get(from) as TowerConstructor\n        tower.onBoardPosition = to\n        if (this.GV === 'towers') {\n            if (tower!.currentColor === PieceColor.w) {\n                tower.bPiecesQuantity = (tower.bPiecesQuantity as number) + 1\n            } else {\n                tower.wPiecesQuantity = (tower.wPiecesQuantity as number) + 1\n            }\n        }\n        if (this.GV !== 'international' || last) {\n            tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\n        }\n        tower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize, reversed)\n        towers.set(to, tower)\n        towers.delete(from)\n        console.log(tower)\n        return towers\n    }\n\n    setPositions(positionsTree: Map<string, IBoardToGame>, history: string[]) {\n        let currentPositionKey\n        currentPositionKey = history.join('_')\n        const currentPosition = positionsTree?.get(currentPositionKey)!\n        this.previousPosition = {...this.currentPosition}\n        this.currentPosition = currentPosition\n    }\n\n    updateTowersOnMandatoryMoveStep(from: string, to: string, state: IGameBoard, tP: string[], last=false) {\n        const isTowers = this.GV === 'towers'\n        console.log(isTowers, tP)\n        const towers = this.updateTowersAfterMoveAnimation(from, to, state, isTowers, last)\n        if (isTowers) {\n            const middlePieceKey = tP[0]\n            const middlePiece = towers.get(middlePieceKey) as PartialTower\n            const takenTower = this.cuptureTower(middlePiece) as TowerConstructor\n            if (!takenTower) {\n                towers.delete(middlePieceKey)\n            } else {\n                towers.set(middlePieceKey, takenTower)\n            }\n            return towers\n        } else if (last) {\n            console.log(towers, tP)\n            tP.forEach((key: string) => {\n                towers.delete(key)\n            })\n            return towers\n        }\n        return towers\n    }\n\n    updateTowersToBoard(board: IBoardToGame): TowersMap {\n        const towers = new Map() as TowersMap\n        Object.keys(board).forEach((key: string) => {\n            let tower = board[key].tower as TowerConstructor\n            if (tower) {\n                const _tower = new TowerConstructor(tower)\n                _tower.onBoardPosition = key\n                towers.set(key, _tower)\n            }\n        })\n        return towers\n    }\n    \n    updateMiddleTowerOnOpponentMove(key: string, state: IGameBoard, board: IBoardToGame) {\n        const towers = copyMap(state.towers) as TowersMap\n        const takenTower = board[key]!.tower as PartialTower\n        if (takenTower) {\n            const newMiddleTower = {...towers.get(key), ...takenTower} as TowerConstructor;\n            towers.set(key, newMiddleTower)\n        } else {\n            towers.delete(key)\n        }\n        console.log('middle update', key, towers, board, takenTower)\n        return towers\n    }\n\n    updateTowersAfterMoveAnimation(from: string, to: string, board: IBoardToDraw, wT=false, last=false): TowersMap {\n        const {cellSize, cellsMap} = board\n        const towers = copyMap(board.towers!) as TowersMap\n        const tower = towers.get(from) as TowerConstructor\n        if (wT) {\n            if (tower!.currentColor === PieceColor.w) {\n                tower.bPiecesQuantity = (tower.bPiecesQuantity as number) + 1\n            } else {\n                tower.wPiecesQuantity = (tower.wPiecesQuantity as number) + 1\n            }\n        }\n        tower!.onBoardPosition = to\n        tower!.positionInDOM = this.calcTowerPosition(to, cellsMap!, cellSize!)\n        if (this.GV !== 'international' || last) {\n            tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\n        }\n        towers.set(to, tower)\n        towers.delete(from)\n        return towers\n    }\n\n    animateRivalTowerMove(from: string, to: string, state: IGameBoard) {\n        const {cellsMap, cellSize} = state\n        const towers = copyMap(state.towers)\n        const opponentTower = towers.get(from) as TowerConstructor\n        opponentTower.positionInDOM = this.calcTowerPosition(to, cellsMap, cellSize)\n        return {...state, towers}\n    }\n\n    calcPositionOutboardTowers = (key: string, cellSize: number, reversed: boolean) => {\n        const boardElem = document.querySelector('.board__body')\n        const boardHeight = Math.round(boardElem!.getBoundingClientRect().height)\n        const towerWidth = CellTowerRatio * cellSize\n        const dY = Math.round(cellSize / 2 - towerWidth / 2)\n        const bottom = Math.round(boardHeight - cellSize / 2 - towerWidth / 2)\n        const x = Math.round(-5 - cellSize + dY)\n        return (reversed && key.includes('oB')) || (!reversed && key.includes('oW'))\n                ? {x, y: bottom}\n                : {x, y: dY}\n    }\n\n    calcTowerPosition = (key: string, map: CellsMap, cellSize: number, reversed = false): ITowerPosition => {\n        if (key.includes('oB') || key.includes('oW')) {\n            return this.calcPositionOutboardTowers(key, cellSize, reversed) as ITowerPosition\n        }\n        const cellPosition = map.get(key) as ITowerPosition\n        if (!cellPosition) return  {x: 0, y: 0}\n        const {x, y} = cellPosition\n        const towerElem = document.querySelector('.checker-tower')\n        if (!towerElem) {\n            console.error(towerElem)\n        }\n        const {width} = towerElem!.getBoundingClientRect()\n        return {x: Math.round(x - width / 2 + cellSize / 2), y: Math.round(y - width / 2  + cellSize/2)}\n    }\n\n    cancelTowerTransition(props: IGameBoard & {reversed?: boolean}) { \n        const {key} = props.towerTouched as TowerTouched\n        const {cellSize, cellsMap, reversed = false} = props\n        const towers = copyMap(props.towers) as TowersMap\n        const tower = towers.get(key) as TowerConstructor\n        tower.positionInDOM = this.calcTowerPosition(key, cellsMap, cellSize, reversed)\n        towers.set(key, tower)\n        this.callBack({...props, towers, towerTouched: null as unknown as TowerTouched, mouseDown: false})\n    }\n\n    updateTowersPosition = (cellSize: number, towers: TowersMap, map: CellsMap, reversed = false): TowersMap => {\n        const _towers = copyMap(towers)\n        towers.forEach((val: TowerConstructor, key: string) => {\n            const positionInDOM = this.calcTowerPosition(key, map, cellSize, reversed)\n            const tower = {...val, positionInDOM, onBoardPosition: key}\n            _towers.set(key, tower)\n        })\n        return _towers\n    }\n\n    updateCellsPosition = (board: IBoardToDraw, boardOptions: IBoardOptions, boardRef: HTMLDivElement) => {\n        const {cellsMap, cellSize, towers} = board\n        const {reversedBoard, boardSize} = boardOptions\n        const newCellSize = getCellSize(boardRef, boardSize);\n        if (cellSize === newCellSize) return\n        const newCellMap = updateCellsMap(cellsMap as CellsMap, newCellSize, reversedBoard)\n        const newTowers = this.updateTowersPosition(newCellSize, towers, newCellMap, reversedBoard)\n        // console.log(newTowers, towers)\n        this.callBack({towers: newTowers, cellsMap: newCellMap, cellSize: newCellSize})\n    }\n}\n\nconst tur = new TowersUpdateResolver()\n\nexport default tur\n","import { BoardNotation, IBoardOptions } from \"../app-interface\";\n\nexport const BoardOptionActions = {\n    SET_GAME_BOARD_OPTIONS: 'SET_GAME_BOARD_OPTIONS',\n    REVERSE_BOARD: 'REVERSE_BOARD',\n    SET_BOARD_THEME: 'SET_BOARD_THEME',\n    SET_BOARD_NOTATION: 'SET_BOARD_NOTATION',\n    SET_BOARD_SIZE: 'SET_BOARD_SIZE'\n}\n\ninterface SetBoardSizeAction {\n    type: typeof BoardOptionActions.SET_GAME_BOARD_OPTIONS\n    payload: number\n}\n\ninterface UpdateBoardOptionsAction {\n    type: typeof BoardOptionActions.SET_GAME_BOARD_OPTIONS\n    payload: Partial<IBoardOptions>\n}\n\nexport interface ReverseBoardAction {\n    type: typeof BoardOptionActions.REVERSE_BOARD\n    payload: boolean\n}\n\ninterface SetBoardThemeAction {\n    type: typeof BoardOptionActions.SET_BOARD_THEME\n    payload: string\n}\n\ninterface SetBoardNotationAction {\n    type: typeof BoardOptionActions.SET_BOARD_THEME\n    payload: BoardNotation\n}\n\nexport type BoardOptionActionTypes = UpdateBoardOptionsAction\n| SetBoardThemeAction\n| ReverseBoardAction\n| SetBoardNotationAction\n| SetBoardSizeAction\n","export const I18n: {[key:string]: any} = {\n    en: {\n        shortMainTitle: 'Draughts',\n        mainTitle: 'Tower Draughts',\n        newGame: 'New game',\n        submitLog: 'Login',\n        submitReg: 'Registration',\n        logTitle: 'Login',\n        regTitle: 'Registration in',\n        logMess: 'Please enter Nikname or email and password',\n        regMess : 'Please fiil registration form',\n        modeButtonLog: 'Do not have registred yet?',\n        modeButtonReg: 'Login',\n        labelPassword: 'Password',\n        labelNickname: 'Nickname or email',\n        submitButton: 'Submit',\n        about: 'Welcom to Tower-Draughts where, in addition to the classic Russian and international draughts, for the first time, the opportunity to play tower draughts has been implemented - one of the most interesting variants of the checkers game.'\n    },\n    ru: {\n        shortMainTitle: 'Шашки',\n        mainTitle: 'Столбовые Шашки',\n        newGame: 'Новая игра',\n        submitLog: 'Войти',\n        submitReg: 'Зарегистрироваться',\n        logTitle: 'Для входа в',\n        regTitle: 'Для регистрации в',\n        logMess: 'Пожалуйста введите свой ник или email и пороль',\n        regMess : 'Пожалуйста заполните регистрационную форму',\n        modeButtonLog: 'Еще не зарегистрированы?',\n        modeButtonReg: 'Войти в аккаунт',\n        labelPassword: 'Пароль',\n        labelNickname: 'Игровой ник или email',\n        submitButton: 'Отправить',\n        about: 'Добро пожаловать на Tower Draughts, где помимо классических: русских и международных шашек, впервые представлена возможность играть онлайн в столбовые шашки - одну из наиболее интересных варианций шашечной игры.'\n    }\n}","import React from 'react';\nimport './spinner.scss';\n/**\n * This component designed to show to user, that game data loading is in process\n * and used in the landing page and game.\n * Spinner's animation implemented with css.\n */\n\nconst Spinner = props => {\n    return (\n        <div className=\"waiting-rival-spinner\" onClick={() => props.cancelRivalWaiting()}>\n            <div title=\"cancel\" className=\"logo\"></div>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import { BaseBoardSize } from \"../constants/gameConstants\";\nimport { \n    CellsMap,\n    GameVariants,\n    IBoardCell,\n    IBoardToGame,\n    IDaigonals,\n    IGameState,\n    IMoveOrder,\n    IMoveProps,\n    ITowerPosition,\n    PartialTower,\n    PieceColor,\n    TowerConstructor,\n    TowersMap,\n    TowerType \n} from \"../store/app-interface\"\nimport {  copyObj, crossDirections, oppositColor } from \"./gameplay-helper-fuctions\";\nimport { createEmptyBoard } from \"./prestart-help-function-constants\";\n\nexport class BaseMoveResolver {\n    GV: GameVariants = 'towers'\n    size: number = BaseBoardSize\n\n    setProps = (props: {GV: GameVariants, size: number}) => {\n        this.GV = props.GV\n        this.size = props.size\n    }\n\n    checkTowerTypeChanging(to: string, boardSize: number, color: PieceColor, type: TowerType): TowerType {\n        if ((parseInt(to.slice(1)) === boardSize && color === PieceColor.w)\n            || (parseInt(to.slice(1)) === 1 && color === PieceColor.b)) {\n            return TowerType.k\n        } \n        return type\n    }\n\n    getCapturedPieceKey = (from: string, to: string, board: IBoardToGame): string => {\n        const interval = this.getInterval(from, to, board)\n        const key = interval.filter(c => c.tower)[0]\n        if (key) return key.boardKey\n        throw new Error(`invalid move - tower to take did not find ${from}:${to} in ${JSON.stringify(board)}`);\n    }\n\n    getInterval(start: string, end: string, board: IBoardToGame): IBoardCell[] {\n        if (board[end].tower) {\n            console.error('board', board, start, end)\n        }\n        const dir = this.getMoveDirection([start, end])\n        let cell = board[start]\n        const interval = []\n        while(true) {\n            const nextCellKey = cell!.neighbors[dir]\n            if (!nextCellKey || nextCellKey === end) break\n            cell = board[nextCellKey]\n            interval.push(cell)\n        } \n        return interval\n    }\n\n    getDiagonal(direction: string, startCellKey: string, board: IBoardToGame): IBoardCell[] {\n        let cell = board[startCellKey]\n        const diagonal = [cell]\n        while (cell) {\n            const nextCellKey = cell!.neighbors[direction]\n            if (nextCellKey) {\n                const nextCell = board[nextCellKey]\n                diagonal.push(nextCell)\n                cell = nextCell\n            } else {\n                break\n            }\n        }\n        return diagonal;\n    }\n\n    getDiagonals(cell: string, board:  IBoardToGame, preDirected = ''): IDaigonals {\n        const neighbors = board[cell]!.neighbors\n        const diagonals = {} as IDaigonals\n        const availibleDirections = (d: string) => (!!preDirected ? crossDirections(preDirected)[d] : true)\n        Object.keys(neighbors).filter((d: string) => availibleDirections(d)).forEach((dir: string) => {\n            diagonals[dir] = this.getDiagonal(dir, cell, board)\n        })\n        return diagonals\n    }\n\n    getMoveDirection(move: string[]): string {\n        const [from, to] = move\n        if (from[0] > to[0]) {\n            if (parseInt(from.slice(1)) > parseInt(to.slice(1))) {\n                return 'leftDown'\n            }else {\n                return 'leftUp'\n            }\n        } else {\n            if (parseInt(from.slice(1)) > parseInt(to.slice(1))) {\n                return 'rightDown'\n            } else {\n                return 'rightUp'\n            }\n        }\n    }\n\n    cuptureTower = (tower: PartialTower): PartialTower | null => {\n        if (this.GV !== 'towers') {\n            return null as unknown as PartialTower\n        }\n        const {currentColor, bPiecesQuantity, wPiecesQuantity} = tower\n        const white = currentColor === PieceColor.w\n        const newTower = {\n           ...tower,\n            currentType: TowerType.m,\n            wPiecesQuantity: white ? (wPiecesQuantity as number) - 1 : wPiecesQuantity,\n            bPiecesQuantity: white ? bPiecesQuantity : (bPiecesQuantity as number) - 1,\n        }\n        if (!newTower.bPiecesQuantity && !newTower.wPiecesQuantity) {\n            return null as unknown as PartialTower\n        } else {\n            if (white && !newTower.wPiecesQuantity) {\n                newTower.currentColor = PieceColor.b\n            } else if (!white && !newTower.bPiecesQuantity) {\n                newTower.currentColor = PieceColor.w\n            }\n        }\n        return newTower\n    }\n}\n\nexport class MoveResolveCommons extends BaseMoveResolver {\n\n    checkNeighborsIsEmpty(key: string, board: IBoardToGame, color: PieceColor): string[] {\n        return Object.values(board[key].neighbors).filter((cellKey: string) => {\n            const condition = color === PieceColor.w\n                ? parseInt(key.slice(1)) < parseInt(cellKey.slice(1)) \n                : parseInt(key.slice(1)) > parseInt(cellKey.slice(1))\n            return condition  && !board[cellKey]!.tower\n        }).map((fN: string) => `${key}-${fN}`)\n    }\n\n    lookForTowerFreeMoves = (boardKey: string, board: IBoardToGame, color: PieceColor): string[] => { \n        const tower = board[boardKey].tower\n        if (tower!.currentType === TowerType.m) {\n            return this.checkNeighborsIsEmpty(boardKey, board, color)\n        } else {\n            return this.lookForKingFreeMoves(boardKey, board)\n        }\n    }\n\n    lookForAllPosibleMoves = (color: PieceColor, board: IBoardToGame): string[] => {\n        let result: string[] = []\n        for (let key of Object.keys(board)) {\n            const cell = board[key]\n            if(cell.tower?.currentColor === color) {\n                const moves = this.lookForTowerFreeMoves(key, board, color)\n                if (moves.length) {\n                    result = [...result, ...moves]\n                }\n            }\n        }\n        return result\n    }\n\n    getCapturedTowers(move: string[], position: IBoardToGame, tP: string[] = [], i = 0): string[] {\n        const moveLength = move.length\n        if (moveLength < 2) return tP\n        tP.push(this.getCapturedPieceKey(move[i], move[i+1], position))\n        if (moveLength === 2 || i === moveLength - 2) {\n            return tP\n        }\n        i += 1\n        return this.getCapturedTowers(move, position, tP, i)\n    }\n\n    getFromToKeys = (moveArr: string[], board: IBoardToGame): string[] => {\n        let i = 0\n        while(i < moveArr.length) {\n            if(board[moveArr[i]].tower) {\n                const repetition = moveArr.lastIndexOf(moveArr[i])\n                if (repetition  < 0) {\n                    return moveArr.slice(i)\n                } else if (moveArr.slice(repetition).length > 1) {\n                    return moveArr.slice(repetition)\n                } else {\n                    return []\n                }\n            }\n            i++\n        }\n        throw Error('start tower in move not found')\n    }\n\n    makeMoveWithoutTakingPieces = (move: string[], board: IBoardToGame): IBoardToGame => {\n        const _board = copyObj(board)\n        const nextMoves = this.getFromToKeys(move, board)\n        const [from, to] = [nextMoves[0], nextMoves.slice(-1)[0]]\n        if (from !== to) {\n            const fromTower = {..._board[from].tower}\n            const whiteMove = fromTower.currentColor === PieceColor.w\n            if (this.checkLastLine(to, whiteMove) && this.GV !== 'international') {\n                fromTower.currentType = TowerType.k\n            }\n            _board[to].tower = fromTower\n            _board[from].tower = null\n        }\n\n        if (!_board[to]?.tower) {\n            console.error('error on board', move, _board, board)\n        }\n        if (_board[from].tower && !_board[to].tower?.currentColor) {\n            console.error('board was updated incorrectly whithout taken', move, _board, board)\n        }\n        return _board\n    }\n\n    getBoardFromTowers = (towers: TowersMap): IBoardToGame => {\n        const board = createEmptyBoard(this.size)\n        towers.forEach((value: TowerConstructor, key: string) => {\n            const {wPiecesQuantity, bPiecesQuantity, currentColor, currentType} = value\n            if (!key.includes(' ')) {\n                 board[key].tower = {wPiecesQuantity, bPiecesQuantity, currentColor, currentType}\n            }\n        })\n        return board\n    }\n    \n    getNewOrder = (props: Partial<IGameState>): IMoveOrder => {\n        const newPieceOrder = oppositColor(props.moveOrder!.pieceOrder)\n        const moveOrder = {\n            pieceOrder:  newPieceOrder,\n            playerTurn: props[newPieceOrder]!.name,\n        }\n        return moveOrder\n    }\n\n    getPropsToMakeFreeMove = (from: string, to: string, props: {[key: string]: any}): IMoveProps => {\n        const newPieceOrder = oppositColor(props.moveOrder!.pieceOrder)\n        const moveOrder = {\n            pieceOrder:  newPieceOrder,\n            playerTurn: props[newPieceOrder]!.name,\n        }\n        const position = this.makeFreeMove(from, to, props.currentPosition!)\n        return {moveOrder, moveToSave: {move: `${from}-${to}`, position}}\n    }\n\n    makeFreeMove(from: string, to: string, board: IBoardToGame): IBoardToGame {\n        const newBoard = copyObj(board)\n        if (!newBoard[from]) {\n            console.error('makeFreeMove invalid props', from, to, board)\n        }\n        const tower = {...newBoard[from].tower as TowerConstructor}\n        const boardSize = Math.sqrt(Object.keys(board).length * 2)\n        tower.currentType = this.checkTowerTypeChanging(to, boardSize, tower.currentColor, tower.currentType)\n        newBoard[to].tower = tower\n        newBoard[from].tower = null\n        return newBoard\n    }\n\n    checkDiagonalForKingMove(diag: IBoardCell[]) {\n        const startCellKey = diag[0].boardKey\n        const moves = [] as string[]\n        for (let cell of diag.slice(1)) {\n            if (cell.tower) break\n            moves.push(`${startCellKey}-${cell.boardKey}`)\n        }\n        return moves\n    }\n\n    manTowerFreeMoves = (tower: TowerConstructor, board: IBoardToGame, cellsMap: CellsMap) => {\n        const key = tower.onBoardPosition\n        const color = tower.currentColor\n        const posibleMoves =  new Map() as CellsMap\n        const cellNeighbors = board![key]!.neighbors\n        Object.values(cellNeighbors!).forEach((k: string) => {\n            const cell = board![k] \n            const [towerLine, neighborLine] = [parseInt(key.slice(1)), parseInt(k.slice(1))]\n            if ((color === PieceColor.b && !cell!.tower && towerLine > neighborLine)\n                || (color === PieceColor.w && !cell!.tower && towerLine < neighborLine)) {\n                posibleMoves.set(k, cellsMap!.get(k) as ITowerPosition)\n            }\n        })\n        return posibleMoves\n    }\n\n    checkLastLine(to: string, whiteMove: boolean): boolean {\n        const currentLine = parseInt(to.slice(1))\n        return (whiteMove && currentLine === this.size) || (!whiteMove && currentLine === 0)\n    }\n\n    lookForKingFreeMoves(cellKey: string, board: IBoardToGame): string[] {\n        const diagonals = this.getDiagonals(cellKey, board)\n        let moves = [] as string[]\n        Object.values(diagonals).forEach((diag: IBoardCell[]) => {\n            moves = moves.concat(this.checkDiagonalForKingMove(diag))\n        })\n        return moves\n    }\n\n    kingTowerFreeMoves = (key: string, board: IBoardToGame, cellsMap: CellsMap): CellsMap => {\n        const moves = this.lookForKingFreeMoves(key, board)\n        const posibleMoves = new Map() as CellsMap\n        moves.forEach((m: string) => {\n            const moveSteps = m.split('-')\n            const cellKey = moveSteps[moveSteps.length - 1]\n            posibleMoves.set(cellKey, cellsMap.get(cellKey) as ITowerPosition)\n        })\n        return posibleMoves\n    }\n\n    makeMandatoryMove = (move: string[], board: IBoardToGame): IBoardToGame => {\n        if (move.length < 2) console.error(`makeObligatedMove: incorrect move length`)\n        const nextMove = this.getFromToKeys(move, board)\n        if (!nextMove.length) {\n            return board\n        }\n        if (nextMove.length === 2) {\n            return this.makeMandatoryMoveStep(nextMove, board, true)\n        }\n        const newBoard = this.makeMandatoryMoveStep(nextMove as string[],board)\n        return this.makeMandatoryMove(nextMove.slice(1), newBoard)\n    }\n\n    updateBoardOnMandatoryMoveStep = (move: string[], board: IBoardToGame): IBoardToGame => {\n        if (this.GV === 'towers') {\n            return this.makeMandatoryMove(move, board)\n        }\n        return this.makeMoveWithoutTakingPieces(move, board)\n    }\n\n    makeMandatoryMoveStep = (move: string[], board: IBoardToGame, last=false): IBoardToGame => {\n        const newBoard = copyObj(board)\n        const [from, to] = move\n        if (from === to || !to || !from) {\n            console.error('error in step', move, board)\n        }\n        const tower = copyObj(board[from])!.tower as TowerConstructor\n        let middlePieceKey = this.getCapturedPieceKey(from, to, board)\n        const newMiddleTower = this.cuptureTower(newBoard[middlePieceKey].tower)\n        if (!tower || !middlePieceKey) {\n            console.error('invalid board:', JSON.stringify(board), 'move:', move)\n            return board\n        }\n        if (this.GV === 'towers') {\n            if (tower.currentColor === PieceColor.w) {\n                tower.bPiecesQuantity! += 1\n            } else {\n                tower.wPiecesQuantity! += 1\n            }\n        }\n        newBoard[from]!.tower = null\n        newBoard[middlePieceKey].tower = newMiddleTower\n        if (this.GV !== 'international' || last) {\n            tower.currentType = this.checkTowerTypeChanging(to, this.size, tower.currentColor, tower.currentType)\n           \n        }\n        newBoard[to]!.tower = tower as PartialTower\n        if (newBoard[move[0]].tower || !newBoard[move[1]].tower?.currentColor) {\n            console.error('board was updated incorrectly', move, newBoard, board)\n        }\n        return newBoard\n    }\n}\n","import { IBoardToGame, IBoardCell, IDaigonals, IMMRResult, PieceColor } from \"../store/app-interface\"\nimport {MoveResolveCommons as MRC} from \"./common-fn-moves-resolver\" \n\n\nexport class KingMandatoryMoveResolver extends MRC {\n\n    checkKingMandatoryMoves(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\n        let moves = [] as IMMRResult[]\n        moves = this.checkFirstKingDiagonals(cell, board)\n        if (!moves.length) {\n            return moves\n        }\n        return this.checkKingNextSteps(moves)\n    }\n\n    checkFirstKingDiagonals(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\n        let moves = [] as IMMRResult[]\n        const diagonals = this.getDiagonals(cell!.boardKey, board)\n        Object.values(diagonals)\n        .forEach((diag: IBoardCell[]) => {\n            const firstMove = {move: `${cell.boardKey}`, position: board, takenPieces: []}\n            const _moves = this.checkDiagonalToMadatoryMove(diag, firstMove)\n            if (_moves.length) {\n                moves = [...moves, ..._moves]\n            }\n        })\n        return moves\n    }\n\n    checkKingNextSteps(moves: IMMRResult[], cM: IMMRResult[] = []): IMMRResult[] {\n        let movesToCheckContinue: IMMRResult[] = []\n        let compleatedMoves = cM\n        moves.forEach((m: IMMRResult) => {\n            const nextStepResult = this.checkNextMoveStepDirections(m)\n            if (nextStepResult.length) {\n                movesToCheckContinue = movesToCheckContinue.concat(nextStepResult)\n            } else if (moves.filter(_m => _m.move.startsWith(m.move)).length === 1) {\n                compleatedMoves = compleatedMoves.concat(m)\n            }\n        })\n        // console.log(movesToCheckContinue)\n        if (!movesToCheckContinue.length) {\n            return compleatedMoves\n        } else {\n            return this.checkKingNextSteps(movesToCheckContinue, compleatedMoves)\n        }\n    }\n\n    checkIfDiagonalNotFit(diag: IBoardCell[], color: PieceColor): boolean {\n        return diag.length < 3\n            || !diag.filter((cell: IBoardCell) => cell.tower?.currentColor !== color).length\n            || diag[1].tower?.currentColor === color\n            || diag[2].tower?.currentColor === color\n    }\n\n    checkDiagonalToMadatoryMove(diag: IBoardCell[], move: IMMRResult): IMMRResult[] {\n        const color = diag[0].tower!.currentColor\n        let resultMoves = [] as IMMRResult[]\n        if (this.checkIfDiagonalNotFit(diag, color as PieceColor)) {\n            return resultMoves\n        }\n        let i = 1\n        while (i <  diag.length - 1) {\n            const tower = diag[i].tower\n            const nextCell = diag[i+1]\n            if (tower?.currentColor === color || (tower && nextCell.tower)) {\n                break\n            } \n            const takenPiece = diag[i].boardKey\n            const to = nextCell.boardKey\n            const notTaken = !move.takenPieces?.includes(takenPiece)\n            if (tower && !nextCell.tower && tower.currentColor !== color && notTaken) {\n                if (!resultMoves.length) {\n                    const nMove = `${move.move}:${to}`\n                    const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), move.position)\n                    const takenPieces = [...move.takenPieces!, takenPiece]\n                    resultMoves.push({ move: nMove, position, takenPieces})\n                } else {\n                    const last = resultMoves.slice(-1)[0]\n                    const takenPieces = [...last.takenPieces!, takenPiece]\n                    const nMove = `${last.move}:${to}`\n                    const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), last.position)\n                    resultMoves.push({move: nMove, position, takenPieces})\n                }\n                i += 2 \n            } else {\n                if (!tower && resultMoves.length) {\n                    const start = resultMoves[0].move!.split(':').slice(0, -1).join(':')\n                    const takenPieces = resultMoves[0].takenPieces\n                    const nMove = `${start}:${diag[i].boardKey}`\n                    const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), move.position)\n                    resultMoves.push({move: nMove, position, takenPieces})\n                }\n                i += 1\n            }\n        }\n        const lastCell = diag[i]\n        if (i === diag.length - 1 && !lastCell.tower && resultMoves.length) {\n            if (!resultMoves.filter((m: IMMRResult) => m.move.includes(lastCell.boardKey)).length) {\n                const start = resultMoves[0].move!.split(':').slice(0, -1).join(':')\n                const takenPieces = resultMoves[0].takenPieces\n                const nMove = `${start}:${lastCell.boardKey}`\n                const position = this.updateBoardOnMandatoryMoveStep(nMove.split(':'), move.position)\n                resultMoves.push({move: nMove, position, takenPieces})\n            }\n        }\n       \n        return resultMoves\n    }\n\n    checkNextMoveStepDirections(move: IMMRResult): IMMRResult[] {\n        const moveArr = move.move.split(':').slice(-2)\n        const cellKey = moveArr[1]\n        const direction = this.getMoveDirection(moveArr)\n        const board = move.position\n        if (!board || !board[move.move.split(':').slice(-1)[0]].tower) {\n            console.error('error in move', move)\n        }\n        const diagonals = this.getDiagonals(cellKey, board, direction) as IDaigonals\n        let result = [] as IMMRResult[]\n        Object.values(diagonals).forEach((diag: IBoardCell[]) => {\n            if (!diag[0].tower) {\n                console.error('invalid diagonal', diag, move)\n            }\n            const moves = this.checkDiagonalToMadatoryMove(diag, move)\n            if (moves.length) {\n                result = [...result, ...moves]\n            }\n        })\n        return result \n    }\n}\n\nconst kmmr = new KingMandatoryMoveResolver()\n\nexport default kmmr\n","import { PieceColor, IBoardToGame, TowerType, IBoardCell, IMMRResult } from '../store/app-interface'\nimport { filterArrayByLength, copyObj, oppositColor } from './gameplay-helper-fuctions'\nimport { KingMandatoryMoveResolver as KMMR} from './king-mandatory-move-resolver'\nimport { createStartBoard } from './prestart-help-function-constants'\n\n\nexport class MandatoryMovesResolver extends KMMR{\n    gameVariantMoveContinueRestriction() {\n        if (this.GV === 'international') return false\n        return true\n    }\n\n    makeMoves(moves: string[], board = createStartBoard(this.size)): IBoardToGame {\n        let nBoard: IBoardToGame = copyObj(board)\n        let step = 0\n        while(step < moves.length) {\n            const move = moves[step]\n            if (move.includes('-')) {\n                const [from, to] = move.split('-')\n                nBoard[to].tower = board[from].tower\n                nBoard[from].tower = null\n            } else if (move.includes(':')) {\n                nBoard = this.makeMandatoryMove(move.split(':'), board)\n            }\n            step += 1\n        }\n        return nBoard\n    }\n\n    lookForAllMoves = (color: PieceColor, board: IBoardToGame): IMMRResult[] => {\n        const mandatoryMoves = this.lookForMandatoryMoves(color, board)\n        if (mandatoryMoves.length) {\n            return mandatoryMoves\n        } \n        return this.lookForAllPosibleMoves(color, board).map((m: string) => {\n            const [from, to] = m.split('-')\n            return {move: m, position: this.makeFreeMove(from, to, board)}\n        })\n    }\n\n    checkMandatoryMoveNextStep = (move: IMMRResult): IMMRResult[] => {\n        // console.log('move', move.move)\n        const moveArray = move.move.split(':')\n        const [from, to] = moveArray.slice(moveArray.length - 2)\n        const board = move.position\n        const cell = board[to]\n        const neighbors = cell.neighbors\n        const nextMoves: IMMRResult[] = []\n        const exludedDirection = this.getMoveDirection([to, from])\n        Object.keys(neighbors).filter((dir: string) => (\n                dir !== exludedDirection\n        )).forEach((dir: string) => {\n            if (!cell.tower) {\n                console.error('checkManMoveNextStep invalid start cell', move, board, cell, dir)\n            }\n            const nMove = this.checkManDirection(cell, dir, move)\n            if (nMove) {\n                nextMoves.push(nMove)\n            }\n        })\n        return nextMoves\n    }\n\n    checkManFristMandatoryStep(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\n        const moves = [] as IMMRResult[]\n        Object.keys(cell!.neighbors).forEach((dir: string) => {\n            const startProps = {move: '', position: board, takenPieces: [], currentPosition: cell.boardKey}\n            const move = this.checkManDirection(cell, dir, startProps)\n            if (move) {\n                moves.push(move)\n            }\n        })\n        // console.log(moves)\n        return moves\n    }\n\n    checkManMandatoryMoves(cell: IBoardCell, board: IBoardToGame): IMMRResult[] {\n        let result = [] as IMMRResult[]\n        result = this.checkManFristMandatoryStep(cell, board)\n        if (!result.length) {\n            return result\n        }\n        return this.checkMandatoryMoveNextSteps(result)\n    }\n\n    checkManDirection(cell: IBoardCell, dir: string, preMove: IMMRResult): IMMRResult {\n        if (!cell.tower) {\n            console.error('cod invalid start cell', cell, preMove, dir)\n        }\n        const board = preMove.position\n        const neighborCell = board[cell!.neighbors[dir]]\n        const takenPiece = neighborCell.boardKey\n        if (this.GV !== 'towers' && preMove.move.length && preMove.takenPieces!.includes(takenPiece)) {\n            return null as unknown as IMMRResult\n        } else if (neighborCell?.tower?.currentColor === oppositColor(cell!.tower!.currentColor!)) {\n            const nextCellKey = neighborCell.neighbors[dir]\n            if(nextCellKey && !board[nextCellKey].tower) {\n                const move = !preMove.move.length \n                    ? `${cell?.boardKey}:${nextCellKey}` \n                    : `${preMove.move}:${nextCellKey}`\n                if (move.split(':').length < 2) {\n                    console.error('move too short', move)\n                }\n                const position = this.updateBoardOnMandatoryMoveStep(move.split(':'), board)\n                const takenPieces = [...preMove.takenPieces!, takenPiece]\n                return {move, takenPieces, position}\n            }\n        }\n        return null as unknown as IMMRResult\n    }\n\n    checkMandatoryMoveNextSteps = (moves: IMMRResult[], cM = [] as IMMRResult[]): IMMRResult[] => {\n        let compleatedMoves = cM as IMMRResult[]\n        let movesToCheckContinue = [] as IMMRResult[]\n        moves.forEach((mr: IMMRResult) => {\n            const board = mr.position\n            const currrentSquare = mr.move.split(':').slice(-1)[0]\n            if (board[currrentSquare].tower?.currentType === TowerType.k \n                && this.gameVariantMoveContinueRestriction()) {\n                const nextMoves = this.checkKingNextSteps([mr])\n                if (nextMoves.length) {\n                    compleatedMoves = compleatedMoves.concat(nextMoves)\n                } else {\n                    compleatedMoves.push(mr) \n                }\n            } else {\n                const nextMoves = this.checkMandatoryMoveNextStep(mr)\n                if (nextMoves.length) { \n                    movesToCheckContinue = movesToCheckContinue.concat(nextMoves)\n                } else if (this.GV !== 'international') {\n                    if (!compleatedMoves.filter(m => m.move.startsWith(mr.move)).length) {\n                        compleatedMoves.push(mr)\n                    }\n                    \n                }\n            }\n        })\n        if (!movesToCheckContinue.length) {\n            return compleatedMoves\n        } else {\n            return this.checkMandatoryMoveNextSteps(movesToCheckContinue, compleatedMoves)\n        }\n    }\n\n    removeTakenPieces = (move: IMMRResult) => {\n        const {takenPieces} = move\n        const position = copyObj(move.position)\n        takenPieces!.forEach(key => {\n            position[key].tower = null\n        })\n        return {...move, position}\n    }\n\n    lookForMandatoryMoves = (color: PieceColor, board: IBoardToGame): IMMRResult[] => {\n        let result = [] as IMMRResult[]\n        for (let cell of Object.values(board)) {\n            if (cell.tower?.currentColor !== color) continue\n            if (cell.tower?.currentType === TowerType.k) {\n                const moves = this.checkKingMandatoryMoves(cell, board)\n                if (moves.length) {\n                    result =  result.concat(moves)\n                }\n            } else {\n                const moves = this.checkManMandatoryMoves(cell, board)\n                if (moves.length) {\n                    result = result.concat(moves)\n                }\n            }\n        }\n        result = this.GV === 'towers'\n            ? result \n            : result.map((m: IMMRResult) => (this.removeTakenPieces(m)))\n        return this.GV ===  'international' ? filterArrayByLength(result).cont : result\n    }\n}\n\nconst mmr = new MandatoryMovesResolver()\n\nexport default mmr\n","import React from 'react'\n\nimport './page-components.scss'\n\ninterface SideBarProps {\n    children: React.ReactNode, side: string\n}\n\nexport const SideBar: React.FC<SideBarProps> = (props) => {\n    const ClassName = `side-bar_${props.side}`\n    return (\n        <div className={ClassName}>\n            {props.children}\n        </div>) \n}\n","import { IPlayer, Online, RivalType, PieceColor, Timing, GameVariants, GameType } from '../app-interface';\nimport {GameOptionActionTypes, GameOptionActions, FindOpponentAction} from './types'\n\n\nexport function setRivalLevel(payload: number): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.SET_RIVAL_LEVEL,\n        payload\n    }\n}\n\nexport function setPlayerColor(payload: PieceColor | 'random'): GameOptionActionTypes {\n    return ({\n        type: GameOptionActions.CHOOSE_COLOR,\n        payload\n    });\n};\n\nexport function setPlayer(payload: IPlayer): GameOptionActionTypes {\n    return ({\n        type: GameOptionActions.SET_PLAYER,\n        payload\n    });\n};\n\nexport function setOpponent(payload: IPlayer): GameOptionActionTypes {\n    return ({\n        type: GameOptionActions.SET_RIVAL,\n        payload\n    });\n};\n\nexport function setOpponentType(payload: RivalType): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.SET_RIVAL_TYPE,\n        payload\n    }\n}\n\nexport function setOpponentStatus(payload: Online): GameOptionActionTypes {\n    return ({\n        type: GameOptionActions.SET_RIVAL_ONLINE_STATUS,\n        payload\n    });\n};\n\nexport function setTiming(payload: Timing): GameOptionActionTypes {\n    return ({\n        type: GameOptionActions.SET_GAME_TIMING,\n        payload\n    });\n};\n\nexport function setPlayerStatus (payload: Online): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.SET_RIVAL_ONLINE_STATUS,\n        payload\n    }\n}\n\nexport function findRival(): FindOpponentAction  {\n    return {type: GameOptionActions.FIND_RIVAL}\n}\n\nexport function finishGameSetup(payload: boolean): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.FINISH_GAME_SETUP,\n        payload\n    }\n}\n \nexport function waitingRival(payload: boolean): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.WAIT_RIVAL,\n        payload\n    }\n}\n\nexport function setGameVariant(payload: GameVariants): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.SET_GAME_VARIANT,\n        payload\n    }\n}\n\nexport function cancelRivalWaiting(payload = null): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.CANCEL_RIVAL_WAITING,\n        payload\n    }\n}\n\nexport function requestRematch(payload = null): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.REMATCH_REQUEST,\n        payload\n    }\n}\n\nexport function setGameType(payload: GameType): GameOptionActionTypes {\n    return {\n        type: GameOptionActions.SET_GAME_TYPE,\n        payload\n    }\n}\n","import React from 'react'\n\nimport './logoIcon.scss'\n\nexport const Logo: React.FC<{size?: number}> = ({size = 16}) => {\n    return <i className={`logo s-${size}`}></i>\n}\n","export default __webpack_public_path__ + \"static/media/game-example.329613c8.gif\";","import React, { Suspense } from 'react'\n\nimport { SideBar } from '../../page-components/Sidebar'\nimport Spinner from '../../page-components/spinners/Spinner'\nimport gameExample from '../../assets/game-example.gif'\nimport { sampleLink } from '../../constants/gameConstants'\nimport {I18n} from '../../assets/i18n'\n\nimport './home.scss'\nimport { useSelector } from 'react-redux'\nimport { IRootState } from '../../store/rootState&Reducer'\n\nexport const Home: React.FC = () => {\n    const language = useSelector((store: IRootState) => store.user.language)\n    const internalization = (I18n as {[key: string]: any})[language.slice(0, 2)]\n    const href = sampleLink\n    return (\n        <Suspense fallback={<Spinner />}>\n            <div className=\"page home-page\">\n                <SideBar side=\"left\">\n                </SideBar>\n                <section className=\"home-content\">\n                    <figure className=\"game-example-wrapper\">\n                        <a href={href} target=\"_blank\" rel=\"author noreferrer\">\n                            <figcaption>Tower's draughts game example. Created by Sergey Ivanov 1958</figcaption>\n                            <img width=\"200px\" src={gameExample} alt=\"Tower's Checkers game example\"></img>\n                        </a>   \n                    </figure>\n                    <div className=\"home-invitation\">{internalization.about}</div>\n                </section>\n                <SideBar side=\"right\">\n                </SideBar>\n            </div>\n        </Suspense>\n    )\n\n}\n    \nexport default Home\n","import React, { lazy, Suspense } from 'react'\nimport {Switch, Route} from 'react-router-dom'\n\nimport Home from './pages/home/Home'\nimport Spinner from './page-components/spinners/Spinner'\nimport {RoutesPath} from './constants/gameConstants'\n\n\nconst GameAnalizePage =  lazy(() => import( './pages/gameAnalize/GameAnalyzePage'));\nconst GamePage = lazy(() => import( './pages/game/GamePage'));\n\nconst Router = () => {\n    return (\n        <Suspense fallback={<Spinner />}>\n            <Switch>\n               <Route path={RoutesPath.home} exact>\n                    <Home />\n                </Route>\n                <Route path={RoutesPath.game}>\n                    <GamePage />\n                </Route>\n                <Route path={RoutesPath.analysis}>\n                    <GameAnalizePage />\n                </Route>               \n            </Switch>\n        </Suspense> \n    )    \n}\n\nexport default React.memo(Router)\n","import { IUser } from \"../app-interface\"\n\nexport const UserActions = {\n    LOGIN_SUCCEED: 'LOGIN_SUCCEED',\n    REGISTER_USER: 'REGISTERE_USER',\n    SAVE_USER_STORAGE: 'SAVE_USER_STORAGE',\n    GET_USER_FROM_STORAGE: 'GET_USER_FROM_STORAGE',\n    CHECK_TOKEN_EXPIRATION: 'CHECK_TOKEN_EXPIRATION',\n    EXPIRE_TOKEN: 'TOKEN_EXPEXPIRE',\n    DELETE_USER_FROM_STORAGE: 'DELETE_USER_FROM_STORAGE',\n    LOGOUT: 'LOGOUT',\n    SEND_AUTH_REQUEST: 'SEND_AUTH_REQUEST',\n    SET_PREFERABLE_LANGUAGE: 'SET_PREFERABLE_LANGUAGE',\n    CHECK_STORAGE: 'CHECK_STORAGE',\n}\n\ninterface CheckStorageAction {\n    type: typeof UserActions.CHECK_STORAGE,\n    payload: null\n}\n\ninterface LoginUserAction {\n    type: typeof UserActions.LOGIN_SUCCEED,\n    payload: IUser\n}\n\ninterface SetPreferableLangaugeAction {\n    type: typeof UserActions.SET_PREFERABLE_LANGUAGE,\n    payload: string\n}\n\ninterface LogoutUserAction {\n    type: typeof UserActions.LOGIN_SUCCEED,\n    payload: null\n}\n\ninterface RegisterUserAction {\n    type: typeof UserActions.REGISTER_USER,\n    payload: boolean\n}\n\ninterface SaveUserStorageAction {\n    type: typeof UserActions.SAVE_USER_STORAGE,\n    payload: IUser\n}\n\ninterface GetUserStorageAction {\n    type: typeof UserActions.GET_USER_FROM_STORAGE,\n    payload: IUser\n}\n\ninterface DeleteUserStorageAction {\n    type: typeof UserActions.DELETE_USER_FROM_STORAGE,\n    payload: null\n}\n\nexport type UserActionTypes = GetUserStorageAction \n    | SaveUserStorageAction \n    | RegisterUserAction \n    | LoginUserAction\n    | LogoutUserAction\n    | DeleteUserStorageAction \n    | SetPreferableLangaugeAction\n    | CheckStorageAction\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\n\nimport { RoutesPath, RoutesTitle } from '../constants/gameConstants'\nimport { IRef } from '../store/app-interface'\nimport { IRootState } from '../store/rootState&Reducer'\n\n\nexport const MobileMenu = () => {\n    const isAuth = !!useSelector((state: IRootState) => state.user.name)\n    const [dropdown, setDropdown] = useState(false)\n    const [visible, setVisible] = useState(false)\n    const mobileMenuClass = `mobile-nav${visible ? ' visible' : ' hidden'}${!dropdown ? ' display-none' : ' display'}`\n    const timeout = 300\n    const ref: IRef<HTMLUListElement> = React.createRef() \n    const handleDropdown = (e: React.MouseEvent) => {\n        e.preventDefault() \n        if (!dropdown) {\n            setDropdown(true)\n            setTimeout(() => setVisible(true), timeout)\n        } else {\n            setVisible(false)\n            setTimeout(() => setDropdown(false), timeout)\n        }\n    }\n    const handleClickOutside = (ev: any) => {\n        ev.stopPropagation()\n        const elem = ref.current as HTMLElement\n        if (!dropdown || !elem) {\n            return\n        }\n        const target = ev.target as HTMLElement\n        if (!elem.contains(target)) {\n            setDropdown(false)\n        }\n    }\n\n    useEffect(() => {\n        if(!window) return\n        window.addEventListener('click', handleClickOutside)\n        if (!dropdown) {\n            return window.removeEventListener('click', handleClickOutside)\n        }\n        // return window.removeEventListener('click', handleClickOutside)\n    })\n    \n    return (\n        <div onClick={handleDropdown}>\n            <button  className=\"mobile-nav-dropdown-btn\" >\n                <i className=\"material-icons\">menu</i>\n            </button>\n            <ul className={mobileMenuClass} ref={ref}>\n                <li>\n                    <NavLink exact={true} className=\"navlink mobile\" to={RoutesPath.home}>\n                        <i className=\"large material-icons\">{RoutesTitle.home}</i>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink className=\"navlink mobile\" to={RoutesPath.game}>\n                        <i className=\"large material-icons\">{RoutesTitle.game}</i>\n                    </NavLink>\n                </li>\n                <li title=\"game analize\">\n                    <NavLink className=\"navlink\" to={RoutesPath.analysis}>\n                        <i className=\"large material-icons\">{RoutesTitle.analyze}</i>\n                    </NavLink>\n                </li>\n                <li title=\"settings\">\n                    <NavLink className=\"navlink\" to={RoutesPath.settings}>\n                        <i className=\"large material-icons\">{RoutesTitle.settings}</i>\n                    </NavLink>\n                </li>\n            </ul>\n        </div>\n       \n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport {NavLink} from 'react-router-dom'\nimport {connect, ConnectedProps} from 'react-redux'\n\nimport {RoutesPath, RoutesTitle} from '../constants/gameConstants'\nimport {IRootState} from '../store/rootState&Reducer'\nimport {findRival} from '../store/gameOptions/actions'\nimport {setLanguage} from '../store/user/actions'\nimport { LoginBar } from './LoginBar'\nimport {MobileMenu} from './MobileDropdownNav'\nimport { Logo } from '../common/LogoIcon'\nimport {I18n} from '../assets/i18n'\n\n\nconst mapState = (state: IRootState) => ({\n    language: state.user.language,\n    winWidth: state.app.windowSize.width\n})\n\nconst mapDispatch = {\n   setLanguage, findRival\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype Props = ConnectedProps<typeof connector>\n\nexport const Navbar: React.FC<Props> = (props) => {\n    const {setLanguage, language, findRival, winWidth} = props\n    const isAuth = true\n    const lang = language.slice(0,2)\n    const history = useHistory()\n    const handleLogoClick = (event: React.MouseEvent) => {\n        event.preventDefault()\n        findRival()\n        history.push('/game')\n    }\n    // const i18n = I18n[lang]\n    const [mobile, setMobile] = useState(window?.innerWidth < 500)\n\n    useEffect(() => {\n        setMobile(winWidth < 500)\n    }, [winWidth])\n    const notAuthLogo = mobile ? I18n['en'].mainTitle : I18n['en'].shortMainTitle\n    const isAuthLogo = mobile ? <Logo size={18} /> : I18n['en'].mainTitle\n    let logo: React.ReactNode = !isAuth \n        ? <NavLink title=\"to home\" to={RoutesPath.home} className=\"brand-logo\">{notAuthLogo}</NavLink>\n        : <div title=\"new game\" className=\"brand-logo\" onClick={handleLogoClick}>{isAuthLogo}</div>\n        \n    return (\n        <nav className=\"nav\">\n            <div className=\"nav-wrapper\">\n                {logo}\n                <div className=\"right-nav\">\n                    <DuoLanguageSwitcher lang={lang} langs={['ru', 'en']} setLanguage={setLanguage}/>\n                    <MobileMenu />\n                    <ul className=\"desktop-nav\">\n                        <li title=\"home\">\n                            <NavLink exact={true} className=\"navlink\" to={RoutesPath.home} >\n                                <i className=\"large material-icons\">{RoutesTitle.home}</i>\n                            </NavLink>\n                        </li>\n                        <li title=\"game\">\n                            <NavLink className=\"navlink\" to={RoutesPath.game}>\n                                <i className=\"large material-icons\">{RoutesTitle.game}</i>\n                            </NavLink>\n                        </li>\n                        <li title=\"game analize\">\n                            <NavLink className=\"navlink\" to={RoutesPath.analysis}>\n                                <i className=\"large material-icons\">{RoutesTitle.analyze}</i>\n                            </NavLink>\n                        </li>\n                        <li title=\"settings\">\n                            <NavLink className=\"navlink\" to={RoutesPath.settings}>\n                                <i className=\"large material-icons\">{RoutesTitle.settings}</i>\n                            </NavLink>\n                        </li>\n                    </ul>\n                    {/* <LoginBar /> */}\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport interface DouLangProps {\n    langs: string[],\n    setLanguage(l: string): void,\n    lang: string\n}\n\nexport const DuoLanguageSwitcher = (props: DouLangProps) => {\n    const { lang, setLanguage, langs } = props;\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (lang === langs[0]) {\n            setLanguage(langs[1])\n        } else {\n            setLanguage(langs[0])\n        }\n        (e.target as HTMLButtonElement).blur();\n    };\n    return <button title=\"change language\" className=\"change-lang-button\" onClick={e => handleClick(e)}>\n        <span className={`flag-icon flag-icon-${lang === 'en' ? 'gb' : lang} flag-icon-squared`}></span>\n    </button>\n};\n\nexport default connector(Navbar)\n","import { IUser } from '../app-interface';\nimport {UserActions, UserActionTypes} from './types';\n\nexport  function loginSucceed(payload: IUser): UserActionTypes{\n    return {\n        type: UserActions.LOGIN_SUCCEED,\n        payload,\n    }\n};\n\nexport  function logout(payload = null): UserActionTypes{\n  return {\n      type: UserActions.LOGOUT,\n      payload\n  }\n};\n\nexport function saveUserToStorage(payload: IUser ): UserActionTypes {\n    return {\n      type: UserActions.SAVE_USER_STORAGE,\n      payload\n    }\n}\n\n// export function register(payload = null): UserActionTypes {\n//     return {\n//       type: UserActions.REGISTER_USER,\n//       payload\n//     }\n// }\n\nexport function getUserFromStorage(payload: IUser): UserActionTypes {\n    return {\n      type: UserActions.GET_USER_FROM_STORAGE,\n      payload\n    }\n}\n\nexport  function setLanguage(payload: string): UserActionTypes{\n  return {\n      type: UserActions.SET_PREFERABLE_LANGUAGE,\n      payload,\n  }\n};\n\nexport function deleteUserFromStorage(payload = null): UserActionTypes {\n    return {\n        type: UserActions.DELETE_USER_FROM_STORAGE,\n        payload\n    }\n}\n","import React from 'react'\n\nimport Navbar from './Navbar'\n\nimport './header.scss'\n\nexport const Header: React.FC = () => {\n    return (\n        <header className=\"header\">\n            <Navbar />\n        </header>\n    )\n    \n} ","export default __webpack_public_path__ + \"static/media/icons8-github.164d6380.svg\";","import { IMessage } from \"../app-interface\"\n\nexport const AppActions = {\n    // CHECK_LOCAL_STORAGE: 'CHECK_LOCAL_STORAGE',\n    SET_PORTRAIT: 'SET_PORTRAIT',\n    CLOSE: 'CLOSE',\n    WINDOW_SIZE: 'WINDOW_SIZE',\n    ADD_MESSAGE_TO_GAME_CHAT: 'ADD_MESSAGE_TO_GAME_CHAT',\n    ADD_MESSAGE_TO_COMMON_CHAT: 'ADD_MESSAGE_TO_COMMON_CHAT',\n}\n\nexport interface AddToGameChatAction {\n    type: typeof AppActions.ADD_MESSAGE_TO_GAME_CHAT\n    payload: IMessage\n}\n\nexport interface AddToCommonChatAction {\n    type: typeof AppActions.ADD_MESSAGE_TO_COMMON_CHAT\n    payload: IMessage\n}\n\nexport interface SetWindowSize {\n    type: typeof AppActions.WINDOW_SIZE\n    payload: {width: number, height: number}\n}\n\nexport interface SetPortraitAction {\n    type: typeof AppActions.SET_PORTRAIT,\n    payload: boolean\n}\n\nexport interface CloseAction {\n    type: typeof AppActions.CLOSE,\n    payload: string\n}\n\nexport type AppActionTypes = SetPortraitAction \n| CloseAction \n| SetWindowSize\n| AddToCommonChatAction\n| AddToGameChatAction\n","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\n\n\nimport git from '../assets/icons8-github.svg'\nimport { BaseBoardSize } from '../constants/gameConstants'\nimport { IRootState } from '../store/rootState&Reducer'\nimport {setPortrait, setWindowSize, close} from '../store/app/actions'\n\nimport './footer.scss'\n\nconst mapState = (state: IRootState) => ({\n    token: state.user.token,\n    windowSize: state.app.windowSize,\n    portrait: state.app.portrait,\n    game: state.game.gameMode === 'isPlaying'\n})\nconst mapDispatch = {close, setWindowSize, setPortrait}\n\nconst connector = connect(mapState, mapDispatch)\n\nclass Footer extends React.Component<ConnectedProps<typeof connector>> {\n\n    componentDidMount() {\n        if (!window) return\n        window.addEventListener(\"beforeunload\", this.onClose)\n        window.addEventListener('resize', this.handleResize) \n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"beforeunload\", this.onClose)\n        window.removeEventListener(\"resize\", this.handleResize)\n    }\n\n    handleResize = () => {\n        if (!window) return\n        const {windowSize, setPortrait, setWindowSize, portrait} = this.props\n        const {width, height} = windowSize\n        const {innerHeight, innerWidth} = window\n        if ((Math.abs(width - innerWidth) > BaseBoardSize / 2 || Math.abs(height - innerHeight) > BaseBoardSize / 2)) {\n            setWindowSize({width: innerWidth, height: innerHeight})\n            if (portrait && innerWidth / innerHeight > 1.3) {\n                setPortrait(false)\n            } else if (!portrait && innerWidth / innerHeight <= 1.3) {\n                setPortrait(true)\n            }\n        }\n    }\n\n    onClose = (e: any) => {\n        e.preventDefault();\n        const token = this.props.token\n        if (token) this.props.close(token)\n        \n    }\n\n    render() {\n        return <footer>\n                    <a href=\"https://github.com/evgmsk\" target=\"blanc\" referrerPolicy=\"no-referrer\">\n                        designed by evgmsk&nbsp;&nbsp;\n                        <img height=\"10px\" width=\"10px\" src={git} alt=\"github\"/>\n                    </a>\n                </footer>\n    }\n}\n\nexport default (connector(Footer))\n","import { IMessage } from '../app-interface'\nimport {AppActions, AppActionTypes} from './types'\n\nexport function addMessageToGameChat(payload: IMessage): AppActionTypes {\n    return {\n        type: AppActions.ADD_MESSAGE_TO_GAME_CHAT,\n        payload\n    } \n}\n\nexport function setPortrait(payload: boolean): AppActionTypes {\n    return {\n        type: AppActions.SET_PORTRAIT,\n        payload\n    }\n}\n\nexport function close(payload: string): AppActionTypes {\n    return ({\n        type: AppActions.CLOSE, \n        payload\n    })\n}\n\nexport function startGame(payload: string): AppActionTypes {\n    return ({\n        type: AppActions.CLOSE,\n        payload\n    })\n}\n\nexport function setWindowSize(payload: {width: number, height: number}): AppActionTypes {\n    return {\n        type: AppActions.WINDOW_SIZE,\n        payload\n    }\n}\n","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nimport RouterComponent from './AppRoutes';\nimport { Header } from './page-components/Header';\nimport Footer from './page-components/Footer';\n\n\n\nimport './App.scss'\n\nconst App: React.FC  = () => {\n\n    return (\n        <Router> \n            <Header />\n                <RouterComponent />\n            <Footer />\n        </Router>   \n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {PieceColor, IGameState, IMoveOrder, IMoveProps, IBoardToGame, IPlayer, IGameMode} from '../app-interface'\nimport { GameActions, GameActions as GM, GameActionTypes} from \"./types\";\n\nexport const InitialGameState: IGameState = {\n    moveOrder: {pieceOrder: PieceColor.w, playerTurn: ''},\n    gameConfirmed: false,\n    gameStarted: false,\n    history: [],\n    playerColor: PieceColor.w,\n    white: {} as IPlayer,\n    black: {} as IPlayer,\n    rivalOfferedDraw: false,\n    ineffectiveMoves: 0,\n    gameMode: 'isPreparing'\n}\n\nexport function gameReducer(state: IGameState = InitialGameState, action: GameActionTypes): IGameState {\n    switch(action.type) {\n        case (GM.CLEAR_HISTORY): {\n            return {...state, history: []}\n        }\n        case(GM.SET_GAME_STARTED):\n            return {...state, gameStarted: action.payload as boolean}\n        case(GM.UPDATE_GAME_STATE):\n            return {...state, ...action.payload as IBoardToGame}  \n        case(GM.SAVE_MOVE_TO_HISTORY):\n            return {...state, history: state.history.concat(action.payload as unknown as string)}\n        case(GM.SET_MOVE_ORDER):\n            return {...state, moveOrder: action.payload as IMoveOrder}\n        case(GM.MAKE_MOVE): {\n            const {moveToSave, moveOrder} = action.payload as IMoveProps\n            const history = state.history.concat(moveToSave.move)\n            return {...state, moveOrder, history}\n        }\n        case(GameActions.CONFIRM_START_GAME):\n            return {...state, gameConfirmed: action.payload as boolean}\n        case(GM.SET_GAME):\n            return {...state,...action.payload as Partial<IGameState>}\n        case(GM.INEFFECTIVE_MOVE): {\n            return {...state, ineffectiveMoves: action.payload as number}\n        }\n        case(GM.RIVAL_OFFER_DRAW):\n            return {...state, rivalOfferedDraw: true}\n        case(GM.DECLINE_DRAW):\n            return {...state, rivalOfferedDraw: false}\n        case(GM.SET_GAME_MODE):\n            return {...state, gameMode: action.payload as IGameMode}\n        default:\n            return state \n    }\n}\n","import {GameOptionActions, GameOptionActionTypes} from './types'\nimport {\n    PieceColor,\n    IGameOptionState,\n    Timing,\n    RivalType,\n    GameVariants,\n    GameType,\n} from '../app-interface'\n\nexport const InitialGameOptionsState: IGameOptionState = {\n    gameVariant: 'towers',\n    timing: {timeToGame: 5, adds: 0},\n    playerColor: 'random',\n    rivalType: 'PC',\n    rivalLevel: 1,\n    gameSetupFinished: false,\n    waitingRival: false,\n    gameType: 'ranked'\n}\n\nexport function gameOptionsReducer(state = InitialGameOptionsState, action: GameOptionActionTypes): IGameOptionState {\n    switch(action.type) {\n        case GameOptionActions.SET_GAME_TYPE: {\n            return {...state, gameType: action.payload as GameType}\n        }    \n        case(GameOptionActions.CHOOSE_COLOR):\n            return {...state, playerColor: action.payload as PieceColor | 'random'}\n        case(GameOptionActions.SET_GAME_TIMING): {\n            return {...state, timing: action.payload as Timing}\n        }\n        case(GameOptionActions.SET_RIVAL_TYPE): {\n            return {...state, rivalType: action.payload as RivalType}\n        }\n        case(GameOptionActions.SET_RIVAL_LEVEL): {\n            return {...state, rivalLevel: action.payload as number}\n        }\n        case(GameOptionActions.FINISH_GAME_SETUP):\n            return {...state, gameSetupFinished: action.payload as boolean}\n        case GameOptionActions.WAIT_RIVAL:\n            return {...state, waitingRival: action.payload as boolean}\n        case GameOptionActions.SET_GAME_VARIANT:\n            return {...state, gameVariant: action.payload as GameVariants}\n        default: \n            return {...state}    \n    }\n}\n","import { IUser } from '../app-interface'\nimport {UserActionTypes, UserActions as UA} from './types'\n\nexport const InitialUserState: IUser = {\n    name: null as string | null,\n    userId: null as string | null,\n    token: null as string | null,\n    rating: 0,\n    language: navigator.language,\n}\n\nexport function userReducer(state = InitialUserState, action: UserActionTypes): IUser {\n    switch(action.type) {\n        case(UA.LOGIN_SUCCEED): {\n            return {...state, ...action.payload as IUser} \n        }\n        case UA.SET_PREFERABLE_LANGUAGE:\n            return {...state, language: action.payload as string}\n        case(UA.LOGOUT):\n            return {...state, ...InitialUserState}\n        case(UA.GET_USER_FROM_STORAGE): {\n            return {...state, ...action.payload as IUser}\n        }\n        default:\n            return state\n    }\n}\n","import { IApp, IMessage } from '../app-interface'\nimport {AppActions, AppActionTypes} from './types'\n\nexport const AppDefaultState: IApp = {\n    windowSize: {width: window?.innerWidth || 100, height: window?.innerHeight || 100},\n    portrait: (window?.innerWidth || 100) / (window?.innerHeight || 100) < 1.3,\n    commonChat: [] as IMessage[],\n    gameChat: [] as IMessage[],\n}\n\n\nexport function appReducer(state = AppDefaultState, action: AppActionTypes): IApp {\n    switch (action.type) {\n        case AppActions.WINDOW_SIZE:\n            return {...state, windowSize: action.payload as {width: number, height: number}}\n        case AppActions.SET_PORTRAIT:\n            return {...state, portrait: action.payload as boolean}\n        default:\n            return state\n    }\n}\n ","import { IClock } from \"../app-interface\";\n\nexport const ClockActions = {\n    WHITE_TICK: 'WHITE_TICK',\n    BLACK_TICK: 'BLACK_TICK',\n    SET_WHITE_CLOCK: 'SET_WHITE_CLOCK',\n    SET_BLACK_CLOCK: 'SET_BLACK_CLOCK',\n    WHITE_PRESTART_TICK: 'WHITE_PRESTART_TICK',\n    BLACK_PRESTART_TICK: 'BLACK_PRESTART_TICK',\n    SET_CLOCK: 'SET_CLOCK'\n}\n\ninterface WhitePrestartTickAction {\n    type: typeof ClockActions.WHITE_PRESTART_TICK,\n    payload: number\n}\n\ninterface BlackPrestartTickAction {\n    type: typeof ClockActions.BLACK_PRESTART_TICK,\n    payload: number\n}\n\ninterface BlackTickAction {\n    type: typeof ClockActions.BLACK_TICK,\n    payload?: number\n}\n\ninterface WhiteTickAction {\n    type: typeof ClockActions.WHITE_TICK,\n    payload?: number\n}\n\n\ninterface SetWhiteClockAction {\n    type: typeof ClockActions.SET_WHITE_CLOCK,\n    payload: IClock\n}\n\ninterface SetBlackClockAction {\n    type: typeof ClockActions.SET_BLACK_CLOCK,\n    payload: IClock\n}\n\ninterface SetClockAction {\n    type: typeof ClockActions.SET_CLOCK,\n    payload: {whiteClock: IClock, blackClock: IClock}\n}\n\n\nexport type ClockActionTypes = WhitePrestartTickAction\n| BlackPrestartTickAction\n| SetWhiteClockAction\n| SetBlackClockAction\n| WhiteTickAction\n| BlackTickAction\n| SetClockAction\n","import { PrestartTimeLimit, DefaultTime } from \"../../constants/gameConstants\"\nimport {  IClock } from \"../app-interface\"\nimport { ClockActionTypes, ClockActions } from \"../clock/types\"\n\nexport interface IClockState  {whiteClock: IClock, blackClock: IClock}\n\nexport const InitialClockState: IClockState = {\n    whiteClock: {\n        timeToFirstMove: PrestartTimeLimit,\n        timeToGame: DefaultTime,\n        adds: 0\n    },\n    blackClock:{\n        timeToFirstMove: PrestartTimeLimit,\n        timeToGame: DefaultTime,\n        adds: 0\n    },\n}\n\nexport function clockReducer(state: IClockState = InitialClockState, action: ClockActionTypes): IClockState {\n    switch(action.type) {\n        case ClockActions.SET_BLACK_CLOCK: {\n            return {...state, blackClock: action.payload as IClock}\n        }\n        case ClockActions.SET_WHITE_CLOCK: {\n            return {...state, whiteClock: action.payload as IClock}\n        }\n        case(ClockActions.BLACK_PRESTART_TICK): {\n            const timeToFirstMove = state.blackClock.timeToFirstMove! - 1\n            return {...state, blackClock: {...state.blackClock, timeToFirstMove}}\n        }   \n        case(ClockActions.WHITE_PRESTART_TICK): {\n            const timeToFirstMove = state.whiteClock.timeToFirstMove! - 1\n            return {...state, whiteClock: {...state.whiteClock, timeToFirstMove}}\n        }\n        case(ClockActions.WHITE_TICK): {\n            const timeToGame = state.whiteClock.timeToGame - 1\n            return {...state, whiteClock: {...state.whiteClock, timeToGame}}\n        }   \n        case(ClockActions.BLACK_TICK): {\n            const timeToGame = state.blackClock.timeToGame - 1\n            return {...state, blackClock: {...state.blackClock, timeToGame}}\n        }\n        case ClockActions.SET_CLOCK: {\n            return {...state, ...action.payload as {whiteClock: IClock, blackClock: IClock}}\n        }\n        default:\n            return state \n    }\n}\n","import { IAnalysisState, IGameResult, PieceColor } from \"../app-interface\"\nimport { GameAnalysisActions, GameAnalysisTypes } from \"./types\"\n\nexport const InitialGameAnalysisState: IAnalysisState = {\n    gameResult: {} as IGameResult,\n    analyzeLastGame: false,\n    settingPosition: true,\n    movesMainLine: [],\n    pieceOrder: PieceColor.w,\n    movesCurrentLine: [],\n    lastMove: {} as {index: -1, move: ''},\n    depth: 5,\n    evaluate: false,\n    removePiece: false,\n    startPosition: false,\n}\n\n export function analyzeReducer(state = InitialGameAnalysisState, action: GameAnalysisTypes): IAnalysisState {\n    switch(action.type) {\n        case GameAnalysisActions.REMOVE_PIECE: {\n            return {...state, removePiece: action.payload as boolean}\n        }\n        case(GameAnalysisActions.SAVE_GAME_RESULT): {\n            const payload =  action.payload as IGameResult\n            return {...state, gameResult: payload, movesMainLine: payload.movesHistory || []}\n        }\n        case(GameAnalysisActions.SET_DEPTH): {        \n            return {...state, depth: action.payload as number}\n        }\n        case(GameAnalysisActions.EVALUATE_POSITION): {        \n            return {...state, evaluate: action.payload as boolean}\n        }\n        case(GameAnalysisActions.SETTING_BOARD): {        \n            return {...state, settingPosition: action.payload as boolean}\n        }\n        case(GameAnalysisActions.ANALYZE_LAST_GAME): {\n            if (action.payload) {\n                return {...state, analyzeLastGame: action.payload as boolean, settingPosition: false}\n            }    \n            return {...state, analyzeLastGame: action.payload as boolean}\n        }\n        case(GameAnalysisActions.DOWNLOAD_GAME): {        \n            return {...state, gameResult: action.payload as IGameResult}\n        }\n        case GameAnalysisActions.UPDATE_ANALYSIS_STATE: {\n            return {...state, ...action.payload as Partial<IAnalysisState>}\n        }\n        default:\n            return {...state}\n    }\n} \n","import { BaseBoardSize, BaseCellSize} from \"../../constants/gameConstants\"\nimport { createStartBoard } from \"../../game-engine/prestart-help-function-constants\"\nimport { \n    IBoardAndTowers, \n    IBoardToGame,\n    TowerTouched \n} from \"../app-interface\"\nimport { BoardActions, BoardActionTypes } from \"./types\"\n\nexport const InitialBoardState: IBoardAndTowers = {\n    lastMoveSquares: [],\n    towerTouched: null as unknown as TowerTouched,\n    cellSize: BaseCellSize,\n    cellsMap: new Map(),\n    currentPosition: createStartBoard(BaseBoardSize),\n    towers: new Map(),\n    mandatoryMoves: [],\n    posibleMoves: new Map(),\n    mouseDown: false,\n    towerView: \"face\",\n    mandatoryMoveStep: 0,\n    animationStarted: false,\n    moveDone: false\n}\n\n export function boardReducer(state = InitialBoardState, action: BoardActionTypes) {\n    switch(action.type) {\n        case BoardActions.UPDATE_POSITION_TREE:\n            return {...state, positionsTree: action.payload as Map<string, IBoardToGame>}\n        case BoardActions.UPDATE_BOARD_STATE:\n            return {...state, ...action.payload as Partial<IBoardAndTowers>}\n        default:\n            return {...state}\n    }\n}\n","import { BaseBoardSize } from \"../../constants/gameConstants\"\nimport {  \n    BoardNotation, \n    IBoardOptions,\n} from \"../app-interface\"\nimport { BoardOptionActions, BoardOptionActionTypes } from \"./types\"\n\n\nexport const InitialBoardOptionsState: IBoardOptions = {\n    boardTheme: 'standart',\n    withOutLegend: false,\n    lengendsInside: false,\n    boardNotation: BoardNotation.r,\n    boardSize: BaseBoardSize,\n    reversedBoard: false,\n}\n\n export function boardOptionsReducer(state = InitialBoardOptionsState, action: BoardOptionActionTypes) {\n    switch(action.type) {\n        case BoardOptionActions.REVERSE_BOARD: {\n            return {...state, reversedBoard: action.payload as boolean}\n        }\n        case BoardOptionActions.SET_BOARD_NOTATION:\n            return {...state, boardNotation: action.payload as BoardNotation}\n        case BoardOptionActions.SET_BOARD_SIZE:\n            return {...state, boardSize: action.payload as number}\n        case BoardOptionActions.SET_BOARD_THEME:\n            return {...state, boardTheme: action.payload as string}\n        case BoardOptionActions.SET_GAME_BOARD_OPTIONS:\n            return {...state, ...action.payload as IBoardOptions}\n        default:\n            return {...state}\n    }\n}\n","import { IAnalysisState, IApp, IBoardAndTowers, IBoardOptions, IGameOptionState, IGameState, IUser } from './app-interface';\nimport {InitialGameState, gameReducer} from './game/reducers'\nimport {InitialGameOptionsState, gameOptionsReducer} from './gameOptions/reducers'\nimport {InitialUserState, userReducer} from './user/reducer'\nimport {GameActionTypes} from './game/types'\nimport {UserActionTypes} from './user/types'\nimport {GameOptionActionTypes} from './gameOptions/types'\nimport {appReducer, AppDefaultState} from './app/reducers'\nimport { AppActionTypes } from './app/types';\nimport { InitialClockState, clockReducer, IClockState } from './clock/reducers';\nimport {ClockActionTypes} from './clock/types'\nimport { analyzeReducer, InitialGameAnalysisState } from './gameAnalysis/reducers';\nimport { GameAnalysisTypes } from './gameAnalysis/types';\nimport { boardReducer, InitialBoardState } from './board/reducers';\nimport { BoardActionTypes } from './board/types';\nimport { boardOptionsReducer, InitialBoardOptionsState } from './boardOptions/reducers';\nimport { BoardOptionActionTypes } from './boardOptions/types';\n\nexport const InitialState: IRootState = {\n  user: InitialUserState,\n  game: InitialGameState,\n  gameOptions: InitialGameOptionsState,\n  app: AppDefaultState,\n  clock: InitialClockState,\n  analyze: InitialGameAnalysisState,\n  board: InitialBoardState,\n  boardOptions: InitialBoardOptionsState\n};\n\nexport interface IRootState {\n  app: IApp\n  user: IUser\n  game: IGameState\n  gameOptions: IGameOptionState\n  clock: IClockState\n  analyze: IAnalysisState\n  board: IBoardAndTowers\n  boardOptions: IBoardOptions\n}\n\nexport const AppReducers = {\n  game: gameReducer,\n  gameOptions: gameOptionsReducer,\n  user: userReducer,\n  app: appReducer,\n  clock: clockReducer,\n  analyze: analyzeReducer,\n  board: boardReducer,\n  boardOptions: boardOptionsReducer\n}; \n\nexport type AppActions = GameActionTypes \n  | GameOptionActionTypes \n  | UserActionTypes \n  | AppActionTypes \n  | ClockActionTypes\n  | GameAnalysisTypes\n  | BoardActionTypes\n  | BoardOptionActionTypes\n\nexport const getUser = (state: IRootState) => state.user\n\nexport const getGameOptions = (state: IRootState) => state.gameOptions\n\nexport const getGame = (state: IRootState) => state.game\n","import { put, takeLatest, select, delay } from 'redux-saga/effects';\nimport {\n    IGameResult,\n    PieceColor,\n    EndGameConditions,\n    IMoveProps,\n    IGameState,\n    IMoveOrder,\n    IPlayer,\n    INewGameProps,\n    IClock\n} from '../app-interface';\nimport {GameActions, GameActions as GM, GameActionTypes, GameActionTypes as GMA} from '../game/types'\nimport {ClockActions} from '../clock/types'\n// import {sendMessage} from '../../web-sockets/ws'\n// import { IRootState } from '../rootState&Reducer';\nimport { oppositColor } from '../../game-engine/gameplay-helper-fuctions';\n// import { Axios, setAuthorizationHeader } from '../../common/axios';\nimport { GameAnalysisActions } from '../gameAnalysis/types';\nimport {checkIfNumberOfKingsChanged} from '../../game-engine/gameplay-helper-fuctions'\nimport { InitialGameState } from '../game/reducers';\nimport { AnimationDuration } from '../../constants/gameConstants';\nimport { AppActions } from '../app/types';\nimport { BoardActions } from '../board/types';\nimport {GameOptionActions as GOA} from '../gameOptions/types'\nimport {BoardOptionActions as BOA} from '../boardOptions/types'\nimport mmr from '../../game-engine/mandatory-move-resolver'\nimport tur from '../../game-engine/update-towers-functions'\n\nfunction* workerNewGameVSPlayer(action: GMA) {\n    yield put({type: GOA.WAIT_RIVAL, payload: false})\n    const { \n        game: {gameMode},\n        boardOptions: {boardSize},\n        gameOptions: {gameVariant, timing, playerColor}\n    } = yield select()\n    if (gameMode === 'isPlaying') {\n        yield put({type: GameActions.SET_GAME, payload: InitialGameState})\n    }\n    let color: PieceColor = playerColor\n    if (playerColor === 'random') {\n        color = Math.random() < .5 ? PieceColor.w : PieceColor.b\n    }\n    const {timeToGame, adds, timeToFirstMove = 10} = timing\n    const black = {name: 'Black'}\n    const white = {name: \"White\"}\n    const clock: IClock = {\n        timeToGame: timeToGame * 60,\n        adds,\n        timeToFirstMove\n    }\n    yield put({type: BOA.REVERSE_BOARD, payload: color === PieceColor.b})\n    const gamePayload: Partial<IGameState> = {\n        moveOrder: {pieceOrder: PieceColor.w, playerTurn: 'White'},\n        black,\n        white,\n        gameStarted: true,\n        playerColor: color,\n        history: [],\n        gameConfirmed: true,\n        gameMode: 'isPreparing',\n        portrait: window.innerWidth / window.innerHeight < 1.3,\n        ineffectiveMoves: 0,\n    }\n    tur.setProps({GV: gameVariant, size: boardSize})\n    mmr.setProps({GV: gameVariant, size: boardSize})\n    yield put({type: BoardActions.CREATE_GAME_BOARD})\n    yield put({type: GM.SET_GAME, payload: gamePayload})\n    yield put({type: ClockActions.SET_CLOCK, payload: {blackClock: clock, whiteClock: clock}})\n    yield put({type: GOA.FINISH_GAME_SETUP, payload: true})\n    delay(AnimationDuration*3)\n    yield put({type: GM.SET_GAME_MODE, payload: 'isPlaying'})\n}\n\nfunction* workerNewGameVsPC() {\n    const {\n        gameOptions: {playerColor, rivalLevel = 1, gameVariant},\n        boardOptions: {boardSize},\n        user: {name, rating},\n        game: {gameMode}\n    } = yield select()\n    if (gameMode === 'isPlaying') {\n        yield put({type: GameActions.SET_GAME, payload: InitialGameState})\n    }\n    yield delay(30)\n    let color: PieceColor = playerColor\n    if (playerColor === 'random') {\n        color = Math.random() < .5 ? PieceColor.w : PieceColor.b\n    }\n    const rival = {name: `Bot ${rivalLevel}`}\n    const moveOrder: IMoveOrder = {\n        pieceOrder: PieceColor.w,\n        playerTurn: color === PieceColor.w ? name : rival.name\n    }\n    yield put({type: BOA.REVERSE_BOARD, payload: color === PieceColor.b})\n    const white = color === PieceColor.w ? {name, rating} : {name: rival.name} as IPlayer\n    const black = color === PieceColor.w ? {name: rival.name, rivalLevel} : {name, rating} as IPlayer\n    const gamePayload: Partial<IGameState> = {\n        moveOrder,\n        playerColor: color,\n        white,\n        black,\n        history: [],\n        gameConfirmed: true,\n        gameStarted: true,\n        gameMode: 'isPreparing',\n        portrait: window.innerWidth / window.innerHeight < 1.3,\n        ineffectiveMoves: 0\n    }\n    mmr.setProps({GV: gameVariant, size: boardSize})\n    tur.setProps({GV: gameVariant, size: boardSize})\n    yield put({type: BoardActions.CREATE_GAME_BOARD})\n    yield put({type: GM.SET_GAME, payload: gamePayload})\n    yield put({type: AppActions.SET_PORTRAIT, payload: window.innerWidth / window.innerHeight < 1.3,})\n    yield put({type: GOA.FINISH_GAME_SETUP, payload: true})\n    delay(AnimationDuration*3)\n    yield put({type: GM.SET_GAME_MODE, payload: 'isPlaying'})\n}\n\nfunction* checkDraw (payload: IMoveProps) {\n    const {gameOptions: {gameVariant}, board: {currentPosition}, game: {ineffectiveMoves}} = yield select()\n    const numberOfKingsChanged = checkIfNumberOfKingsChanged(currentPosition, payload.moveToSave.position)\n    if (payload.moveToSave.move.includes(':') || numberOfKingsChanged) {\n        yield put({type: GM.INEFFECTIVE_MOVE, payload: 0})\n    } else if ((gameVariant !== 'international' && ineffectiveMoves < 36) \n        || (gameVariant === 'international' && ineffectiveMoves < 50)) {\n        yield put({type: GM.INEFFECTIVE_MOVE, payload: ineffectiveMoves + 1})\n    } else {\n        yield put({type: GM.END_GAME, payload: 'drawByRules'})\n    }\n}\n\n// function* workerDrawOffer(action: GMA) {\n//     const {gameOptions: {rivalType}, game: {gameKey}} = yield select()\n//     // if (rivalType !== 'PC') sendMessage({message: 'game draw offered', payload: {gameKey}})\n// }\n\n// function* workerDrawRespond(action: GMA) {\n  \n//     yield put({type: GM.RIVAL_OFFER_DRAW, payload: false})\n//     // sendMessage({message: 'game draw rejected', payload: {gameKey}})\n// }\n\nfunction* workerPlayerClockAfterMove(payload: IMoveProps) {\n    const {\n        game: {gameConfirmed, history},\n        clock: {whiteClock, blackClock}\n    } = yield select()\n    if (gameConfirmed) {\n        if (payload.moveOrder.pieceOrder === PieceColor.w) {\n            const payload = {...blackClock, timeToGame: blackClock.timeToGame + blackClock.adds}\n            yield put({type: ClockActions.SET_BLACK_CLOCK, payload})\n            yield put({type: ClockActions.WHITE_TICK})\n        } else {\n            const payload = {...whiteClock, timeToGame: whiteClock.timeToGame + whiteClock.adds}\n            yield put({type: ClockActions.SET_WHITE_CLOCK, payload})\n            yield put({type: ClockActions.BLACK_TICK})\n        }\n    } else if (history.length > 1) {\n        yield put({type: GM.CONFIRM_START_GAME, payload: true})\n        if (payload.moveOrder.pieceOrder === PieceColor.w) {\n            yield put({type: ClockActions.WHITE_TICK})\n        } else {\n            yield put({type: ClockActions.BLACK_TICK})\n        }\n    } else {\n        if (payload.moveOrder.pieceOrder === PieceColor.b) {\n            yield put({type: ClockActions.BLACK_PRESTART_TICK})\n        } else { \n            yield put({type: ClockActions.WHITE_PRESTART_TICK})\n        }\n    }\n}\n\nfunction* workerMove(action: GMA) {\n    const {\n        game: {gameStarted},\n    } = yield select()\n    const payload: IMoveProps = action.payload as IMoveProps\n    if (!gameStarted) return\n    yield checkDraw(payload)\n    workerPlayerClockAfterMove(payload)\n}\n\nfunction* workerGameEnd(action: GMA) {\n    const {game: {moveOrder: {pieceOrder}}, clock: {blackClock}} = yield select()\n    const draw = action.payload === 'drawByAgreement' || action.payload === 'drawByRules'\n    let winner: PieceColor | 'draw'\n    if (action.payload === 'abandonedByWhite') {\n        winner = PieceColor.b\n    } else if (action.payload === 'abandonedByBlack') {\n        winner = PieceColor.w\n    } else if (action.payload === 'outOfTime') {\n        winner = !blackClock.timeToGame ? PieceColor.w : PieceColor.b\n    } else {\n        winner = draw ? 'draw' : oppositColor(pieceOrder)\n    }\n    yield resolveEndGame(winner, action.payload as EndGameConditions)\n}\n\nfunction* workerSurrender(action: GMA) {\n    const winner = oppositColor(action.payload as PieceColor)\n    yield resolveEndGame(winner, 'surrender')\n}\n\nfunction* resolveEndGame(winner: PieceColor | 'draw', reason: EndGameConditions) {\n    const { \n        game: {history, white, black, playerColor},\n    } = yield select(state => state)\n    const {\n        gameOptions: {gameVariant, timing: {timeToGame, adds}}, \n        boardOptions: {boardSize}\n    } = yield select()\n        // const token: string = yield select((state: IRootState) => state.user.token)\n        const PC = playerColor === PieceColor.w ? black.name : white.name\n        const gameResult: Partial<IGameResult> & {PC: string, playerColor: PieceColor} = {\n            winner,\n            reason,\n            timing: `${timeToGame}/${adds}`,\n            playerColor,\n            PC,\n            gameVariant,\n            movesHistory: history,\n            boardSize,\n            date: new Date()\n        }\n        yield put({type: GameAnalysisActions.SAVE_GAME_RESULT, payload: gameResult})\n        const analysisPayload = {\n            movesMainLine: history,\n            lastMove: {index: history.length - 1, move: history.slice(-1)[0]}\n        }\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: analysisPayload})\n        const game = {\n            ...InitialGameState, gameMode: 'isOver',\n        } as IGameState\n        yield put({type: GM.SET_GAME, payload: game})    \n}\n\nfunction* cancelGameWorker(action: GameActionTypes) {\n\n    yield put({type: GM.SET_GAME_STARTED, payload: false})\n    yield put({type: GM.SET_GAME_MODE, payload: 'isOver'})\n}\n\nexport default function* watcherGame() {\n    yield takeLatest(GM.END_GAME, workerGameEnd)\n    // yield takeLatest(GM.DECLINE_DRAW, workerDrawRespond)\n    // yield takeLatest(GM.OFFER_DRAW, workerDrawOffer)\n    yield takeLatest(GM.MAKE_MOVE, workerMove)\n    yield takeLatest(GM.SURRENDER, workerSurrender)\n    yield takeLatest(GM.CANCEL_GAME, cancelGameWorker)\n    yield takeLatest(GM.NEW_GAME_VS_PLAYER, workerNewGameVSPlayer)\n    yield takeLatest(GM.NEW_GAME_VS_PC, workerNewGameVsPC)\n}\n","import { call, put, takeLatest, select } from 'redux-saga/effects';\n\nimport {FindOpponentAction, SetGameVariantAction, GameOptionActions as GOA} from '../gameOptions/types'\n// import { BoardOptionActions as BOA } from '../boardOptions/types';\nimport {GameActions as GA} from '../game/types'\nimport { createEmptyBoard} from '../../game-engine/prestart-help-function-constants';\n// import { sendMessage } from '../../web-sockets/ws';\nimport { GameAnalysisActions } from '../gameAnalysis/types';\nimport { BoardOptionActions } from '../boardOptions/types';\n\n\n \nfunction* findRival(action: FindOpponentAction) {\n    const {gameOptions: {rivalType}} = yield select()\n    if (rivalType === 'PC') {\n        yield put({type: GA.NEW_GAME_VS_PC})\n    } else if (rivalType === 'player') {\n        console.log('player')\n        yield put({type: GA.NEW_GAME_VS_PLAYER})\n    }\n}\n\nfunction* lookForRival() {\n    const {\n        boardOptions: {boardSize}, \n        gameOptions: {\n            playerColor,\n            timing: {timeToGame, adds}, \n            gameVariant\n        },\n        user: {\n            rating\n        }\n    } = yield select()\n    const payload = {boardSize, playerColor, timing: `${timeToGame}/${adds}`, gameVariant, rating}\n    const message = \"rival\"\n    try {\n        console.log('send')\n        // sendMessage({message, payload})\n    } catch(e) {\n        console.log(e)\n        yield put({type: GOA.FINISH_GAME_SETUP, payload: false})\n        yield put({type: GOA.WAIT_RIVAL, payload: false})\n    }\n}\n\n\nfunction* cancelRival() {\n    const {gameOptions: {gameVariant, timing}} = yield select()\n    yield put({type: GOA.WAIT_RIVAL, payload: false})\n    const payload = {waitingListKey: `${gameVariant}${timing.timeToGame}/${timing.adds}`}\n    // sendMessage({message: 'cancel rival', payload})\n}\n\nfunction* workerGameVariant(action: SetGameVariantAction) {\n    if (action.payload === 'international') {\n        yield put({type: BoardOptionActions.SET_BOARD_SIZE, payload: 10})\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: {currentPosition: createEmptyBoard(10)}})\n    } else {\n        yield put({type: BoardOptionActions.SET_BOARD_SIZE, payload: 8})\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: {currentPosition: createEmptyBoard(8)}})\n    }\n}\n\nexport default function* watcherPreGame() {\n    yield takeLatest(GOA.FIND_RIVAL, findRival);\n    yield takeLatest(GOA.CANCEL_RIVAL_WAITING, cancelRival)\n    yield takeLatest(GOA.SET_GAME_VARIANT, workerGameVariant)\n}\n","import { put, takeLatest, delay, select} from 'redux-saga/effects';\n\nimport { Interval} from '../../constants/gameConstants';\nimport { PieceColor } from '../app-interface';\nimport { ClockActions, ClockActionTypes } from '../clock/types';\nimport { GameActions, GameActionTypes} from '../game/types'\nimport { GameAnalysisActions } from '../gameAnalysis/types';\n\nfunction* workerGameClock() { \n    const {\n        game: {\n            gameStarted,\n            gameConfirmed,\n            moveOrder\n        },\n        clock: {\n            whiteClock,\n            blackClock,\n        }\n    } = yield select()\n    if (!gameConfirmed || !gameStarted) {\n        return\n    }\n    if (whiteClock.timeToGame <= 0 || blackClock.timeToGame <= 0) {\n        yield put ({type: GameActions.END_GAME, payload: 'outOfTime'})\n        return\n    }\n    yield delay(Interval)\n    if (moveOrder.pieceOrder === PieceColor.w) {\n        yield put({type: ClockActions.WHITE_TICK})\n    } else {\n        yield put({type: ClockActions.BLACK_TICK})\n    }  \n}\n\n\nfunction* workerStartClock(action: GameActionTypes) {\n    const {gameOptions: {rivalType}, game: {gameConfirmed}} = yield select()\n    if (action.payload === 'isPlaying' && rivalType !== 'PC') {\n        if (gameConfirmed) {\n            yield put({type: ClockActions.WHITE_TICK})\n        } else {\n            yield put({type: ClockActions.WHITE_PRESTART_TICK})\n        } \n    }\n}\n\nfunction* workerPreTicks(action: ClockActionTypes) {\n    const {\n        clock: {\n            blackClock,\n            whiteClock,\n        },\n        game: {\n            gameMode,\n            gameConfirmed,\n           \n        },\n    } = yield select()\n    if (gameMode !== 'isPlaying' || gameConfirmed) {\n        return\n    }\n    if (whiteClock.timeToFirstMove <= 0 || blackClock.timeToFirstMove <= 0) {\n        yield put({type: GameActions.CANCEL_GAME})\n        yield put({type: GameAnalysisActions.SAVE_GAME_RESULT, payload: {}})\n        return\n    }\n    yield delay(Interval)\n    const {game: {moveOrder: {pieceOrder}}} = yield select()\n    if (pieceOrder === PieceColor.b) {\n        yield put({type: ClockActions.BLACK_PRESTART_TICK})\n    } else {\n        yield put({type: ClockActions.WHITE_PRESTART_TICK})\n    } \n}\n\nexport default function* watcherTimer() {\n    yield takeLatest(GameActions.SET_GAME_MODE, workerStartClock)\n    yield takeLatest(ClockActions.WHITE_PRESTART_TICK, workerPreTicks)\n    yield takeLatest(ClockActions.BLACK_PRESTART_TICK, workerPreTicks)\n    yield takeLatest(ClockActions.BLACK_TICK, workerGameClock)\n    yield takeLatest(ClockActions.WHITE_TICK, workerGameClock)\n}\n","import { put, takeLatest, select, call, delay } from 'redux-saga/effects';\n\nimport { IGameResult, PieceColor, IMoveProps, IAnalysisState} from '../app-interface';\n\nimport { copyMap, oppositColor, splitMove } from '../../game-engine/gameplay-helper-fuctions';\n// import { Axios, setAuthorizationHeader } from '../../common/axios';\nimport { GameAnalysisActions, GameAnalysisTypes } from '../gameAnalysis/types';\nimport { createDefaultTowers, createEmptyBoard, createStartBoard} from '../../game-engine/prestart-help-function-constants';\nimport { InitialGameAnalysisState } from '../gameAnalysis/reducers';\nimport { IRootState } from '../rootState&Reducer';\nimport { BoardActions } from '../board/types';\nimport tur from '../../game-engine/update-towers-functions'\nimport { AnimationDuration } from '../../constants/gameConstants';\n\n// function* workerUploadGame(action: GameAnalysisTypes) {\n//     const token: string = yield select((state) => state.user.token)\n//     try {\n//         setAuthorizationHeader(token)\n//         const respond: {[key: string]: any} = yield call(Axios.post, '/api/game/upload', JSON.stringify(action.payload))\n//         console.log(respond.data as IGameResult)\n//     } catch(e) {\n//         console.log(e)\n//     }\n// }\n\nfunction* workerUpdatePosition(action: GameAnalysisTypes) {\n    const {analyze, board: {positionsTree}} = yield select()\n    const {\n        movesCurrentLine,\n        movesMainLine,\n        lastMove,\n    } = analyze as IAnalysisState\n    const {moveToSave: {move, position}} = action.payload as IMoveProps\n    let nextLastMove, nextPositionKey;\n    if (movesMainLine![lastMove.index] === lastMove.move && movesMainLine!.length === lastMove.index + 1) {\n        nextLastMove = {move, index: lastMove.index + 1}\n        nextPositionKey = `${movesMainLine?.join('_')}_${move}`\n        positionsTree!.set(nextPositionKey, position!)\n        yield put({\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE,\n            payload: {\n                ...analyze,\n                lastMove: nextLastMove,\n                positionsTree,\n                movesMainLine: movesMainLine?.push(move)\n            }\n        })\n    } else if (movesMainLine![lastMove.index] === lastMove.move && movesMainLine!.length > lastMove.index + 1) {\n        nextLastMove = {move, index: lastMove.index + 1}\n        nextPositionKey = `${movesMainLine?.join('_')}_${move}`\n        positionsTree!.set(nextPositionKey, position!)\n        const newCurrentLine = [...movesMainLine!.slice(0, lastMove.index + 1), lastMove.move]\n        yield put({\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \n            payload: {...analyze, lastMove: nextLastMove, movesCurrentLine: newCurrentLine}\n        })\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {positionsTree}})\n    } else if (movesCurrentLine!.slice(-1)[0] === lastMove.move) {\n        nextLastMove = {move, index: lastMove.index + 1}\n        nextPositionKey = `${movesCurrentLine?.join('_')}_${move}`\n        positionsTree!.set(nextPositionKey, position!)\n        yield put({\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \n            payload: {...analyze, lastMove: nextLastMove, movesCurrentLine: movesCurrentLine?.push(move)}\n        })\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {positionsTree}})\n    }\n}\n\nfunction* workerStepForward(action: GameAnalysisTypes) {\n    const {analyze, board: {positionsTree}} = yield select()\n    const {\n        movesCurrentLine,\n        movesMainLine,\n        lastMove,\n        pieceOrder\n    } = analyze as IAnalysisState\n    let nextLastMove, currentPosition;\n    if (lastMove.index < 0) {\n        const move = movesMainLine![0]\n        nextLastMove = {index: 0, move}\n        currentPosition = positionsTree?.get(move)\n    } else if (movesMainLine![lastMove.index] === lastMove.move \n        && lastMove.index < movesMainLine!.length - 1) {\n            nextLastMove = {move: movesMainLine![lastMove.index + 1], index: lastMove.index + 1}\n            currentPosition = positionsTree!.get(movesMainLine!.slice(0, nextLastMove.index + 1).join('_'))\n    } else if (movesCurrentLine![lastMove.index] === lastMove.move \n        && lastMove.index < movesCurrentLine!.length - 1) {\n            nextLastMove = {move: movesCurrentLine![lastMove.index + 1], index: lastMove.index + 1}\n            currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, nextLastMove.index + 1).join('_'))\n    }\n    yield put({\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \n        payload: {...analyze, lastMove: nextLastMove, pieceOrder: oppositColor(pieceOrder)}\n    })\n    yield put({\n        type: BoardActions.UPDATE_BOARD_STATE,\n        payload: {currentPosition}\n    })\n}\n\nfunction* workerGoToPosition(action: GameAnalysisTypes) {\n    // console.log(action)\n    const {analyze, boardOptions, board: {positionsTree, cellsMap, cellSize}} = yield select()\n    const {\n        movesCurrentLine,\n        movesMainLine,\n    } = analyze as IAnalysisState\n    const {index, move} = action.payload as {index: number, move: string}\n    let currentPosition, lastMove, pieceOrder\n    if (index < 0) {\n        currentPosition = createStartBoard(boardOptions.boardSize)\n    } else if (movesMainLine![index] === move) {\n        currentPosition = positionsTree!.get(movesMainLine!.slice(0, index + 1).join('_'))\n        console.log(positionsTree, movesMainLine!.slice(0, index + 1).join('_'), currentPosition)\n    } else if (movesCurrentLine![index] === move) {\n        currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, index + 1).join('_'))\n    }\n    let towers  = tur.updateTowersToBoard(currentPosition)\n    towers = tur.updateTowersPosition(cellSize, towers, cellsMap, boardOptions.reversedBoard)\n    pieceOrder = index % 2 ? PieceColor.w : PieceColor.b\n    lastMove = action.payload\n    const payload = { lastMove, pieceOrder}\n    yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload})\n    yield put({\n        type: BoardActions.UPDATE_BOARD_STATE,\n        payload: {currentPosition, towers}\n    })\n}\n\nfunction* workerPlayMoves(action: GameAnalysisTypes) {\n    \n    const {analyze, board: {positionsTree, cellSize, cellsMap}, boardOptions: {reversedBoard}} = yield select()\n    const {\n        movesCurrentLine,\n        movesMainLine,\n        lastMove,\n        pieceOrder,\n    } = analyze as IAnalysisState\n    let nextLastMove, currentPosition;\n    const nextIndex = lastMove.index + 1\n    if (lastMove.index < 0) {\n        nextLastMove = {move: movesMainLine![0], index: 0}\n        currentPosition = positionsTree!.get(movesMainLine![0])\n    } else if (movesMainLine![lastMove.index] === lastMove.move) {\n        nextLastMove = {move: movesMainLine![lastMove.index + 1], index: lastMove.index + 1}\n        currentPosition = positionsTree!.get(movesMainLine!.slice(0, nextLastMove.index + 1).join('_'))\n    } else if (movesCurrentLine![lastMove.index] === lastMove.move) {\n        nextLastMove = {move: movesCurrentLine![lastMove.index + 1], index: lastMove.index + 1}\n        currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, nextLastMove.index + 1).join('_'))\n    } else {\n        console.error(analyze, action)\n    }\n    \n    let towers = tur.updateTowersToBoard(currentPosition)\n    towers = tur.updateTowersPosition(cellSize, towers, cellsMap, reversedBoard)\n    const lastMoveSquares = splitMove((nextLastMove)!.move)\n    yield put({\n        type: BoardActions.UPDATE_BOARD_STATE,\n        payload: {currentPosition, towers, lastMoveSquares}\n    })\n    yield put({\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \n        payload: {\n            ...analyze,\n            lastMove: nextLastMove,\n            pieceOrder: oppositColor(pieceOrder),\n        }\n    })\n    if (nextIndex < movesMainLine!.length - 1 || nextIndex < movesCurrentLine!.length -1) {\n        yield delay(AnimationDuration)\n        yield put({type: GameAnalysisActions.PLAY_MOVES})\n    }\n}\n\nfunction* workerStepBack(action: GameAnalysisTypes) {\n    const {analyze, board: {positionsTree}} = yield select()\n    const {\n        movesCurrentLine,\n        movesMainLine,\n        lastMove,\n        pieceOrder\n    } = analyze as IAnalysisState\n    let nextLastMove, currentPosition;\n    if (lastMove.index < 0) return\n    if (movesMainLine![lastMove.index] === lastMove.move && lastMove.index > 0) {\n        nextLastMove = {move: movesMainLine![lastMove.index - 1], index: lastMove.index - 1}\n        currentPosition = positionsTree!.get(movesMainLine!.slice(0, nextLastMove.index + 1).join('_'))\n    } else if (movesCurrentLine![lastMove.index] === lastMove.move && lastMove.index > 0) {\n        nextLastMove = {move: movesCurrentLine![lastMove.index - 1], index: lastMove.index - 1}\n        currentPosition = positionsTree!.get(movesCurrentLine!.slice(0, nextLastMove.index + 1).join('_'))\n    }\n    const lastMoveSquares = splitMove((nextLastMove)!.move)\n    yield put({\n        type: BoardActions.UPDATE_BOARD_STATE,\n        payload: {currentPosition, lastMoveSquares}\n    })\n    yield put({\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \n        payload: {\n            ...analyze,\n            lastMove: nextLastMove,\n            pieceOrder: oppositColor(pieceOrder),\n        }\n    })\n}\n\nfunction* workerSettingBoard(action: GameAnalysisTypes) {\n    const {boardOptions:{boardSize}} = yield select(state => state)\n    if (action.payload) {\n        const board = createEmptyBoard(boardSize)\n        yield put({\n            type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, \n            payload: {...InitialGameAnalysisState, board, currentPosition: board }\n        })\n    }\n}\n\nfunction* workerGameAnalysis(action: GameAnalysisTypes) {\n    const {analyze: {settingPosition}} = yield select(state => state)\n    if (settingPosition && action.payload) {\n        yield put({\n            type: GameAnalysisActions.SETTING_BOARD, \n            payload: false\n        })\n    }\n}\n\nfunction* workerCurrentLine(action: GameAnalysisTypes) {\n    const {\n        analyze:{\n            lastMove: {index},\n            movesCurrentLine,\n            pieceOrder,\n        },\n        board: {positionsTree}      \n    } = yield select()\n    const {moveToSave: {move, position}} = action.payload as IMoveProps\n    let payload: Partial<IAnalysisState> = {}\n    if (movesCurrentLine[index + 1] === move) {\n        yield put({\n            type: BoardActions.UPDATE_BOARD_STATE,\n            payload: {currentPosition: position}\n        })\n        payload = {\n            lastMove: {move, index: index + 1},\n            pieceOrder: oppositColor(pieceOrder),\n        }\n    } else {\n        const movesLine = [...movesCurrentLine.slice(0, index + 1), move]\n        const _positionsTree = copyMap(positionsTree!)\n        const newKey = movesLine.join('_')\n        _positionsTree.set(newKey, position)\n        yield put({\n            type: BoardActions.UPDATE_BOARD_STATE, \n            payload: {positionsTree: _positionsTree, currentPositoin: position}\n        })\n        payload = { \n            lastMove: {move, index: index + 1},\n            pieceOrder: oppositColor(pieceOrder),\n            movesCurrentLine: movesLine,\n        }\n    }\n    return payload\n}\n\nfunction* workerMainLine(action: GameAnalysisTypes) {\n    const {\n        analyze: {\n            lastMove: {index},\n            movesMainLine,\n            pieceOrder,\n        },\n        board: {positionsTree}\n    } = yield select()\n    const {moveToSave: {move, position}} = action.payload as IMoveProps\n    let payload: Partial<IAnalysisState> = {}\n    yield put({\n        type: BoardActions.UPDATE_BOARD_STATE,\n        payload: {currentPosition: position}\n    })\n    if (!movesMainLine.length) {\n        payload = {\n            lastMove: {move, index: 0},\n            pieceOrder: oppositColor(pieceOrder),\n            movesMainLine: [move]\n        }\n        const _positionsTree = copyMap(positionsTree!)\n        _positionsTree.set(move, position)\n        yield put({\n            type: BoardActions.UPDATE_BOARD_STATE,\n            payload: {positionsTree: _positionsTree, history: [move], currentPosition: position}\n        })\n    } else if (movesMainLine[index + 1] === move) {\n        payload = { \n            lastMove: {move, index: index + 1},\n            pieceOrder: oppositColor(pieceOrder),\n        }\n    } else {\n        const movesLine = movesMainLine.slice(0, index + 1).concat(move)\n        const _positionTree = copyMap(positionsTree!)\n        const newKey = movesLine.join('_')\n        _positionTree.set(newKey, position)\n        payload = {\n            lastMove: {move, index: index + 1},\n            pieceOrder: oppositColor(pieceOrder),\n            movesMainLine: [...movesMainLine, move]\n        }\n        yield put({\n            type: BoardActions.UPDATE_BOARD_STATE,\n            payload: {positionsTree: _positionTree, currentPosition: position, history: movesLine}\n        })\n    }\n    return payload\n}\n\nfunction* workerNewMove(action: GameAnalysisTypes) {\n    const {\n        lastMove: {move, index},\n        movesCurrentLine,\n    } = yield select((state: IRootState) => state.analyze)\n    let payload: Partial<IAnalysisState> = {}\n    if (movesCurrentLine.length && movesCurrentLine[index] === move) {\n        payload = yield workerCurrentLine(action)\n    } else {\n        payload = yield workerMainLine(action)\n    } \n    if (payload.lastMove) {\n        yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload})\n    }\n}\n\nfunction* workerStartPosition(action: GameAnalysisTypes) {\n    const {\n        boardOptions: {boardSize},\n        board: {positionsTree}\n    } = yield select((state: IRootState) => state)\n    yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload: {startPosition: false}})\n    const currentPosition = createStartBoard(boardSize)\n    positionsTree.clear()\n    positionsTree.set('sp', currentPosition)\n    const towers = createDefaultTowers(boardSize)\n    yield put ({type: BoardActions.UPDATE_BOARD_STATE, paylaod: {currentPosition, positionsTree, towers}})\n    const payload: Partial<IAnalysisState> = {\n        ...InitialGameAnalysisState,\n        startPosition: true,\n    }\n    yield delay(100)\n    yield put({type: GameAnalysisActions.UPDATE_ANALYSIS_STATE, payload})\n}\n\nexport default function* watcherAnalysis() {    \n    yield takeLatest(GameAnalysisActions.STEP_BACK, workerStepBack)\n    yield takeLatest(GameAnalysisActions.STEP_FORWARD, workerStepForward)\n    yield takeLatest(GameAnalysisActions.GO_TO_POSITION, workerGoToPosition)\n    yield takeLatest(GameAnalysisActions.UPDATE_POSITION, workerUpdatePosition)\n    // yield takeLatest(GameAnalysisActions.DOWNLOAD_GAME, workerUploadGame)\n    yield takeLatest(GameAnalysisActions.PLAY_MOVES, workerPlayMoves)\n    yield takeLatest(GameAnalysisActions.SETTING_BOARD, workerSettingBoard)\n    yield takeLatest(GameAnalysisActions.ANALYZE_LAST_GAME, workerGameAnalysis)\n    yield takeLatest(GameAnalysisActions.MAKE_NEW_MOVE, workerNewMove)\n    yield takeLatest(GameAnalysisActions.SET_START_POSITION, workerStartPosition)\n}\n ","import { put, takeLatest, select, delay } from 'redux-saga/effects';\n\nimport {BoardActionTypes, BoardActions as BA, BoardActions} from '../board/types'\nimport { GameVariants, IGameBoard, IGameState, IMoveProps, TowerConstructor } from '../app-interface';\nimport { \n    createEmptyBoardForCustomPosition,\n    createStartBoardToDraw,\n    createAnalysisBoard,\n    oppositColor\n} from '../../game-engine/prestart-help-function-constants';\nimport { GameOptionActions,  GameOptionActionTypes} from '../gameOptions/types';\nimport tur from '../../game-engine/update-towers-functions'\nimport { GameActions } from '../game/types';\nimport { IRootState } from '../rootState&Reducer';\nimport { copyMap, splitMove } from '../../game-engine/gameplay-helper-fuctions';\nimport { AnimationDuration } from '../../constants/gameConstants';\nimport { BoardOptionActions, BoardOptionActionTypes, ReverseBoardAction } from '../boardOptions/types';\n\n \nfunction* workerGameBoard(action: BoardActionTypes) {\n    const {boardOptions} = yield select()\n    const payload = createStartBoardToDraw({boardOptions})\n    yield put({type: BA.UPDATE_BOARD_STATE, payload})\n}\n\nfunction* workerSetupBoard() {\n    const {boardOptions} = yield select()\n    const payload = createEmptyBoardForCustomPosition({boardOptions})\n    yield put({type: BA.UPDATE_BOARD_STATE, payload})\n}\n\nfunction* workerBoardSize(action: GameOptionActionTypes) {\n    const {boardOptions} = yield select()\n    const boardSize = action.payload as GameVariants === 'international' ? 10 : 8\n    if (boardOptions.boardSize !== boardSize) {\n        yield put({type: BA.UPDATE_BOARD_SIZE, payload: boardSize})\n    }\n}\n\nfunction* workerAnalysisBoard(action: BoardActionTypes) {\n    const {boardOptions} = yield select()\n    const payload = {\n        ...createAnalysisBoard({boardOptions}),\n    }\n    yield put({type: BA.UPDATE_BOARD_STATE, payload})\n}\n\nfunction* animateFreeMove(move: IMoveProps) {\n    const {board, boardOptions: {reversedBoard}} = yield select()\n    const {moveToSave} = move as IMoveProps\n    const [from, to] = moveToSave.move.split('-')\n    tur.relocateTower(from, to, board, reversedBoard)\n    yield delay(AnimationDuration)\n    const newState: IRootState = yield select()\n    tur.finalizeSimpleMove(from, to, newState.board, reversedBoard)\n}\n\nfunction* animateMandatoryTowerStep(props: Partial<IMoveProps>, step = 0) {\n    const {gameOptions: { reversedBoard}, board} = yield select()\n    const {moveToSave: {move, position, takenPieces}} = props as IMoveProps\n    const [from, to] = move.split(':').slice(step)\n    const totalSteps = takenPieces!.length \n    const capturedTowerKey = takenPieces![step]\n        let tower = position[capturedTowerKey].tower as TowerConstructor\n        tur.relocateTower(from, to, board, reversedBoard)\n        yield delay(AnimationDuration / totalSteps / 2)\n        let state: IRootState = yield select()\n        let towers = copyMap(state.board.towers)\n        if (tower) {\n            tower =  new TowerConstructor(tower)\n            tower.onBoardPosition = capturedTowerKey\n            tower.positionInDOM = tur.calcTowerPosition(capturedTowerKey, board.cellsMap, board.cellSize, reversedBoard)\n            towers.set(capturedTowerKey, tower)\n        } else {\n            towers.delete(capturedTowerKey)\n        }\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\n        yield delay(AnimationDuration / totalSteps / 2)\n        state = yield select()\n        towers = tur.finalizeMandatoryMoveStep(from, to, state.board, reversedBoard)\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\n}\n\nfunction* animateMandatoryStep(props: Partial<IMoveProps>, step = 0) {\n    const {gameOptions: {gameVariant, reversedBoard}, board} = yield select()\n    if (gameVariant === 'towers') {\n        yield animateMandatoryTowerStep(props, step)\n    } else {\n        const {moveToSave: {move, takenPieces}} = props as IMoveProps\n        const [from, to] = move.split(':').slice(step)\n        const totalSteps = takenPieces!.length \n        const isLast = totalSteps === step + 1\n        tur.relocateTower(from, to, board, reversedBoard)\n        yield delay(AnimationDuration / totalSteps)\n        let state: IRootState = yield select()\n        const towers = tur.finalizeMandatoryMoveStep(from, to, state.board, reversedBoard, isLast)\n        yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\n        if (isLast) {\n            state = yield select()\n            const towers = copyMap(state.board.towers)\n            takenPieces!.forEach(pKey => {\n                towers.delete(pKey)\n            })\n            yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: {towers}})\n        }\n    }\n}\n\nfunction* animateMandatoryMove(props: Partial<IMoveProps>, step = 0): any {\n    const {moveToSave: {takenPieces}} = props as IMoveProps\n    if (takenPieces?.length === 1 || takenPieces?.length === step + 1) {\n        yield animateMandatoryStep(props, step) \n    } else {\n        yield animateMandatoryStep(props, step)\n        yield animateMandatoryMove(props, step + 1)\n    }\n}\n\nfunction* workerTurn(action: BoardActionTypes) {\n    const payload = action.payload as IMoveProps\n    const {game: {history}, user: {name}, board} = yield select()\n    const {moveToSave: {move, position}, moveOrder} = payload\n    const key = history.length ? `${history.join('_')}_${move}` : move\n    const positionsTree = copyMap(board.positionsTree)\n    positionsTree.set(key, position)\n    let lastMoveSquares = board.lastMoveSquares\n    if (moveOrder.playerTurn === name) {\n        if (move.includes(':')) {\n            lastMoveSquares = move.split(':')\n            yield animateMandatoryMove(payload)\n        } else {\n            lastMoveSquares = move.split('-')\n            yield animateFreeMove(payload)\n        }\n    }\n    const boardProps = {currentPosition: position, positionsTree, lastMoveSquares}\n    yield put ({type: BoardActions.UPDATE_BOARD_STATE, payload: boardProps})\n    yield put({type: GameActions.MAKE_MOVE, payload})\n}\n\nfunction* workerUndo() {\n    const {\n        board: {positionsTree, cellSize, cellsMap},\n        game: {history, moveOrder: {pieceOrder}, playerColor},\n        user: {name},\n        boardOptions: {reversedBoard}\n    } = yield select()\n    if (!history.length) return\n    let gamePayload: Partial<IGameState>, boardPayload: Partial<IGameBoard>\n    if (pieceOrder === playerColor) {\n        gamePayload = {\n            history: history.slice(0, -2)\n        }\n        const currentPosition = positionsTree.get(gamePayload.history!.join('_'))\n        const _towers = tur.updateTowersToBoard(currentPosition)\n        const towers = tur.updateTowersPosition(cellSize, _towers, cellsMap, reversedBoard)\n        boardPayload = {\n            lastMoveSquares: splitMove(gamePayload.history?.slice(-1)[0] || ''),\n            currentPosition,\n            towers,\n            animationStarted: false,\n        }\n    } else {\n        gamePayload = {\n            history: history.slice(0, -1),\n            moveOrder: {pieceOrder: oppositColor(pieceOrder), playerTurn: name}\n        }\n        const currentPosition = positionsTree.get(gamePayload.history!.join('_'))\n        const _towers = tur.updateTowersToBoard(currentPosition)\n        const towers = tur.updateTowersPosition(cellSize, _towers, cellsMap, reversedBoard)\n        boardPayload = {\n            lastMoveSquares: splitMove(gamePayload.history?.slice(-1)[0] || ''),\n            currentPosition: positionsTree.get(gamePayload.history!.join('_')),\n            towers,\n            animationStarted: false,\n        }\n    }\n    yield put({type: GameActions.UPDATE_GAME_STATE, payload: gamePayload})\n    yield put({type: BoardActions.UPDATE_BOARD_STATE, payload: boardPayload})\n}\n\nexport default function* watcherBoard() {\n    yield takeLatest(BA.CREATE_SETUP_BOARD, workerSetupBoard);\n    yield takeLatest(BA.CREATE_GAME_BOARD, workerGameBoard)\n    yield takeLatest(BA.CREATE_ANALYSIS_BOARD, workerAnalysisBoard)\n    yield takeLatest(GameOptionActions.SET_GAME_VARIANT, workerBoardSize)\n    yield takeLatest(BoardActions.TURN, workerTurn)\n    yield takeLatest(BoardActions.UNDO_LAST_MOVE, workerUndo)\n}\n","import { all } from 'redux-saga/effects';\nimport watcherGame from './watcherGame';\n// import watcherUser from './watcherUser';\nimport watcherPreGame from './watcherGamePresets';\nimport watcherTimer from './watcherTimer';\n// import watcherApp from './watcherApp';\nimport watcherAnalsis from './watcherGameAnalysis'\nimport watcherBoard from './watcherBoard';\n\nexport default function* sagaRoot() {\n    yield all([\n        watcherPreGame(),\n        // watcherUser(),\n        watcherGame(),\n        watcherTimer(),\n        // watcherApp(),\n        watcherAnalsis(),\n        watcherBoard(),\n    ]);\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport {InitialState, AppReducers} from './rootState&Reducer';\nimport sagaRoot from './sagas/sagaRoot';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst storeFactory = (data = InitialState) => {\n    const middleware = composeWithDevTools(applyMiddleware(sagaMiddleware));\n    const rootReducer = combineReducers(AppReducers)\n    const store = createStore(rootReducer, data, middleware)\n    sagaMiddleware.run(sagaRoot);\n    return store;\n};\n\nexport default storeFactory;\n\nexport type Store = ReturnType<typeof storeFactory>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport storeFactory from './store'\nimport {InitialState} from './store/rootState&Reducer'\nimport { UserActions } from './store/user/types';\n// import {GameActions} from './store/game/types';\n// import {wsOnError, wsOnMessage} from './web-sockets/ws'\n// import {errorHandler} from './web-sockets/event-handlers/ws-error-handler'\n// import {messageHandler} from './web-sockets/event-handlers/ws-message-handler'\n\nimport './assets/scss/style.scss'\nimport { AppActions } from './store/app/types';\n\n\nconst store = storeFactory(InitialState)\n\n// wsOnError(errorHandler, store)\n\n// wsOnMessage(messageHandler, store)\n\n\nReactDOM.render(\n  <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n  </Provider>,\n  document.getElementById('root') \n);\n\nstore.dispatch({type: UserActions.CHECK_STORAGE})\n\nif (window) {\n  const payload = window.innerWidth / window.innerHeight < 1.3\n  store.dispatch({type: AppActions.SET_PORTRAIT, payload})\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}