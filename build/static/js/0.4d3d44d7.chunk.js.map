{"version":3,"sources":["store/game/actions.ts","store/gameAnalysis/actions.ts","store/board/actions.ts","page-components/Sidebar.tsx","game-components/moves-history/MovesHistory.tsx","game-components/tower/CheckerTower.tsx","game-components/board/Board.tsx","game-engine/position-evaluator.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"names":["clearHistory","payload","type","GameActions","CLEAR_HISTORY","surrender","SURRENDER","setGameMode","SET_GAME_MODE","confirmStartGame","CONFIRM_START_GAME","updateIneffectiveMoves","INEFFECTIVE_MOVE","endGame","END_GAME","makeMove","MAKE_MOVE","cancelGame","CANCEL_GAME","declineDraw","DECLINE_DRAW","offerDraw","OFFER_DRAW","setStartPosition","GameAnalysisActions","SET_START_POSITION","makeNewMove","MAKE_NEW_MOVE","updateAnalysisState","UPDATE_ANALYSIS_STATE","evaluatePosition","paylaod","EVALUATE_POSITION","setDepth","SET_DEPTH","stepForward","STEP_FORWARD","removePiece","REMOVE_PIECE","stepBack","STEP_BACK","playMoves","PLAY_MOVES","goToPosition","GO_TO_POSITION","downloadGame","DOWNLOAD_GAME","analyzeLastGame","ANALYZE_LAST_GAME","settingBoard","SETTING_BOARD","updateBoardState","BoardActions","UPDATE_BOARD_STATE","turn","TURN","undoLastMove","UNDO_LAST_MOVE","SideBar","props","ClassName","side","className","children","historyMapDispatch","historyConnector","connect","state","movesHistory","game","history","gameMode","movesMainLine","analyze","lastMove","analyzingLastGame","MovesHistory","React","memo","ref","createRef","useEffect","elem","current","scroll","scrollHeight","scrollDown","History","useHistory","mHistory","length","moves","convertToMovesHistory","handleClickOnMove","e","index","preventDefault","location","pathname","push","move","toStartClass","stepBackClass","stepForwardClass","toEndClass","onClick","classList","target","contains","slice","map","i","white","black","whiteClass","blackClass","TowerFace","w","b","colorW","king","towers","BlackPieces","Array","fill","WhitePieces","towerPiecesArray","concat","middle","Math","floor","Numbers","Tower","pn","pos","abs","BlackOrWhite","UpOrDown","KingAndTop","pieceClass","NumsPresentation","firstNum","secondNum","Class","connector","gameOptions","gameVariant","bs","boardOptions","boardSize","TowerComponent","prevProps","JSON","stringify","this","positionInDOM","currentColor","currentType","veiw","wPiecesQuantity","bPiecesQuantity","onBoardPosition","mt","mandatory","x","y","CellTowerRatio","style","top","left","towerView","PieceColor","TowerType","k","Component","Cell","indexes","Board","boardNotation","reversedBoard","posibleMoves","Map","DefaultTL","TopLegendValues","DefaultSL","SideLegendValues","SL","reverse","TL","v","h","j","marked","get","moveIndex","indexOf","highlighted","trim","BoardNotation","r","FirstMoves","international","russian","evaluator","GV","mmr","engineTowers","rivalTowers","engineKings","enginePieces","rivalKings","rivalPieces","engineMoves","rivalMoves","color","setEvaluatingColor","handlePieces","tower","m","bottomTowersValue","tP","bP","calcTowersFactor","handleTower","setDefault","calcMoves","key","board","movesNum","lookForTowerFreeMoves","getBoardData","Object","values","forEach","cell","boardKey","calcMovesNumber","lookForAllPosibleMoves","advantageInNumberOfMoves","mM","rM","caclAdvantageInPieces","caclAdvantageInKings","eK","rK","checkIfkingsNumberChanged","evaluateCurrentPosition","moveAdvantage","pieceNumberValue","kingsNumberValue","bms","maxDepth","bestMoveCB","bestLinesCB","moveBranchesTree","actualHistoryString","lastPlayerMove","historyLength","engineColor","lastResult","fullPath","evaluationStarted","resetProps","console","log","startEvaluation","start","setEngieneColor","depth","includes","makeMandatoryMove","split","from","to","makeFreeMove","debuteResolver","currentPosition","availableMoves","random","moveToMake","position","filterBranches","newTree","startsWith","actualLength","newKey","set","getAvaliableMoves","positionKey","lookForAllMoves","branchValue","setActualMovesBranchAfterMove","cP","join","size","actualBranch","baseValue","lookForUnevaluatedForward","engineMoveLast","value","getBestForEngine","handleNoMovesBranch","key1","branch1","key2","branch2","updateParentBranches","movesBranch","stepBackForUnevaluatedBranchPlayer","stepBackForUnevaluatedBranchEngine","pieceOrder","getBestMove","evaluatingPositon","error","oppositColor","filter","nextPositionKey","nextPosition","lastLineEvaluation","branch","evaluatingBranchLength","unevaluatedMoves","setTimeout","handlePlayerBranchEvaluationEnd","bestMove","handleCaseValueChangedNotably","keyArr","parentPositionKey","parentPosition","grandParentKey","stepBackward","parentBranch","rootBranch","updateMoves","branchKey","updatedBranch","passingValue","getBestForPlayer","lastBranch","nextBranch","mr","arr","reduce","acc","_objectWithoutProperties","source","excluded","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"mappings":"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","file":"static/js/0.4d3d44d7.chunk.js","sourcesContent":["import { \r\n    IBoardToGame,\r\n    IMoveProps,\r\n    IMoveOrder,\r\n    IGameState,\r\n    EndGameConditions,\r\n    IGameMode,\r\n    PieceColor,\r\n    INewGameProps\r\n} from '../app-interface'\r\nimport {GameActionTypes, GameActions} from './types'\r\n\r\nexport function clearHistory(payload = null): GameActionTypes {\r\n    return {\r\n        type: GameActions.CLEAR_HISTORY,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function surrender(payload: PieceColor): GameActionTypes {\r\n    return {\r\n        type: GameActions.SURRENDER,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setGameMode(payload: IGameMode): GameActionTypes {\r\n    return {\r\n        type: GameActions.SET_GAME_MODE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setGame(payload: Partial<IGameState>): GameActionTypes {\r\n    return {\r\n        type: GameActions.SET_GAME,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function updateGameState(payload: IBoardToGame): GameActionTypes {\r\n    return {\r\n        type: GameActions.UPDATE_GAME_STATE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function confirmStartGame(payload: boolean): GameActionTypes {\r\n    return {\r\n        type: GameActions.CONFIRM_START_GAME,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function setMoveOrder(payload: IMoveOrder): GameActionTypes {\r\n    return ({\r\n        type: GameActions.SET_MOVE_ORDER,\r\n        payload \r\n    })\r\n}\r\n\r\nexport function setGameStarted(payload: boolean): GameActionTypes {\r\n    return ({\r\n        type: GameActions.SET_GAME_STARTED,\r\n        payload\r\n    })   \r\n}\r\n\r\nexport function updateIneffectiveMoves(payload: number): GameActionTypes {\r\n    return {\r\n        type:GameActions.INEFFECTIVE_MOVE,\r\n        payload\r\n    }   \r\n}\r\n\r\nexport function endGame(payload: EndGameConditions): GameActionTypes {\r\n    return {\r\n        type: GameActions.END_GAME,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function makeMove(payload: IMoveProps): GameActionTypes {\r\n    return {\r\n        type: GameActions.MAKE_MOVE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function cancelGame(): GameActionTypes {\r\n    return {\r\n        type: GameActions.CANCEL_GAME\r\n    }\r\n}\r\n\r\nexport function declineDraw(payload?: boolean): GameActionTypes {\r\n    return {\r\n        type: GameActions.DECLINE_DRAW,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function opponentOfferDraw(): GameActionTypes {\r\n    return {\r\n        type: GameActions.RIVAL_OFFER_DRAW\r\n    }\r\n}\r\n\r\nexport function setGameEnded(payload: boolean): GameActionTypes {\r\n    return {\r\n        type: GameActions.SET_GAME_MODE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function offerDraw(): GameActionTypes {\r\n    return {\r\n        type: GameActions.OFFER_DRAW\r\n    }\r\n}\r\n\r\nexport function setPortrait(payload: boolean): GameActionTypes {\r\n    return {\r\n        type: GameActions.SET_PORTRAIT,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function newGameVSPC(payload = null): GameActionTypes {\r\n    return {\r\n        type: GameActions.NEW_GAME_VS_PLAYER,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function newGameVSPlayer(payload: INewGameProps): GameActionTypes {\r\n    return {\r\n        type: GameActions.NEW_GAME_VS_PLAYER,\r\n        payload\r\n    }\r\n}\r\n","import { IAnalysisState, IBoardToGame, IGameResult, IMoveProps} from \"../app-interface\"; \r\nimport { GameAnalysisActions, GameAnalysisTypes } from \"./types\";\r\n\r\n\r\nexport function setStartPosition(payload = null) {\r\n    return {\r\n        type: GameAnalysisActions.SET_START_POSITION,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function makeNewMove(payload: Partial<IMoveProps>) {\r\n    return {\r\n        type: GameAnalysisActions.MAKE_NEW_MOVE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function startNewLine(payload:IMoveProps) {\r\n    return {\r\n        type: GameAnalysisActions.START_NEW_LINE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function updateAnalysisState(payload: Partial<IAnalysisState>) {\r\n    return {\r\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function evaluatePosition(paylaod: boolean) {\r\n    return {\r\n        type: GameAnalysisActions.EVALUATE_POSITION,\r\n        paylaod\r\n    }\r\n}\r\nexport function setDepth(paylaod:number) {\r\n    return {\r\n        type: GameAnalysisActions.SET_DEPTH,\r\n        paylaod\r\n    }\r\n}\r\n\r\nexport function createPositionTree(payload: Map<string, IBoardToGame>): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.CREATE_POSITION_TREE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function stepForward(payload = 0): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.STEP_FORWARD,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function removePiece(payload: boolean): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.REMOVE_PIECE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function stepBack(payload = 0): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.STEP_BACK,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function playMoves(payload = null): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.PLAY_MOVES,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function goToPosition(payload: {index: number, move: string}): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.GO_TO_POSITION,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function savePosition(payload: Map<string, IBoardToGame>): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.SAVE_POSITION,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function updatePosition(payload: Partial<IMoveProps>): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.UPDATE_POSITION,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function downloadGame(payload: IGameResult): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.DOWNLOAD_GAME,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function saveGameResult(payload: IGameResult): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.SAVE_GAME_RESULT,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function analyzeLastGame(payload: boolean): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.ANALYZE_LAST_GAME,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function settingBoard(payload: boolean): GameAnalysisTypes {\r\n    return {\r\n        type: GameAnalysisActions.SETTING_BOARD,\r\n        payload\r\n    }\r\n}\r\n","import { IBoardAndTowers, IMoveProps } from \"../app-interface\";\r\nimport { BoardActions, BoardActionTypes } from \"./types\";\r\n\r\n\r\nexport function updateBoardSize(payload: number) {\r\n    return {\r\n        type: BoardActions.UPDATE_BOARD_SIZE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function updateBoardState(payload: Partial<IBoardAndTowers>) {\r\n    return {\r\n        type: BoardActions.UPDATE_BOARD_STATE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function turn(payload: Partial<IMoveProps>) {\r\n    return {\r\n        type: BoardActions.TURN,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function undoLastMove(payload = null): BoardActionTypes {\r\n    return {\r\n        type: BoardActions.UNDO_LAST_MOVE,\r\n        payload\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport './page-components.scss'\r\n\r\ninterface SideBarProps {\r\n    children: React.ReactNode, side: string\r\n}\r\n\r\nexport const SideBar: React.FC<SideBarProps> = (props) => {\r\n    const ClassName = `side-bar_${props.side}`\r\n    return (\r\n        <div className={ClassName}>\r\n            {props.children}\r\n        </div>) \r\n}\r\n","import React, { useEffect} from \"react\"\r\nimport { ConnectedProps, connect } from \"react-redux\"\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nimport { convertToMovesHistory } from \"../../game-engine/gameplay-helper-fuctions\"\r\nimport { IRef } from \"../../store/app-interface\"\r\nimport {analyzeLastGame, stepForward, stepBack, goToPosition, playMoves} from '../../store/gameAnalysis/actions'\r\nimport { IRootState } from \"../../store/rootState&Reducer\"\r\n\r\nimport './moves.scss'\r\n\r\n\r\nconst historyMapState = (state: IRootState) => ({\r\n    movesHistory: state.game.history,\r\n    gameMode: state.game.gameMode,\r\n    movesMainLine: state.analyze.movesMainLine,\r\n    lastMove: state.analyze.lastMove,\r\n    analyzingLastGame: state.analyze.analyzeLastGame\r\n})\r\n\r\nconst historyMapDispatch = {analyzeLastGame, stepBack, stepForward, goToPosition, playMoves}\r\n\r\nconst historyConnector = connect(historyMapState, historyMapDispatch)\r\n\r\nconst Moves:React.FC<ConnectedProps<typeof historyConnector>> = (props) => {\r\n    const ref: IRef<HTMLDivElement> = React.createRef()\r\n    const {\r\n        movesHistory,\r\n        gameMode,\r\n        lastMove,\r\n        movesMainLine,\r\n        analyzeLastGame,\r\n        analyzingLastGame,\r\n        stepBack,\r\n        stepForward,\r\n        goToPosition,\r\n        playMoves\r\n    } = props\r\n    \r\n    useEffect(() => {\r\n        const scrollDown = () => {\r\n            const elem = ref.current\r\n            if (!elem) return\r\n            elem.scroll(0, elem.scrollHeight)\r\n        }\r\n        scrollDown()\r\n    }, [movesHistory, ref])\r\n    const History = useHistory()\r\n    const mHistory = gameMode === 'isPlaying' ? movesHistory : movesMainLine!\r\n    const length = mHistory?.length\r\n    const moves = convertToMovesHistory(mHistory)\r\n   \r\n    const handleClickOnMenuItem = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        const {classList} = e.target as HTMLElement\r\n        if (classList.contains('disabled')) return\r\n        if (History.location.pathname === '/game') {\r\n            History.push('/analysis')\r\n        }\r\n        if (!analyzingLastGame) {\r\n            analyzeLastGame(true)\r\n        }\r\n        switch (true) {\r\n            case classList.contains('to-start'):\r\n                goToPosition({index: -1, move: ''})\r\n                break\r\n            case classList.contains('step-back'): {\r\n               return stepBack()\r\n            }\r\n            case classList.contains('step-forward'): {\r\n                return stepForward()\r\n            }\r\n            case classList.contains('to-end'): {\r\n                return goToPosition({index: length - 1, move: mHistory.slice(-1)[0]})\r\n            }\r\n            case classList.contains('play-moves'): {\r\n                return playMoves()\r\n            }\r\n            default:\r\n                break\r\n        }\r\n    }\r\n    const handleClickOnMove = (e: React.MouseEvent, index: number) => {\r\n        e.preventDefault()\r\n        if (gameMode === 'isPlaying') return\r\n        if (History.location.pathname === '/game') {\r\n            History.push('/analysis')\r\n        }\r\n        goToPosition({index, move: mHistory[index]})\r\n    }\r\n\r\n    const {index} = lastMove!\r\n    const toStartClass = `moves-history-menu__item to-start${index < 0 ? ' disabled' : ''}`\r\n    const stepBackClass = `moves-history-menu__item step-back${!index ? ' disabled' : ''}`\r\n    const stepForwardClass = `moves-history-menu__item step-forward${index >= length - 1 ? ' disabled' : ''}`\r\n    const toEndClass = `moves-history-menu__item to-end${index >= length - 1 ? ' disabled' : ''}`\r\n    const playClass = `moves-history-menu__item play-moves`\r\n    return (\r\n        <div className=\"moves-history-wrapper\">\r\n            <div className=\"moves-history-menu\">\r\n                { gameMode === 'isPlaying' || !analyzingLastGame\r\n                    ? <p>moves:</p> \r\n                    : <ul onClick={handleClickOnMenuItem}>\r\n                        <li className={toStartClass}>\r\n                            <i className=\"material-icons\" >first_page</i>\r\n                        </li>\r\n                        <li className={stepBackClass}>\r\n                            <i className=\"material-icons\">chevron_left</i>\r\n                        </li>\r\n                        <li className={playClass}>\r\n                            <i className=\"material-icons\">slideshow</i>\r\n                        </li>\r\n                        <li className={stepForwardClass}>\r\n                            <i className=\"material-icons\">chevron_right</i>\r\n                        </li>\r\n                        <li className={toEndClass}>\r\n                            <i className=\"material-icons\">last_page</i>\r\n                        </li>\r\n                    </ul>\r\n                }\r\n            </div>\r\n            <div className=\"moves-container\" ref={ref}>           \r\n                {\r\n                    moves.map((move: {black: string, white: string}, i: number) => {\r\n                        const white = (analyzingLastGame ? index : mHistory.length - 1) === i * 2\r\n                        const black =  (analyzingLastGame ? index : mHistory.length - 1) === i * 2 + 1\r\n                        const whiteClass = `white-move${white ? ' current-move': ''}`\r\n                        const blackClass = `black-move${black ? ' current-move': ''}`\r\n                        return (\r\n                            <div className=\"move-wrapper\" key={i}>\r\n                                <div className=\"move-number\">{i + 1}</div>\r\n                                <div className=\"move\">\r\n                                    <div className={whiteClass} onClick={(e) => handleClickOnMove(e, i * 2)}>\r\n                                        {move.white}\r\n                                    </div>\r\n                                    <div className={blackClass} onClick={(e) => handleClickOnMove(e, i * 2 + 1)}>\r\n                                        {move.black}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div> \r\n    )       \r\n}\r\n\r\nexport const MovesHistory = React.memo(historyConnector(Moves))\r\n","import React from 'react'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport { CellTowerRatio } from '../../constants/gameConstants';\r\n\r\nimport { PieceColor, TowerConstructor, TowerType } from '../../store/app-interface';\r\nimport { IRootState } from '../../store/rootState&Reducer';\r\nimport './checker-tower.scss';\r\n\r\ninterface FaceProps {w: number, b: number, colorW: boolean, king: boolean, towers: boolean}\r\n\r\nexport const TowerFace: React.FC<FaceProps> = (props) => {\r\n  const {w, b, colorW, king, towers} = props\r\n  if (!towers) {\r\n    const className = `${colorW ? 'white-checker' : 'black-checker'}${king ? ' king' : ''}`\r\n    return <div className={className}>{king && <span className=\"king-mark\">K</span>}</div>\r\n  }\r\n  const BlackPieces = new Array(b).fill(0)\r\n  const WhitePieces = new Array(w).fill(1)\r\n  const towerPiecesArray = colorW? WhitePieces.concat(BlackPieces) : BlackPieces.concat(WhitePieces)\r\n  const middle = Math.floor(towerPiecesArray.length / 2)\r\n  const Numbers = colorW \r\n    ? <p className=\"numbers-on-hover\"><span className=\"white-top\">{w}</span><span className=\"black-down\">{b}</span></p>  \r\n    : <p className=\"numbers-on-hover\"><span className=\"black-top\">{b}</span><span className=\"white-down\">{w}</span></p>\r\n  const Tower = towerPiecesArray.map((pn: number, i: number) => {\r\n    const pos = Math.abs(i - middle)\r\n    const BlackOrWhite = pn ? \"white-piece\" : \"black-piece\"\r\n    const UpOrDown = i <= middle ? `up${pos}` : `down${pos}`\r\n    const KingAndTop = king && !i ? ' king' : ''\r\n    const pieceClass = `${BlackOrWhite} ${UpOrDown}${KingAndTop}`\r\n    return <div key={i} className={pieceClass}><span className=\"king-mark\">{king && !i ? 'K' : null}</span></div>\r\n  })\r\n  // const commonClass = `unface-tower-${colorW ? 'white' : 'black'}`\r\n  return (\r\n    <div className=\"tower-wrapper\">\r\n      {Tower}\r\n      {Numbers}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const NumsPresentation:React.FC<{w: number, b: number, colorW: boolean, king: boolean}> = (props) => {\r\n  const {w, b, colorW, king} = props\r\n  const firstNum = colorW ? w : b\r\n  const secondNum = colorW ? b : w\r\n  const Class = `checker-tower__quantity${king ? ' with-crown' : ''}`\r\n  return <div className={Class}>\r\n            <span>{firstNum}</span>&nbsp;/&nbsp;<span>{secondNum}</span>\r\n          </div>\r\n}\r\n\r\nconst mapState = (state: IRootState) => ({\r\n  towers: state.gameOptions.gameVariant === 'towers',\r\n  bs: state.boardOptions.boardSize\r\n})\r\n\r\nconst mapDispatch = {}\r\n\r\nconst connector = connect(mapState, mapDispatch)\r\n\r\ntype TowerComponentProps = ConnectedProps<typeof connector> & TowerConstructor & {mandatory: boolean}\r\n\r\n\r\nexport class TowerComponent extends React.Component<TowerComponentProps> {\r\n\r\n  shouldComponentUpdate(prevProps: TowerConstructor ) {\r\n    return JSON.stringify(prevProps) !== JSON.stringify(this.props)\r\n  }\r\n  componentDidUpdate() {\r\n    // console.log('updated', this.props.positionInDOM)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      positionInDOM,\r\n      currentColor,\r\n      currentType,\r\n      veiw,\r\n      wPiecesQuantity,\r\n      bPiecesQuantity,\r\n      onBoardPosition,\r\n    } = this.props as TowerConstructor\r\n    const mt = this.props.mandatory\r\n    const boardSize = this.props.bs\r\n    const towers = this.props.towers\r\n    const {x, y} = positionInDOM!\r\n    const className = `checker-tower ${currentType} ${currentColor} ${veiw} board-${boardSize}${mt? ' mandatory-tower': ''}${towers ? ' towers' : ' classic'} ratio-${CellTowerRatio*10}`\r\n    const style = {top: `${y}px`, left: `${x}px`} //  {transform: `translate(${x}px, ${y}px)`}//\r\n    // console.log(style)\r\n    const colorW = currentColor === PieceColor.w \r\n    const towerView = (wPiecesQuantity + bPiecesQuantity > 1) && veiw !== 'face'\r\n    const props={\r\n      w: wPiecesQuantity, \r\n      b: bPiecesQuantity, \r\n      colorW, \r\n      king: currentType === TowerType.k, \r\n      towers,\r\n    }\r\n    return <div className={className} data-indexes={onBoardPosition} style={style}>\r\n              {towerView ? <NumsPresentation {...props} /> : <TowerFace {...props}/>}\r\n            </div>\r\n  }\r\n}\r\n\r\nexport default connector(TowerComponent)\r\n","import React from 'react'\r\n\r\nimport {BoardNotation, IBoardProps, ICell} from '../../store/app-interface'\r\nimport {TopLegendValues, SideLegendValues} from '../../constants/gameConstants'\r\n\r\nimport './board.scss';\r\n\r\n\r\nexport const Cell: React.FC<ICell> = props  => {\r\n    return (<div className={props.className} data-indexes={props.indexes}>\r\n                {props.children}\r\n            </div>)\r\n}\r\n\r\nexport const Board: React.FC<IBoardProps> = (props) => { \r\n    // // useEffect(() => {\r\n    //     console.log('render board with props: ', props)\r\n    // })\r\n    const {\r\n        boardOptions: {\r\n            boardSize,\r\n            boardNotation,\r\n            reversedBoard,\r\n        },\r\n        lastMove,\r\n        posibleMoves = new Map()\r\n    } = props\r\n    const DefaultTL = TopLegendValues.slice(0, boardSize)\r\n    const DefaultSL = SideLegendValues.slice(0, boardSize)\r\n    const SL  = reversedBoard ? DefaultSL : DefaultSL.reverse()\r\n    const TL = reversedBoard ? DefaultTL.reverse() : DefaultTL\r\n    let k = reversedBoard ? 51 : 0\r\n\r\n\r\n    const Board = SL.map((v: number, i: number) => {\r\n        return TL.map((h: string, j: number) => {\r\n            if(reversedBoard) {\r\n                k = (i + j) % 2 ? k - 1 : k\r\n            } else {\r\n                k = (i + j) % 2 ? k + 1 : k\r\n            }\r\n            const type = !((i + j) % 2) ? 'light' : 'dark'\r\n            const index = `${h}${v}`\r\n            const marked = posibleMoves.get(index) ? 'marked' : ''\r\n            const moveIndex = lastMove.indexOf(index)\r\n            const highlighted = moveIndex >= 0 ? `highlighted${moveIndex}` : ''\r\n            const className = `board__cell ${type} ${marked} ${highlighted}`.trim()\r\n            return (\r\n                <Cell\r\n                    key={i + '-' + j}\r\n                    indexes={index}\r\n                    className={className}\r\n                >\r\n              {\r\n                        boardNotation === BoardNotation.i && ((i + j) % 2) \r\n                        ? <span className=\"board__cell-number\">{k}</span> \r\n                        : null\r\n                    }\r\n                    {\r\n                        boardNotation === BoardNotation.r && !j \r\n                        ? <span className=\"board__label-value ver\">{SL[i]}</span>\r\n                        : null\r\n                    }\r\n                    {\r\n                        boardNotation === BoardNotation.r && i + 1=== SL.length \r\n                        ? <span className=\"board__label-value hor\">{TL[j]}</span> \r\n                        : null\r\n                    }\r\n                </Cell>\r\n            )\r\n        })\r\n    })\r\n                        \r\n    return (\r\n         <div className=\"board__body\">\r\n            {Board}\r\n        </div>\r\n    )  \r\n}\r\n    ","import { IBoardCell, IBoardToGame, ICheckerTower, IMMRResult, PieceColor, TowerType } from \"../store/app-interface\"\r\nimport { IBranch, ILastResult, ISeekerProps, IMove } from \"./engine-interfaces\"\r\nimport {oppositColor} from \"./gameplay-helper-fuctions\"\r\nimport mmr from './mandatory-move-resolver'\r\n\r\nconst FirstMoves: {[key:string]: string[]} = {\r\n    international: ['d4-e5', 'd4-e5', 'd4-e5',  'd4-c5',  'd4-c5',  'h4-g5',  'h4-i5'],\r\n    russian: ['c3-d4', 'c3-d4', 'c3-d4', 'c3-b4', 'c3-b4', 'e3-f4', 'a3-b4',],\r\n    towers: ['c3-d4', 'c3-d4', 'c3-d4', 'c3-b4', 'c3-b4', 'e3-f4', 'a3-b4', ]\r\n}\r\n\r\n\r\nexport type BestMoveSeekerType = BestMoveSeeker\r\n\r\nexport class Evaluator {\r\n    GV = mmr.GV\r\n    mmr = mmr\r\n    engineTowers = 0\r\n    rivalTowers = 0\r\n    engineKings = 0\r\n    enginePieces = 0\r\n    rivalKings = 0\r\n    rivalPieces = 0\r\n    engineMoves = 0\r\n    rivalMoves = 0\r\n    color = PieceColor.w\r\n\r\n    setEvaluatingColor = (color: PieceColor) => {\r\n        this.color = color\r\n    }\r\n\r\n    handlePieces = (tower: ICheckerTower) => {\r\n        const {currentType, currentColor} = tower\r\n        const {rivalKings, engineKings, rivalPieces, enginePieces} = this\r\n        if (currentType === TowerType.m) {\r\n            if (currentColor === this.color) {\r\n                this.enginePieces = enginePieces + 1\r\n            } else {\r\n                this.rivalPieces = rivalPieces + 1\r\n            }\r\n        } else {\r\n            if (currentColor === this.color) {\r\n                this.engineKings = engineKings + 1\r\n            } else {\r\n                this.rivalKings = rivalKings + 1\r\n            }\r\n        }\r\n    }\r\n\r\n    bottomTowersValue = (tP: number, bP: number, king = false) => {\r\n        if (!king) {\r\n            return bP * (.4 / tP)\r\n        } else {\r\n            return bP * (.2 / tP)\r\n        }\r\n    }\r\n\r\n    calcTowersFactor = () => {\r\n        const {engineTowers, rivalTowers} = this\r\n        return engineTowers - rivalTowers\r\n    }\r\n\r\n    handleTower = (tower: ICheckerTower) => {\r\n        const {currentColor, currentType, wPiecesQuantity = 0, bPiecesQuantity = 0} = tower\r\n        if (this.color === PieceColor.w) {\r\n            if (currentType === TowerType.m) {\r\n                if (currentColor === PieceColor.w) {\r\n                    this.engineTowers += wPiecesQuantity\r\n                    this.rivalTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity)\r\n                } else {\r\n                    this.rivalTowers += bPiecesQuantity\r\n                    this.engineTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity)\r\n                }\r\n            } else {\r\n                if (currentColor === this.color) {\r\n                    this.engineTowers += wPiecesQuantity + 1\r\n                    this.rivalTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity, true)\r\n                } else {\r\n                    this.rivalTowers += bPiecesQuantity + 1\r\n                    this.engineTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity, true)\r\n                }\r\n            }\r\n        } else {\r\n            if (currentType === TowerType.m) {\r\n                if (currentColor === PieceColor.w) {\r\n                    this.rivalTowers += wPiecesQuantity\r\n                    this.engineTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity)\r\n                } else {\r\n                    this.engineTowers += bPiecesQuantity\r\n                    this.rivalTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity)\r\n                }\r\n            } else {\r\n                if (currentColor === PieceColor.w) {\r\n                    this.rivalTowers += wPiecesQuantity\r\n                    this.engineTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity, true)\r\n                } else {\r\n                    this.engineTowers += bPiecesQuantity\r\n                    this.rivalTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity, true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setDefault = () => {\r\n        this.engineTowers = 0\r\n        this.rivalTowers = 0\r\n        this.engineKings = 0\r\n        this.enginePieces = 0\r\n        this.rivalKings = 0\r\n        this.rivalPieces = 0\r\n        this.engineMoves = 0\r\n        this.rivalMoves = 0\r\n    }\r\n\r\n    calcMoves = (key: string, board: IBoardToGame, color: PieceColor) => {\r\n        const {engineMoves, rivalMoves} = this\r\n        const movesNum = this.mmr.lookForTowerFreeMoves(key, board, color).length\r\n        if (color === this.color) {\r\n            this.engineMoves = engineMoves + movesNum\r\n        } else {\r\n            this.rivalMoves = rivalMoves + movesNum\r\n        }\r\n    }\r\n\r\n    getBoardData = (board: IBoardToGame) => {\r\n        Object.values(board).forEach((cell: IBoardCell) => {\r\n            const {tower, boardKey} = cell\r\n            if (tower) {\r\n                this.calcMoves(boardKey, board, tower.currentColor!)\r\n                if (this.GV === 'towers') {\r\n                    let {wPiecesQuantity = 0, bPiecesQuantity = 0} = tower\r\n                    if (wPiecesQuantity + bPiecesQuantity === 1) {\r\n                        this.handlePieces(tower as ICheckerTower)\r\n                    } else {\r\n                        this.handleTower(tower as ICheckerTower)\r\n                    }\r\n                } else {\r\n                    this.handlePieces(tower as ICheckerTower)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    calcMovesNumber = (color: PieceColor, board: IBoardToGame) => {\r\n        return this.mmr.lookForAllPosibleMoves(color, board).length\r\n    }\r\n\r\n    advantageInNumberOfMoves = () => {\r\n        const {engineMoves: mM, rivalMoves: rM} = this\r\n        return 2 * (mM - rM) / (mM + rM)\r\n    }\r\n\r\n    caclAdvantageInPieces = () => {\r\n        const {enginePieces, rivalPieces} = this\r\n        return (enginePieces - rivalPieces) * .9\r\n    }\r\n\r\n    caclAdvantageInKings = () => {\r\n        const {engineKings: eK, rivalKings: rK} = this\r\n        return  eK > rK ? eK/(rK + 1) * 2 : -rK/(eK + 1) * 2\r\n    }\r\n\r\n    checkIfkingsNumberChanged = (board: IBoardToGame) => {\r\n        this.getBoardData(board)\r\n        return this.caclAdvantageInKings()\r\n    }\r\n\r\n    evaluateCurrentPosition = (board: IBoardToGame) => {\r\n        this.setDefault()\r\n        this.getBoardData(board)\r\n        const moveAdvantage = this.advantageInNumberOfMoves()\r\n        const pieceNumberValue = this.caclAdvantageInPieces()\r\n        const kingsNumberValue = this.caclAdvantageInKings()\r\n        if (this.GV !== 'towers') {\r\n            return moveAdvantage + pieceNumberValue + kingsNumberValue\r\n        } else {\r\n            const towersFactor = this.calcTowersFactor()\r\n            return moveAdvantage + pieceNumberValue + kingsNumberValue + towersFactor\r\n        }\r\n    }\r\n}\r\n\r\nexport const evaluator = new Evaluator()\r\n\r\nexport class BestMoveSeeker {\r\n    maxDepth = 6\r\n    bestMoveCB: Function = () => {}\r\n    bestLinesCB: Function = () => {}\r\n    evaluator = evaluator\r\n    moveBranchesTree: Map<string, IBranch> = new Map()\r\n    actualHistoryString = ''\r\n    lastPlayerMove = ''\r\n    historyLength = 0\r\n    engineColor: PieceColor = PieceColor.w\r\n    lastResult = {} as ILastResult\r\n    fullPath = false\r\n    evaluationStarted = true\r\n    game = true\r\n    resetProps = (props: ISeekerProps) => {\r\n        this.bestMoveCB = props.bestMoveCB\r\n        this.maxDepth = props.maxDepth\r\n        this.engineColor = props.engineColor || PieceColor.w\r\n        this.game = !!props.game \r\n        this.moveBranchesTree = new Map()\r\n        if (props.engineColor) {\r\n            this.evaluator.setEvaluatingColor(props.engineColor)\r\n        }\r\n        this.moveBranchesTree = new Map()\r\n        this.actualHistoryString = ''\r\n        this.historyLength = 0\r\n        this.lastPlayerMove = ''\r\n        this.lastResult = {} as ILastResult\r\n        console.log('engine reseted', props)\r\n    }\r\n\r\n    startEvaluation = (start: boolean) => {\r\n        this.evaluationStarted = start\r\n    }\r\n\r\n    setEngieneColor = (color: PieceColor) => {\r\n        this.engineColor = color\r\n        this.evaluator.setEvaluatingColor(color)\r\n    }\r\n\r\n    setDepth = (depth: number) => {\r\n        this.maxDepth = depth\r\n    }\r\n\r\n    makeMove = (move: string, board: IBoardToGame) => {\r\n        if (!this.evaluationStarted) return\r\n        if (move.includes(':')) {\r\n            return mmr.makeMandatoryMove(move.split(':'), board)\r\n        }\r\n        const [from, to] = move.split('-')\r\n        return mmr.makeFreeMove(from, to, board)\r\n    }\r\n\r\n    debuteResolver = (currentPosition: IBoardToGame) => {\r\n        let move: string\r\n        if (!this.historyLength) {\r\n            const moves = FirstMoves[mmr.GV]\r\n            move = moves[Math.floor(Math.random() * moves.length)]\r\n        } else  {\r\n            const availableMoves = mmr.lookForAllPosibleMoves(this.engineColor, currentPosition)\r\n            move = availableMoves[Math.floor(Math.random() * availableMoves.length)]\r\n        }\r\n        const [from, to] = move!.split('-')\r\n        const moveToMake = {move, position: mmr.makeFreeMove(from, to, currentPosition)}\r\n        this.bestMoveCB(moveToMake)\r\n    }\r\n\r\n    filterBranches = () => {\r\n        const {moveBranchesTree, actualHistoryString, lastPlayerMove} = this\r\n        const newTree = new Map()\r\n        moveBranchesTree.forEach((v: Object, k: string) => {\r\n            if (k.startsWith(actualHistoryString)) {\r\n                const actualLength = actualHistoryString.length - lastPlayerMove.length\r\n                const newKey = k.slice(actualLength)\r\n                newTree.set(newKey, v)\r\n            }\r\n            this.moveBranchesTree = newTree\r\n        })\r\n    }\r\n\r\n    getAvaliableMoves = (positionKey: string, board: IBoardToGame) => {\r\n        let availableMoves = this.moveBranchesTree.get(positionKey)?.moves \r\n        if (!availableMoves) {\r\n            availableMoves = mmr.lookForAllMoves(this.engineColor, board)\r\n                .map((m: IMMRResult) => {\r\n                    const {move, position} = m\r\n                    return {move, branchValue: -100, position}\r\n                }) as IMove[]\r\n        }\r\n        if (!availableMoves.length) {\r\n            return null\r\n        }\r\n        return availableMoves        \r\n    }\r\n    \r\n    setActualMovesBranchAfterMove = (props: {history: string[], cP: IBoardToGame}) => {\r\n        const {history, cP: currentPosition} = props\r\n        console.log(props)\r\n        this.historyLength = history.length\r\n        if (history.length < 2 && this.game) {\r\n            return this.debuteResolver(currentPosition)\r\n        }\r\n        this.lastPlayerMove = history.slice(-1)[0] || 'sp'\r\n        let positionKey = this.lastPlayerMove\r\n        this.actualHistoryString = this.historyLength > 1 ? history.join('_') : this.lastPlayerMove\r\n        if (this.moveBranchesTree.size){\r\n            this.filterBranches()\r\n        }\r\n        const {moveBranchesTree} = this\r\n        const availableMoves = this.getAvaliableMoves(positionKey, currentPosition)\r\n        let actualBranch = moveBranchesTree.get(positionKey)\r\n        if (!availableMoves) {\r\n            return this.bestMoveCB({move: '', position: {}})\r\n        }\r\n        const baseValue = this.evaluator.evaluateCurrentPosition(currentPosition) as number\r\n        if (!actualBranch) {\r\n            actualBranch = {\r\n                moves: availableMoves,\r\n                board: currentPosition,\r\n                engineMoveLast: false,\r\n                value: baseValue,\r\n                baseValue,\r\n            }\r\n            this.moveBranchesTree.set(positionKey, actualBranch)\r\n            console.log('new branch at', positionKey, moveBranchesTree.get(positionKey))\r\n        } else {\r\n            console.log('look forward')\r\n            positionKey = this.lookForUnevaluatedForward(this.lastPlayerMove)\r\n        } \r\n        if (positionKey) {\r\n            this.stepForward(positionKey)\r\n        } else {\r\n            if (actualBranch.value! < -5) {\r\n                this.bestMoveCB({move: 'surrender', position: {}})\r\n            } else {\r\n                const {move, position} = this.getBestForEngine(actualBranch.moves)\r\n                this.bestMoveCB({move, position})\r\n            }\r\n        }\r\n    }\r\n\r\n    handleNoMovesBranch = (key1: string, branch1: IBranch, key2: string, branch2: IBranch) => {\r\n        if (!this.evaluationStarted) {\r\n            return\r\n        }\r\n        const value = branch1.engineMoveLast ? -50 : 50\r\n        this.moveBranchesTree.set(key1, branch1)\r\n        this.moveBranchesTree.set(key2, branch2)\r\n        if (key1 !== this.lastPlayerMove) {\r\n            this.updateParentBranches(key1.split('_'), value)\r\n            this.lastResult = {movesBranch: key1, value}\r\n            if (value > 0) {\r\n                this.stepBackForUnevaluatedBranchPlayer(key1.split('_').slice(0, -1))\r\n            } else {\r\n                this.stepBackForUnevaluatedBranchEngine(key1.split('_').slice(0, -1))\r\n            }\r\n        } else {\r\n            const engineMoveLast = branch1.engineMoveLast || (branch1.pieceOrder === this.engineColor)\r\n            const {move, position} = this.getBestMove(branch1.moves, engineMoveLast)\r\n            this.bestMoveCB({move, position})\r\n        }\r\n    }\r\n\r\n    stepForward = (key: string) => {\r\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(key)) {\r\n            return\r\n        }\r\n        let evaluatingPositon = this.moveBranchesTree.get(key)!\r\n        if (!evaluatingPositon) console.error('no branch', key)\r\n        const {moves, engineMoveLast} = evaluatingPositon!\r\n        const color = engineMoveLast ? this.engineColor : oppositColor(this.engineColor)\r\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100)\r\n        // if (!unevaluatedMoves.length) console.error('no moves in the branch', key, evaluatingPositon, this.moveBranchesTree)\r\n        const {move, position} = unevaluatedMoves[0]\r\n        const value = this.evaluator.evaluateCurrentPosition(position)\r\n        const nextPositionKey = `${key}_${move}`\r\n        const availableMoves = mmr.lookForAllMoves(color, position)\r\n        const branchValue = engineMoveLast ? -100 : 100\r\n        const nextPosition = {\r\n            moves: availableMoves.map((move: IMMRResult) => (\r\n                {move: move.move, branchValue, position: move.position}\r\n            )),\r\n            board: position,\r\n            engineMoveLast: !engineMoveLast,\r\n            value,\r\n            baseValue: value,\r\n        } as IBranch\r\n        if (!availableMoves.length) {\r\n            // console.log('branch game ended', color, evaluatingPositon, key)\r\n            return this.handleNoMovesBranch(key, evaluatingPositon, nextPositionKey, nextPosition)\r\n        }\r\n        evaluatingPositon = {\r\n            ...evaluatingPositon,\r\n            moves: moves.map(m => {\r\n                if (m.move === move) {\r\n                    return {...m, branchValue: value}\r\n                }\r\n                return m\r\n            }) as IMove[]\r\n        }\r\n        this.moveBranchesTree.set(key, evaluatingPositon)\r\n        this.moveBranchesTree.set(nextPositionKey, nextPosition)\r\n        if (!engineMoveLast) {\r\n            const currentDeep = nextPositionKey.split('_').length \r\n            if (currentDeep >= this.maxDepth) {\r\n                return this.lastLineEvaluation(nextPositionKey)\r\n            } \r\n        } \r\n        this.stepForward(nextPositionKey)\r\n    }\r\n\r\n    lookForUnevaluatedForward = (key: string): string => {\r\n        const branch = this.moveBranchesTree.get(key)\r\n        if (!branch) {\r\n            return ''\r\n        }\r\n        const {moves, engineMoveLast} = branch!\r\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100)\r\n        if (unevaluatedMoves.length && !engineMoveLast) {\r\n            console.log('unevaluated position found', branch)\r\n            return key\r\n        }\r\n        if (moves.length) {\r\n            return this.lookForUnevaluatedForward(`${key}_${moves[0].move}`)\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    stepBackForUnevaluatedBranchPlayer = (key: string[]) => {\r\n        const evaluatingBranchLength = key.length\r\n        let positionKey = key.join('_')\r\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(positionKey)) {\r\n            return\r\n        }\r\n        let position = this.moveBranchesTree.get(positionKey)\r\n        const {moves} = position!\r\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100) \r\n        if (evaluatingBranchLength === 2) {\r\n            if (!unevaluatedMoves.length) {\r\n                this.handlePlayerBranchEvaluationEnd(key)\r\n            } else {\r\n                setTimeout(() => this.stepForward(positionKey), 0)\r\n            }\r\n        } else if (evaluatingBranchLength > 2) {\r\n            if (!unevaluatedMoves.length) {\r\n                this.stepBackForUnevaluatedBranchPlayer(key.slice(0, -2))\r\n            } else if (evaluatingBranchLength <= 4) {\r\n                setTimeout(() => this.stepForward(positionKey),0)\r\n            } else {\r\n                this.stepForward(positionKey)\r\n            }\r\n        } else {\r\n            console.error('something wrong with back step engine', key, evaluatingBranchLength, this.moveBranchesTree)\r\n        }\r\n    }\r\n\r\n    handlePlayerBranchEvaluationEnd = (key: string[]) => {  \r\n        const actualBranch = this.moveBranchesTree.get(this.lastPlayerMove)!\r\n        if (!this.evaluationStarted || !actualBranch) {\r\n            return\r\n        } \r\n        const unevaluatedActualBranchMoves = actualBranch.moves.filter(m => Math.abs(m.branchValue) === 100) \r\n        if (!unevaluatedActualBranchMoves.length) {\r\n            console.log('evaluation finished', actualBranch,)\r\n            const {move, position} = this.getBestForEngine(actualBranch.moves)\r\n            return  this.bestMoveCB({move, position})\r\n        }\r\n        setTimeout(() => this.stepForward(this.lastPlayerMove), 0)\r\n    }\r\n\r\n    stepBackForUnevaluatedBranchEngine = (key: string[]) => {\r\n        const evaluatingBranchLength = key.length\r\n        let positionKey = key.join('_')\r\n        let position = this.moveBranchesTree.get(positionKey)!\r\n        if (!this.evaluationStarted || !position) {\r\n            return\r\n        }\r\n        const {moves} = position!\r\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100)\r\n        if (evaluatingBranchLength === 1) {\r\n            if (!unevaluatedMoves.length) {\r\n                const {branchValue, ...bestMove} = this.getBestForEngine(position.moves)\r\n                console.log('evaluation engine move finished', moves, this.moveBranchesTree)\r\n                return this.bestMoveCB(bestMove)\r\n            } \r\n            setTimeout(() => this.stepForward(positionKey), 0)\r\n        } else if (evaluatingBranchLength > 1) {\r\n            if (!unevaluatedMoves.length) {\r\n                this.stepBackForUnevaluatedBranchEngine(key.slice(0, -2))\r\n            } else if (evaluatingBranchLength - this.historyLength <= 3) {\r\n                setTimeout(() => this.stepForward(positionKey), 0)\r\n            } else {\r\n                this.stepForward(positionKey)\r\n            }\r\n        } else {\r\n            console.error('something wrong with back step engine')\r\n        }\r\n    }\r\n\r\n    handleCaseValueChangedNotably = (key: string): boolean => {\r\n        const position = this.moveBranchesTree.get(key)!\r\n        if (!this.evaluationStarted || !position) {\r\n            return false\r\n        }\r\n        if (key === this.lastPlayerMove) {\r\n            return false\r\n        }\r\n        const keyArr = key.split('_')\r\n        const parentPositionKey = keyArr.slice(0, -1).join('_')\r\n        const parentPosition = this.moveBranchesTree.get(parentPositionKey)!\r\n        if (Math.abs(position.value! - parentPosition.value!) < .5 && parentPositionKey.length > 3) {\r\n            return this.handleCaseValueChangedNotably(parentPositionKey)\r\n        }\r\n        if (parentPositionKey === this.lastPlayerMove) {\r\n            return false\r\n        }\r\n        const grandParentKey = keyArr.slice(0, -2).join('_')\r\n        const {moves} = this.moveBranchesTree.get(grandParentKey)!\r\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100) \r\n        if (unevaluatedMoves.length) {\r\n            this.stepForward(grandParentKey)\r\n        } else if (grandParentKey.length > 3) {\r\n            return this.handleCaseValueChangedNotably(grandParentKey)\r\n        } else { \r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    stepBackward = (key: string) => {\r\n        const keyArr = key.split('_')\r\n        const { lastResult: {value}, moveBranchesTree} = this\r\n        const parentBranch = moveBranchesTree.get(keyArr.slice(0, -1).join('_'))\r\n        const rootBranch = moveBranchesTree.get(this.lastPlayerMove)\r\n        if (!this.evaluationStarted || !parentBranch || !rootBranch) {\r\n            return\r\n        }\r\n        if (rootBranch.baseValue! <= value) {\r\n            if (value > parentBranch.baseValue!) {\r\n                this.stepBackForUnevaluatedBranchPlayer(keyArr.slice(0, -2))\r\n            } else {\r\n                this.stepBackForUnevaluatedBranchEngine(keyArr.slice(0, -1))\r\n            }\r\n        } else {\r\n            if (value <= parentBranch.baseValue!) {\r\n                this.stepBackForUnevaluatedBranchEngine(keyArr.slice(0, -1))\r\n            } else {\r\n                this.stepBackForUnevaluatedBranchEngine(keyArr.slice(0, -1))\r\n            }\r\n        }\r\n    }\r\n\r\n    updateMoves = (branch: IBranch, move: string, branchValue: number): IBranch => {\r\n\r\n        const moves = branch.moves.map((m: IMove) => {\r\n            if (m.move === move) {\r\n                return {...m, branchValue}\r\n            }\r\n            return {...m}\r\n        })\r\n        return {...branch, moves} as IBranch\r\n    }\r\n\r\n    updateParentBranches = (key: string[], branchValue: number): void => {\r\n        const branchKey = key.slice(0, -1).join('_')\r\n        const move = key.slice(-1)[0]\r\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(branchKey)) {\r\n            return\r\n        }\r\n        const branch = this.moveBranchesTree.get(branchKey) as IBranch\r\n        const updatedBranch = this.updateMoves(branch, move, branchValue)\r\n        this.moveBranchesTree.set(branchKey, updatedBranch)\r\n        if (branchKey === this.lastPlayerMove) {\r\n            return\r\n        }\r\n        const passingValue = branch.engineMoveLast \r\n            ? this.getBestForPlayer(updatedBranch.moves).branchValue \r\n            : this.getBestForEngine(updatedBranch.moves).branchValue\r\n        return this.updateParentBranches(key.slice(0, -1), passingValue)\r\n    }\r\n\r\n    lastLineEvaluation = (branchKey: string) => {\r\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(branchKey)) {\r\n            return\r\n        }\r\n        const lastBranch = this.moveBranchesTree.get(branchKey)!\r\n        const moves = lastBranch.moves.map((m: IMove) => {\r\n            const {position} = m\r\n            const value = this.evaluator.evaluateCurrentPosition(position)\r\n            const nextPositionKey = `${branchKey}_${m.move}`\r\n            const availableMoves = mmr.lookForAllMoves(this.engineColor, position)\r\n            const nextBranchMoves = availableMoves.map((mr: IMMRResult) => {\r\n                    const {move, position} = mr\r\n                    return {move, branchValue: 100, position}\r\n                })\r\n            const nextBranch: IBranch = {\r\n                moves: nextBranchMoves,\r\n                board: position,\r\n                engineMoveLast: false,\r\n                baseValue: value,\r\n                value,\r\n            }\r\n            this.moveBranchesTree.set(nextPositionKey, nextBranch)\r\n          \r\n            return {...m, branchValue: value}\r\n        })\r\n        this.lastResult = {value: this.getBestForPlayer(moves).branchValue, movesBranch: branchKey}\r\n        this.updateParentBranches(branchKey.split('_'), this.lastResult.value)\r\n        const updatedBranch = {...lastBranch, moves}\r\n        this.moveBranchesTree.set(branchKey, updatedBranch)\r\n        this.stepBackward(branchKey)\r\n    }\r\n\r\n    getBestMove = (moves: IMove[], engineMoveLast: boolean) => {\r\n        return engineMoveLast ? this.getBestForPlayer(moves) : this.getBestForEngine(moves)\r\n    }\r\n\r\n    getBestForPlayer = (arr: IMove[]) => arr.slice(1).reduce((acc: IMove, i: IMove) => {\r\n        if (i.branchValue < acc.branchValue) {\r\n            acc = i\r\n        }\r\n        return acc\r\n    }, arr[0])\r\n\r\n    getBestForEngine = (arr: IMove[]) => arr.slice(1).reduce((acc: IMove, i: IMove) => {\r\n        if (i.branchValue > acc.branchValue) {\r\n            acc = i\r\n        }\r\n        return acc\r\n    }, arr[0])\r\n}\r\n\r\nconst bms = new BestMoveSeeker()\r\n\r\nexport default bms\r\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"sourceRoot":""}