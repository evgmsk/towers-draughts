{"version":3,"sources":["store/game/actions.ts","store/gameAnalysis/actions.ts","store/board/actions.ts","game-components/moves-history/MovesHistory.tsx","game-components/tower/CheckerTower.tsx","game-components/board/Board.tsx","game-engine/position-evaluator.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"names":["clearHistory","payload","type","GameActions","CLEAR_HISTORY","surrender","SURRENDER","setGameMode","SET_GAME_MODE","confirmStartGame","CONFIRM_START_GAME","updateIneffectiveMoves","INEFFECTIVE_MOVE","endGame","END_GAME","makeMove","MAKE_MOVE","cancelGame","CANCEL_GAME","declineDraw","DECLINE_DRAW","offerDraw","OFFER_DRAW","setStartPosition","GameAnalysisActions","SET_START_POSITION","makeNewMove","MAKE_NEW_MOVE","updateAnalysisState","UPDATE_ANALYSIS_STATE","evaluatePosition","paylaod","EVALUATE_POSITION","setDepth","SET_DEPTH","stepForward","STEP_FORWARD","removePiece","REMOVE_PIECE","stepBack","STEP_BACK","playMoves","PLAY_MOVES","goToPosition","GO_TO_POSITION","downloadGame","DOWNLOAD_GAME","analyzeLastGame","ANALYZE_LAST_GAME","settingBoard","SETTING_BOARD","updateBoardState","BoardActions","UPDATE_BOARD_STATE","turn","TURN","undoLastMove","UNDO_LAST_MOVE","historyMapDispatch","historyConnector","connect","state","movesHistory","game","history","gameMode","movesMainLine","analyze","lastMove","analyzingLastGame","MovesHistory","React","memo","props","ref","createRef","useEffect","elem","current","scroll","scrollHeight","scrollDown","History","useHistory","mHistory","length","moves","convertToMovesHistory","handleClickOnMove","e","index","preventDefault","location","pathname","push","move","toStartClass","stepBackClass","stepForwardClass","toEndClass","className","onClick","classList","target","contains","slice","map","i","white","black","whiteClass","blackClass","TowerFace","w","b","colorW","king","towers","BlackPieces","Array","fill","WhitePieces","towerPiecesArray","concat","middle","Math","floor","Numbers","Tower","pn","pos","abs","BlackOrWhite","UpOrDown","KingAndTop","pieceClass","NumsPresentation","firstNum","secondNum","Class","connector","gameOptions","gameVariant","bs","boardOptions","boardSize","TowerComponent","prevProps","JSON","stringify","this","positionInDOM","currentColor","currentType","veiw","wPiecesQuantity","bPiecesQuantity","onBoardPosition","mt","mandatory","x","y","CellTowerRatio","style","top","left","towerView","PieceColor","TowerType","k","Component","Cell","indexes","children","Board","boardNotation","reversedBoard","posibleMoves","Map","DefaultTL","TopLegendValues","DefaultSL","SideLegendValues","SL","reverse","TL","v","h","j","marked","get","moveIndex","indexOf","highlighted","trim","BoardNotation","r","FirstMoves","international","russian","evaluator","GV","mmr","engineTowers","rivalTowers","engineKings","enginePieces","rivalKings","rivalPieces","engineMoves","rivalMoves","color","setEvaluatingColor","handlePieces","tower","m","bottomTowersValue","tP","bP","calcTowersFactor","handleTower","setDefault","calcMoves","key","board","movesNum","lookForTowerFreeMoves","getBoardData","Object","values","forEach","cell","boardKey","calcMovesNumber","lookForAllPosibleMoves","advantageInNumberOfMoves","mM","rM","caclAdvantageInPieces","caclAdvantageInKings","eK","rK","checkIfkingsNumberChanged","evaluateCurrentPosition","moveAdvantage","pieceNumberValue","kingsNumberValue","bms","maxDepth","bestMoveCB","bestLinesCB","moveBranchesTree","actualHistoryString","lastPlayerMove","historyLength","engineColor","lastResult","fullPath","evaluationStarted","resetProps","console","log","startEvaluation","start","setEngieneColor","depth","includes","makeMandatoryMove","split","from","to","makeFreeMove","debuteResolver","currentPosition","availableMoves","random","moveToMake","position","filterBranches","newTree","startsWith","actualLength","newKey","set","getAvaliableMoves","positionKey","lookForAllMoves","branchValue","setActualMovesBranchAfterMove","cP","join","size","actualBranch","baseValue","lookForUnevaluatedForward","engineMoveLast","value","getBestForEngine","handleNoMovesBranch","key1","branch1","key2","branch2","updateParentBranches","movesBranch","stepBackForUnevaluatedBranchPlayer","stepBackForUnevaluatedBranchEngine","pieceOrder","getBestMove","evaluatingPositon","error","oppositColor","filter","nextPositionKey","nextPosition","lastLineEvaluation","branch","evaluatingBranchLength","unevaluatedMoves","setTimeout","handlePlayerBranchEvaluationEnd","bestMove","handleCaseValueChangedNotably","keyArr","parentPositionKey","parentPosition","grandParentKey","stepBackward","parentBranch","rootBranch","updateMoves","branchKey","updatedBranch","passingValue","getBestForPlayer","lastBranch","nextBranch","mr","arr","reduce","acc","_objectWithoutProperties","source","excluded","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"mappings":"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","file":"static/js/0.761273d9.chunk.js","sourcesContent":["import { \n    IBoardToGame,\n    IMoveProps,\n    IMoveOrder,\n    IGameState,\n    EndGameConditions,\n    IGameMode,\n    PieceColor,\n    INewGameProps\n} from '../app-interface'\nimport {GameActionTypes, GameActions} from './types'\n\nexport function clearHistory(payload = null): GameActionTypes {\n    return {\n        type: GameActions.CLEAR_HISTORY,\n        payload\n    }\n}\n\nexport function surrender(payload: PieceColor): GameActionTypes {\n    return {\n        type: GameActions.SURRENDER,\n        payload\n    }\n}\n\nexport function setGameMode(payload: IGameMode): GameActionTypes {\n    return {\n        type: GameActions.SET_GAME_MODE,\n        payload\n    }\n}\n\nexport function setGame(payload: Partial<IGameState>): GameActionTypes {\n    return {\n        type: GameActions.SET_GAME,\n        payload\n    }\n}\n\nexport function updateGameState(payload: IBoardToGame): GameActionTypes {\n    return {\n        type: GameActions.UPDATE_GAME_STATE,\n        payload\n    }\n}\n\nexport function confirmStartGame(payload: boolean): GameActionTypes {\n    return {\n        type: GameActions.CONFIRM_START_GAME,\n        payload\n    }\n}\n\nexport function setMoveOrder(payload: IMoveOrder): GameActionTypes {\n    return ({\n        type: GameActions.SET_MOVE_ORDER,\n        payload \n    })\n}\n\nexport function setGameStarted(payload: boolean): GameActionTypes {\n    return ({\n        type: GameActions.SET_GAME_STARTED,\n        payload\n    })   \n}\n\nexport function updateIneffectiveMoves(payload: number): GameActionTypes {\n    return {\n        type:GameActions.INEFFECTIVE_MOVE,\n        payload\n    }   \n}\n\nexport function endGame(payload: EndGameConditions): GameActionTypes {\n    return {\n        type: GameActions.END_GAME,\n        payload\n    }\n}\n\nexport function makeMove(payload: IMoveProps): GameActionTypes {\n    return {\n        type: GameActions.MAKE_MOVE,\n        payload\n    }\n}\n\nexport function cancelGame(): GameActionTypes {\n    return {\n        type: GameActions.CANCEL_GAME\n    }\n}\n\nexport function declineDraw(payload?: boolean): GameActionTypes {\n    return {\n        type: GameActions.DECLINE_DRAW,\n        payload\n    }\n}\n\nexport function opponentOfferDraw(): GameActionTypes {\n    return {\n        type: GameActions.RIVAL_OFFER_DRAW\n    }\n}\n\nexport function setGameEnded(payload: boolean): GameActionTypes {\n    return {\n        type: GameActions.SET_GAME_MODE,\n        payload\n    }\n}\n\nexport function offerDraw(): GameActionTypes {\n    return {\n        type: GameActions.OFFER_DRAW\n    }\n}\n\nexport function setPortrait(payload: boolean): GameActionTypes {\n    return {\n        type: GameActions.SET_PORTRAIT,\n        payload\n    }\n}\n\nexport function newGameVSPC(payload = null): GameActionTypes {\n    return {\n        type: GameActions.NEW_GAME_VS_PLAYER,\n        payload\n    }\n}\n\nexport function newGameVSPlayer(payload: INewGameProps): GameActionTypes {\n    return {\n        type: GameActions.NEW_GAME_VS_PLAYER,\n        payload\n    }\n}\n","import { IAnalysisState, IBoardToGame, IGameResult, IMoveProps} from \"../app-interface\"; \nimport { GameAnalysisActions, GameAnalysisTypes } from \"./types\";\n\n\nexport function setStartPosition(payload = null) {\n    return {\n        type: GameAnalysisActions.SET_START_POSITION,\n        payload\n    }\n}\n\nexport function makeNewMove(payload: Partial<IMoveProps>) {\n    return {\n        type: GameAnalysisActions.MAKE_NEW_MOVE,\n        payload\n    }\n}\n\nexport function startNewLine(payload:IMoveProps) {\n    return {\n        type: GameAnalysisActions.START_NEW_LINE,\n        payload\n    }\n}\n\nexport function updateAnalysisState(payload: Partial<IAnalysisState>) {\n    return {\n        type: GameAnalysisActions.UPDATE_ANALYSIS_STATE,\n        payload\n    }\n}\n\nexport function evaluatePosition(paylaod: boolean) {\n    return {\n        type: GameAnalysisActions.EVALUATE_POSITION,\n        paylaod\n    }\n}\nexport function setDepth(paylaod:number) {\n    return {\n        type: GameAnalysisActions.SET_DEPTH,\n        paylaod\n    }\n}\n\nexport function createPositionTree(payload: Map<string, IBoardToGame>): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.CREATE_POSITION_TREE,\n        payload\n    }\n}\n\nexport function stepForward(payload = 0): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.STEP_FORWARD,\n        payload\n    }\n}\n\nexport function removePiece(payload: boolean): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.REMOVE_PIECE,\n        payload\n    }\n}\n\nexport function stepBack(payload = 0): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.STEP_BACK,\n        payload\n    }\n}\n\nexport function playMoves(payload = null): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.PLAY_MOVES,\n        payload\n    }\n}\n\nexport function goToPosition(payload: {index: number, move: string}): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.GO_TO_POSITION,\n        payload\n    }\n}\n\nexport function savePosition(payload: Map<string, IBoardToGame>): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.SAVE_POSITION,\n        payload\n    }\n}\n\nexport function updatePosition(payload: Partial<IMoveProps>): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.UPDATE_POSITION,\n        payload\n    }\n}\n\nexport function downloadGame(payload: IGameResult): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.DOWNLOAD_GAME,\n        payload\n    }\n}\n\nexport function saveGameResult(payload: IGameResult): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.SAVE_GAME_RESULT,\n        payload\n    }\n}\n\nexport function analyzeLastGame(payload: boolean): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.ANALYZE_LAST_GAME,\n        payload\n    }\n}\n\nexport function settingBoard(payload: boolean): GameAnalysisTypes {\n    return {\n        type: GameAnalysisActions.SETTING_BOARD,\n        payload\n    }\n}\n","import { IBoardAndTowers, IMoveProps } from \"../app-interface\";\nimport { BoardActions, BoardActionTypes } from \"./types\";\n\n\nexport function updateBoardSize(payload: number) {\n    return {\n        type: BoardActions.UPDATE_BOARD_SIZE,\n        payload\n    }\n}\n\nexport function updateBoardState(payload: Partial<IBoardAndTowers>) {\n    return {\n        type: BoardActions.UPDATE_BOARD_STATE,\n        payload\n    }\n}\n\nexport function turn(payload: Partial<IMoveProps>) {\n    return {\n        type: BoardActions.TURN,\n        payload\n    }\n}\n\nexport function undoLastMove(payload = null): BoardActionTypes {\n    return {\n        type: BoardActions.UNDO_LAST_MOVE,\n        payload\n    }\n}\n","import React, { useEffect} from \"react\"\nimport { ConnectedProps, connect } from \"react-redux\"\nimport {useHistory} from 'react-router-dom'\n\nimport { convertToMovesHistory } from \"../../game-engine/gameplay-helper-fuctions\"\nimport { IRef } from \"../../store/app-interface\"\nimport {analyzeLastGame, stepForward, stepBack, goToPosition, playMoves} from '../../store/gameAnalysis/actions'\nimport { IRootState } from \"../../store/rootState&Reducer\"\n\nimport './moves.scss'\n\n\nconst historyMapState = (state: IRootState) => ({\n    movesHistory: state.game.history,\n    gameMode: state.game.gameMode,\n    movesMainLine: state.analyze.movesMainLine,\n    lastMove: state.analyze.lastMove,\n    analyzingLastGame: state.analyze.analyzeLastGame\n})\n\nconst historyMapDispatch = {analyzeLastGame, stepBack, stepForward, goToPosition, playMoves}\n\nconst historyConnector = connect(historyMapState, historyMapDispatch)\n\nconst Moves:React.FC<ConnectedProps<typeof historyConnector>> = (props) => {\n    const ref: IRef<HTMLDivElement> = React.createRef()\n    const {\n        movesHistory,\n        gameMode,\n        lastMove,\n        movesMainLine,\n        analyzeLastGame,\n        analyzingLastGame,\n        stepBack,\n        stepForward,\n        goToPosition,\n        playMoves\n    } = props\n    \n    useEffect(() => {\n        const scrollDown = () => {\n            const elem = ref.current\n            if (!elem) return\n            elem.scroll(0, elem.scrollHeight)\n        }\n        scrollDown()\n    }, [movesHistory, ref])\n    const History = useHistory()\n    const mHistory = gameMode === 'isPlaying' ? movesHistory : movesMainLine!\n    const length = mHistory?.length\n    const moves = convertToMovesHistory(mHistory)\n   \n    const handleClickOnMenuItem = (e: React.MouseEvent) => {\n        e.preventDefault()\n        const {classList} = e.target as HTMLElement\n        if (classList.contains('disabled')) return\n        if (History.location.pathname === '/game') {\n            History.push('/analysis')\n        }\n        if (!analyzingLastGame) {\n            analyzeLastGame(true)\n        }\n        switch (true) {\n            case classList.contains('to-start'):\n                goToPosition({index: -1, move: ''})\n                break\n            case classList.contains('step-back'): {\n               return stepBack()\n            }\n            case classList.contains('step-forward'): {\n                return stepForward()\n            }\n            case classList.contains('to-end'): {\n                return goToPosition({index: length - 1, move: mHistory.slice(-1)[0]})\n            }\n            case classList.contains('play-moves'): {\n                return playMoves()\n            }\n            default:\n                break\n        }\n    }\n    const handleClickOnMove = (e: React.MouseEvent, index: number) => {\n        e.preventDefault()\n        if (gameMode === 'isPlaying') return\n        if (History.location.pathname === '/game') {\n            History.push('/analysis')\n        }\n        goToPosition({index, move: mHistory[index]})\n    }\n\n    const {index} = lastMove!\n    const toStartClass = `moves-history-menu__item to-start${index < 0 ? ' disabled' : ''}`\n    const stepBackClass = `moves-history-menu__item step-back${!index ? ' disabled' : ''}`\n    const stepForwardClass = `moves-history-menu__item step-forward${index >= length - 1 ? ' disabled' : ''}`\n    const toEndClass = `moves-history-menu__item to-end${index >= length - 1 ? ' disabled' : ''}`\n    const playClass = `moves-history-menu__item play-moves`\n    return (\n        <div className=\"moves-history-wrapper\">\n            <div className=\"moves-history-menu\">\n                { gameMode === 'isPlaying' || !analyzingLastGame\n                    ? <p>moves:</p> \n                    : <ul onClick={handleClickOnMenuItem}>\n                        <li className={toStartClass}>\n                            <i className=\"material-icons\" >first_page</i>\n                        </li>\n                        <li className={stepBackClass}>\n                            <i className=\"material-icons\">chevron_left</i>\n                        </li>\n                        <li className={playClass}>\n                            <i className=\"material-icons\">slideshow</i>\n                        </li>\n                        <li className={stepForwardClass}>\n                            <i className=\"material-icons\">chevron_right</i>\n                        </li>\n                        <li className={toEndClass}>\n                            <i className=\"material-icons\">last_page</i>\n                        </li>\n                    </ul>\n                }\n            </div>\n            <div className=\"moves-container\" ref={ref}>           \n                {\n                    moves.map((move: {black: string, white: string}, i: number) => {\n                        const white = (analyzingLastGame ? index : mHistory.length - 1) === i * 2\n                        const black =  (analyzingLastGame ? index : mHistory.length - 1) === i * 2 + 1\n                        const whiteClass = `white-move${white ? ' current-move': ''}`\n                        const blackClass = `black-move${black ? ' current-move': ''}`\n                        return (\n                            <div className=\"move-wrapper\" key={i}>\n                                <div className=\"move-number\">{i + 1}</div>\n                                <div className=\"move\">\n                                    <div className={whiteClass} onClick={(e) => handleClickOnMove(e, i * 2)}>\n                                        {move.white}\n                                    </div>\n                                    <div className={blackClass} onClick={(e) => handleClickOnMove(e, i * 2 + 1)}>\n                                        {move.black}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div> \n    )       \n}\n\nexport const MovesHistory = React.memo(historyConnector(Moves))\n","import React from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport { CellTowerRatio } from '../../constants/gameConstants';\n\nimport { PieceColor, TowerConstructor, TowerType } from '../../store/app-interface';\nimport { IRootState } from '../../store/rootState&Reducer';\nimport './checker-tower.scss';\n\ninterface FaceProps {w: number, b: number, colorW: boolean, king: boolean, towers: boolean}\n\nexport const TowerFace: React.FC<FaceProps> = (props) => {\n  const {w, b, colorW, king, towers} = props\n  if (!towers) {\n    const className = `${colorW ? 'white-checker' : 'black-checker'}${king ? ' king' : ''}`\n    return <div className={className}>{king && <span className=\"king-mark\">K</span>}</div>\n  }\n  const BlackPieces = new Array(b).fill(0)\n  const WhitePieces = new Array(w).fill(1)\n  const towerPiecesArray = colorW? WhitePieces.concat(BlackPieces) : BlackPieces.concat(WhitePieces)\n  const middle = Math.floor(towerPiecesArray.length / 2)\n  const Numbers = colorW \n    ? <p className=\"numbers-on-hover\"><span className=\"white-top\">{w}</span><span className=\"black-down\">{b}</span></p>  \n    : <p className=\"numbers-on-hover\"><span className=\"black-top\">{b}</span><span className=\"white-down\">{w}</span></p>\n  const Tower = towerPiecesArray.map((pn: number, i: number) => {\n    const pos = Math.abs(i - middle)\n    const BlackOrWhite = pn ? \"white-piece\" : \"black-piece\"\n    const UpOrDown = i <= middle ? `up${pos}` : `down${pos}`\n    const KingAndTop = king && !i ? ' king' : ''\n    const pieceClass = `${BlackOrWhite} ${UpOrDown}${KingAndTop}`\n    return <div key={i} className={pieceClass}><span className=\"king-mark\">{king && !i ? 'K' : null}</span></div>\n  })\n  // const commonClass = `unface-tower-${colorW ? 'white' : 'black'}`\n  return (\n    <div className=\"tower-wrapper\">\n      {Tower}\n      {Numbers}\n    </div>\n  )\n}\n\nexport const NumsPresentation:React.FC<{w: number, b: number, colorW: boolean, king: boolean}> = (props) => {\n  const {w, b, colorW, king} = props\n  const firstNum = colorW ? w : b\n  const secondNum = colorW ? b : w\n  const Class = `checker-tower__quantity${king ? ' with-crown' : ''}`\n  return <div className={Class}>\n            <span>{firstNum}</span>&nbsp;/&nbsp;<span>{secondNum}</span>\n          </div>\n}\n\nconst mapState = (state: IRootState) => ({\n  towers: state.gameOptions.gameVariant === 'towers',\n  bs: state.boardOptions.boardSize\n})\n\nconst mapDispatch = {}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype TowerComponentProps = ConnectedProps<typeof connector> & TowerConstructor & {mandatory: boolean}\n\n\nexport class TowerComponent extends React.Component<TowerComponentProps> {\n\n  shouldComponentUpdate(prevProps: TowerConstructor ) {\n    return JSON.stringify(prevProps) !== JSON.stringify(this.props)\n  }\n  componentDidUpdate() {\n    // console.log('updated', this.props.positionInDOM)\n  }\n\n  render() {\n    const {\n      positionInDOM,\n      currentColor,\n      currentType,\n      veiw,\n      wPiecesQuantity,\n      bPiecesQuantity,\n      onBoardPosition,\n    } = this.props as TowerConstructor\n    const mt = this.props.mandatory\n    const boardSize = this.props.bs\n    const towers = this.props.towers\n    const {x, y} = positionInDOM!\n    const className = `checker-tower ${currentType} ${currentColor} ${veiw} board-${boardSize}${mt? ' mandatory-tower': ''}${towers ? ' towers' : ' classic'} ratio-${CellTowerRatio*10}`\n    const style = {top: `${y}px`, left: `${x}px`} //  {transform: `translate(${x}px, ${y}px)`}//\n    // console.log(style)\n    const colorW = currentColor === PieceColor.w \n    const towerView = (wPiecesQuantity + bPiecesQuantity > 1) && veiw !== 'face'\n    const props={\n      w: wPiecesQuantity, \n      b: bPiecesQuantity, \n      colorW, \n      king: currentType === TowerType.k, \n      towers,\n    }\n    return <div className={className} data-indexes={onBoardPosition} style={style}>\n              {towerView ? <NumsPresentation {...props} /> : <TowerFace {...props}/>}\n            </div>\n  }\n}\n\nexport default connector(TowerComponent)\n","import React from 'react'\n\nimport {BoardNotation, IBoardProps, ICell} from '../../store/app-interface'\nimport {TopLegendValues, SideLegendValues} from '../../constants/gameConstants'\n\nimport './board.scss';\n\n\nexport const Cell: React.FC<ICell> = props  => {\n    return (<div className={props.className} data-indexes={props.indexes}>\n                {props.children}\n            </div>)\n}\n\nexport const Board: React.FC<IBoardProps> = (props) => { \n    // // useEffect(() => {\n    //     console.log('render board with props: ', props)\n    // })\n    const {\n        boardOptions: {\n            boardSize,\n            boardNotation,\n            reversedBoard,\n        },\n        lastMove,\n        posibleMoves = new Map()\n    } = props\n    const DefaultTL = TopLegendValues.slice(0, boardSize)\n    const DefaultSL = SideLegendValues.slice(0, boardSize)\n    const SL  = reversedBoard ? DefaultSL : DefaultSL.reverse()\n    const TL = reversedBoard ? DefaultTL.reverse() : DefaultTL\n    let k = reversedBoard ? 51 : 0\n\n\n    const Board = SL.map((v: number, i: number) => {\n        return TL.map((h: string, j: number) => {\n            if(reversedBoard) {\n                k = (i + j) % 2 ? k - 1 : k\n            } else {\n                k = (i + j) % 2 ? k + 1 : k\n            }\n            const type = !((i + j) % 2) ? 'light' : 'dark'\n            const index = `${h}${v}`\n            const marked = posibleMoves.get(index) ? 'marked' : ''\n            const moveIndex = lastMove.indexOf(index)\n            const highlighted = moveIndex >= 0 ? `highlighted${moveIndex}` : ''\n            const className = `board__cell ${type} ${marked} ${highlighted}`.trim()\n            return (\n                <Cell\n                    key={i + '-' + j}\n                    indexes={index}\n                    className={className}\n                >\n              {\n                        boardNotation === BoardNotation.i && ((i + j) % 2) \n                        ? <span className=\"board__cell-number\">{k}</span> \n                        : null\n                    }\n                    {\n                        boardNotation === BoardNotation.r && !j \n                        ? <span className=\"board__label-value ver\">{SL[i]}</span>\n                        : null\n                    }\n                    {\n                        boardNotation === BoardNotation.r && i + 1=== SL.length \n                        ? <span className=\"board__label-value hor\">{TL[j]}</span> \n                        : null\n                    }\n                </Cell>\n            )\n        })\n    })\n                        \n    return (\n         <div className=\"board__body\">\n            {Board}\n        </div>\n    )  \n}\n    ","import { IBoardCell, IBoardToGame, ICheckerTower, IMMRResult, PieceColor, TowerType } from \"../store/app-interface\"\nimport { IBranch, ILastResult, ISeekerProps, IMove } from \"./engine-interfaces\"\nimport {oppositColor} from \"./gameplay-helper-fuctions\"\nimport mmr from './mandatory-move-resolver'\n\nconst FirstMoves: {[key:string]: string[]} = {\n    international: ['d4-e5', 'd4-e5', 'd4-e5',  'd4-c5',  'd4-c5',  'h4-g5',  'h4-i5'],\n    russian: ['c3-d4', 'c3-d4', 'c3-d4', 'c3-b4', 'c3-b4', 'e3-f4', 'a3-b4',],\n    towers: ['c3-d4', 'c3-d4', 'c3-d4', 'c3-b4', 'c3-b4', 'e3-f4', 'a3-b4', ]\n}\n\n\nexport type BestMoveSeekerType = BestMoveSeeker\n\nexport class Evaluator {\n    GV = mmr.GV\n    mmr = mmr\n    engineTowers = 0\n    rivalTowers = 0\n    engineKings = 0\n    enginePieces = 0\n    rivalKings = 0\n    rivalPieces = 0\n    engineMoves = 0\n    rivalMoves = 0\n    color = PieceColor.w\n\n    setEvaluatingColor = (color: PieceColor) => {\n        this.color = color\n    }\n\n    handlePieces = (tower: ICheckerTower) => {\n        const {currentType, currentColor} = tower\n        const {rivalKings, engineKings, rivalPieces, enginePieces} = this\n        if (currentType === TowerType.m) {\n            if (currentColor === this.color) {\n                this.enginePieces = enginePieces + 1\n            } else {\n                this.rivalPieces = rivalPieces + 1\n            }\n        } else {\n            if (currentColor === this.color) {\n                this.engineKings = engineKings + 1\n            } else {\n                this.rivalKings = rivalKings + 1\n            }\n        }\n    }\n\n    bottomTowersValue = (tP: number, bP: number, king = false) => {\n        if (!king) {\n            return bP * (.4 / tP)\n        } else {\n            return bP * (.2 / tP)\n        }\n    }\n\n    calcTowersFactor = () => {\n        const {engineTowers, rivalTowers} = this\n        return engineTowers - rivalTowers\n    }\n\n    handleTower = (tower: ICheckerTower) => {\n        const {currentColor, currentType, wPiecesQuantity = 0, bPiecesQuantity = 0} = tower\n        if (this.color === PieceColor.w) {\n            if (currentType === TowerType.m) {\n                if (currentColor === PieceColor.w) {\n                    this.engineTowers += wPiecesQuantity\n                    this.rivalTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity)\n                } else {\n                    this.rivalTowers += bPiecesQuantity\n                    this.engineTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity)\n                }\n            } else {\n                if (currentColor === this.color) {\n                    this.engineTowers += wPiecesQuantity + 1\n                    this.rivalTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity, true)\n                } else {\n                    this.rivalTowers += bPiecesQuantity + 1\n                    this.engineTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity, true)\n                }\n            }\n        } else {\n            if (currentType === TowerType.m) {\n                if (currentColor === PieceColor.w) {\n                    this.rivalTowers += wPiecesQuantity\n                    this.engineTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity)\n                } else {\n                    this.engineTowers += bPiecesQuantity\n                    this.rivalTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity)\n                }\n            } else {\n                if (currentColor === PieceColor.w) {\n                    this.rivalTowers += wPiecesQuantity\n                    this.engineTowers += this.bottomTowersValue(wPiecesQuantity, bPiecesQuantity, true)\n                } else {\n                    this.engineTowers += bPiecesQuantity\n                    this.rivalTowers += this.bottomTowersValue(bPiecesQuantity, wPiecesQuantity, true)\n                }\n            }\n        }\n    }\n\n    setDefault = () => {\n        this.engineTowers = 0\n        this.rivalTowers = 0\n        this.engineKings = 0\n        this.enginePieces = 0\n        this.rivalKings = 0\n        this.rivalPieces = 0\n        this.engineMoves = 0\n        this.rivalMoves = 0\n    }\n\n    calcMoves = (key: string, board: IBoardToGame, color: PieceColor) => {\n        const {engineMoves, rivalMoves} = this\n        const movesNum = this.mmr.lookForTowerFreeMoves(key, board, color).length\n        if (color === this.color) {\n            this.engineMoves = engineMoves + movesNum\n        } else {\n            this.rivalMoves = rivalMoves + movesNum\n        }\n    }\n\n    getBoardData = (board: IBoardToGame) => {\n        Object.values(board).forEach((cell: IBoardCell) => {\n            const {tower, boardKey} = cell\n            if (tower) {\n                this.calcMoves(boardKey, board, tower.currentColor!)\n                if (this.GV === 'towers') {\n                    let {wPiecesQuantity = 0, bPiecesQuantity = 0} = tower\n                    if (wPiecesQuantity + bPiecesQuantity === 1) {\n                        this.handlePieces(tower as ICheckerTower)\n                    } else {\n                        this.handleTower(tower as ICheckerTower)\n                    }\n                } else {\n                    this.handlePieces(tower as ICheckerTower)\n                }\n            }\n        })\n    }\n\n    calcMovesNumber = (color: PieceColor, board: IBoardToGame) => {\n        return this.mmr.lookForAllPosibleMoves(color, board).length\n    }\n\n    advantageInNumberOfMoves = () => {\n        const {engineMoves: mM, rivalMoves: rM} = this\n        return 2 * (mM - rM) / (mM + rM)\n    }\n\n    caclAdvantageInPieces = () => {\n        const {enginePieces, rivalPieces} = this\n        return (enginePieces - rivalPieces) * .9\n    }\n\n    caclAdvantageInKings = () => {\n        const {engineKings: eK, rivalKings: rK} = this\n        return  eK > rK ? eK/(rK + 1) * 2 : -rK/(eK + 1) * 2\n    }\n\n    checkIfkingsNumberChanged = (board: IBoardToGame) => {\n        this.getBoardData(board)\n        return this.caclAdvantageInKings()\n    }\n\n    evaluateCurrentPosition = (board: IBoardToGame) => {\n        this.setDefault()\n        this.getBoardData(board)\n        const moveAdvantage = this.advantageInNumberOfMoves()\n        const pieceNumberValue = this.caclAdvantageInPieces()\n        const kingsNumberValue = this.caclAdvantageInKings()\n        if (this.GV !== 'towers') {\n            return moveAdvantage + pieceNumberValue + kingsNumberValue\n        } else {\n            const towersFactor = this.calcTowersFactor()\n            return moveAdvantage + pieceNumberValue + kingsNumberValue + towersFactor\n        }\n    }\n}\n\nexport const evaluator = new Evaluator()\n\nexport class BestMoveSeeker {\n    maxDepth = 6\n    bestMoveCB: Function = () => {}\n    bestLinesCB: Function = () => {}\n    evaluator = evaluator\n    moveBranchesTree: Map<string, IBranch> = new Map()\n    actualHistoryString = ''\n    lastPlayerMove = ''\n    historyLength = 0\n    engineColor: PieceColor = PieceColor.w\n    lastResult = {} as ILastResult\n    fullPath = false\n    evaluationStarted = true\n    game = true\n    resetProps = (props: ISeekerProps) => {\n        this.bestMoveCB = props.bestMoveCB\n        this.maxDepth = props.maxDepth\n        this.engineColor = props.engineColor || PieceColor.w\n        this.game = !!props.game \n        this.moveBranchesTree = new Map()\n        if (props.engineColor) {\n            this.evaluator.setEvaluatingColor(props.engineColor)\n        }\n        this.moveBranchesTree = new Map()\n        this.actualHistoryString = ''\n        this.historyLength = 0\n        this.lastPlayerMove = ''\n        this.lastResult = {} as ILastResult\n        console.log('engine reseted', props)\n    }\n\n    startEvaluation = (start: boolean) => {\n        this.evaluationStarted = start\n    }\n\n    setEngieneColor = (color: PieceColor) => {\n        this.engineColor = color\n        this.evaluator.setEvaluatingColor(color)\n    }\n\n    setDepth = (depth: number) => {\n        this.maxDepth = depth\n    }\n\n    makeMove = (move: string, board: IBoardToGame) => {\n        if (!this.evaluationStarted) return\n        if (move.includes(':')) {\n            return mmr.makeMandatoryMove(move.split(':'), board)\n        }\n        const [from, to] = move.split('-')\n        return mmr.makeFreeMove(from, to, board)\n    }\n\n    debuteResolver = (currentPosition: IBoardToGame) => {\n        let move: string\n        if (!this.historyLength) {\n            const moves = FirstMoves[mmr.GV]\n            move = moves[Math.floor(Math.random() * moves.length)]\n        } else  {\n            const availableMoves = mmr.lookForAllPosibleMoves(this.engineColor, currentPosition)\n            move = availableMoves[Math.floor(Math.random() * availableMoves.length)]\n        }\n        const [from, to] = move!.split('-')\n        const moveToMake = {move, position: mmr.makeFreeMove(from, to, currentPosition)}\n        this.bestMoveCB(moveToMake)\n    }\n\n    filterBranches = () => {\n        const {moveBranchesTree, actualHistoryString, lastPlayerMove} = this\n        const newTree = new Map()\n        moveBranchesTree.forEach((v: Object, k: string) => {\n            if (k.startsWith(actualHistoryString)) {\n                const actualLength = actualHistoryString.length - lastPlayerMove.length\n                const newKey = k.slice(actualLength)\n                newTree.set(newKey, v)\n            }\n            this.moveBranchesTree = newTree\n        })\n    }\n\n    getAvaliableMoves = (positionKey: string, board: IBoardToGame) => {\n        let availableMoves = this.moveBranchesTree.get(positionKey)?.moves \n        if (!availableMoves) {\n            availableMoves = mmr.lookForAllMoves(this.engineColor, board)\n                .map((m: IMMRResult) => {\n                    const {move, position} = m\n                    return {move, branchValue: -100, position}\n                }) as IMove[]\n        }\n        if (!availableMoves.length) {\n            return null\n        }\n        return availableMoves        \n    }\n    \n    setActualMovesBranchAfterMove = (props: {history: string[], cP: IBoardToGame}) => {\n        const {history, cP: currentPosition} = props\n        console.log(props)\n        this.historyLength = history.length\n        if (history.length < 2 && this.game) {\n            return this.debuteResolver(currentPosition)\n        }\n        this.lastPlayerMove = history.slice(-1)[0] || 'sp'\n        let positionKey = this.lastPlayerMove\n        this.actualHistoryString = this.historyLength > 1 ? history.join('_') : this.lastPlayerMove\n        if (this.moveBranchesTree.size){\n            this.filterBranches()\n        }\n        const {moveBranchesTree} = this\n        const availableMoves = this.getAvaliableMoves(positionKey, currentPosition)\n        let actualBranch = moveBranchesTree.get(positionKey)\n        if (!availableMoves) {\n            return this.bestMoveCB({move: '', position: {}})\n        }\n        const baseValue = this.evaluator.evaluateCurrentPosition(currentPosition) as number\n        if (!actualBranch) {\n            actualBranch = {\n                moves: availableMoves,\n                board: currentPosition,\n                engineMoveLast: false,\n                value: baseValue,\n                baseValue,\n            }\n            this.moveBranchesTree.set(positionKey, actualBranch)\n            console.log('new branch at', positionKey, moveBranchesTree.get(positionKey))\n        } else {\n            console.log('look forward')\n            positionKey = this.lookForUnevaluatedForward(this.lastPlayerMove)\n        } \n        if (positionKey) {\n            this.stepForward(positionKey)\n        } else {\n            if (actualBranch.value! < -5) {\n                this.bestMoveCB({move: 'surrender', position: {}})\n            } else {\n                const {move, position} = this.getBestForEngine(actualBranch.moves)\n                this.bestMoveCB({move, position})\n            }\n        }\n    }\n\n    handleNoMovesBranch = (key1: string, branch1: IBranch, key2: string, branch2: IBranch) => {\n        if (!this.evaluationStarted) {\n            return\n        }\n        const value = branch1.engineMoveLast ? -50 : 50\n        this.moveBranchesTree.set(key1, branch1)\n        this.moveBranchesTree.set(key2, branch2)\n        if (key1 !== this.lastPlayerMove) {\n            this.updateParentBranches(key1.split('_'), value)\n            this.lastResult = {movesBranch: key1, value}\n            if (value > 0) {\n                this.stepBackForUnevaluatedBranchPlayer(key1.split('_').slice(0, -1))\n            } else {\n                this.stepBackForUnevaluatedBranchEngine(key1.split('_').slice(0, -1))\n            }\n        } else {\n            const engineMoveLast = branch1.engineMoveLast || (branch1.pieceOrder === this.engineColor)\n            const {move, position} = this.getBestMove(branch1.moves, engineMoveLast)\n            this.bestMoveCB({move, position})\n        }\n    }\n\n    stepForward = (key: string) => {\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(key)) {\n            return\n        }\n        let evaluatingPositon = this.moveBranchesTree.get(key)!\n        if (!evaluatingPositon) console.error('no branch', key)\n        const {moves, engineMoveLast} = evaluatingPositon!\n        const color = engineMoveLast ? this.engineColor : oppositColor(this.engineColor)\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100)\n        // if (!unevaluatedMoves.length) console.error('no moves in the branch', key, evaluatingPositon, this.moveBranchesTree)\n        const {move, position} = unevaluatedMoves[0]\n        const value = this.evaluator.evaluateCurrentPosition(position)\n        const nextPositionKey = `${key}_${move}`\n        const availableMoves = mmr.lookForAllMoves(color, position)\n        const branchValue = engineMoveLast ? -100 : 100\n        const nextPosition = {\n            moves: availableMoves.map((move: IMMRResult) => (\n                {move: move.move, branchValue, position: move.position}\n            )),\n            board: position,\n            engineMoveLast: !engineMoveLast,\n            value,\n            baseValue: value,\n        } as IBranch\n        if (!availableMoves.length) {\n            // console.log('branch game ended', color, evaluatingPositon, key)\n            return this.handleNoMovesBranch(key, evaluatingPositon, nextPositionKey, nextPosition)\n        }\n        evaluatingPositon = {\n            ...evaluatingPositon,\n            moves: moves.map(m => {\n                if (m.move === move) {\n                    return {...m, branchValue: value}\n                }\n                return m\n            }) as IMove[]\n        }\n        this.moveBranchesTree.set(key, evaluatingPositon)\n        this.moveBranchesTree.set(nextPositionKey, nextPosition)\n        if (!engineMoveLast) {\n            const currentDeep = nextPositionKey.split('_').length \n            if (currentDeep >= this.maxDepth) {\n                return this.lastLineEvaluation(nextPositionKey)\n            } \n        } \n        this.stepForward(nextPositionKey)\n    }\n\n    lookForUnevaluatedForward = (key: string): string => {\n        const branch = this.moveBranchesTree.get(key)\n        if (!branch) {\n            return ''\n        }\n        const {moves, engineMoveLast} = branch!\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100)\n        if (unevaluatedMoves.length && !engineMoveLast) {\n            console.log('unevaluated position found', branch)\n            return key\n        }\n        if (moves.length) {\n            return this.lookForUnevaluatedForward(`${key}_${moves[0].move}`)\n        } else {\n            return ''\n        }\n    }\n\n    stepBackForUnevaluatedBranchPlayer = (key: string[]) => {\n        const evaluatingBranchLength = key.length\n        let positionKey = key.join('_')\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(positionKey)) {\n            return\n        }\n        let position = this.moveBranchesTree.get(positionKey)\n        const {moves} = position!\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100) \n        if (evaluatingBranchLength === 2) {\n            if (!unevaluatedMoves.length) {\n                this.handlePlayerBranchEvaluationEnd(key)\n            } else {\n                setTimeout(() => this.stepForward(positionKey), 0)\n            }\n        } else if (evaluatingBranchLength > 2) {\n            if (!unevaluatedMoves.length) {\n                this.stepBackForUnevaluatedBranchPlayer(key.slice(0, -2))\n            } else if (evaluatingBranchLength <= 4) {\n                setTimeout(() => this.stepForward(positionKey),0)\n            } else {\n                this.stepForward(positionKey)\n            }\n        } else {\n            console.error('something wrong with back step engine', key, evaluatingBranchLength, this.moveBranchesTree)\n        }\n    }\n\n    handlePlayerBranchEvaluationEnd = (key: string[]) => {  \n        const actualBranch = this.moveBranchesTree.get(this.lastPlayerMove)!\n        if (!this.evaluationStarted || !actualBranch) {\n            return\n        } \n        const unevaluatedActualBranchMoves = actualBranch.moves.filter(m => Math.abs(m.branchValue) === 100) \n        if (!unevaluatedActualBranchMoves.length) {\n            console.log('evaluation finished', actualBranch,)\n            const {move, position} = this.getBestForEngine(actualBranch.moves)\n            return  this.bestMoveCB({move, position})\n        }\n        setTimeout(() => this.stepForward(this.lastPlayerMove), 0)\n    }\n\n    stepBackForUnevaluatedBranchEngine = (key: string[]) => {\n        const evaluatingBranchLength = key.length\n        let positionKey = key.join('_')\n        let position = this.moveBranchesTree.get(positionKey)!\n        if (!this.evaluationStarted || !position) {\n            return\n        }\n        const {moves} = position!\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100)\n        if (evaluatingBranchLength === 1) {\n            if (!unevaluatedMoves.length) {\n                const {branchValue, ...bestMove} = this.getBestForEngine(position.moves)\n                console.log('evaluation engine move finished', moves, this.moveBranchesTree)\n                return this.bestMoveCB(bestMove)\n            } \n            setTimeout(() => this.stepForward(positionKey), 0)\n        } else if (evaluatingBranchLength > 1) {\n            if (!unevaluatedMoves.length) {\n                this.stepBackForUnevaluatedBranchEngine(key.slice(0, -2))\n            } else if (evaluatingBranchLength - this.historyLength <= 3) {\n                setTimeout(() => this.stepForward(positionKey), 0)\n            } else {\n                this.stepForward(positionKey)\n            }\n        } else {\n            console.error('something wrong with back step engine')\n        }\n    }\n\n    handleCaseValueChangedNotably = (key: string): boolean => {\n        const position = this.moveBranchesTree.get(key)!\n        if (!this.evaluationStarted || !position) {\n            return false\n        }\n        if (key === this.lastPlayerMove) {\n            return false\n        }\n        const keyArr = key.split('_')\n        const parentPositionKey = keyArr.slice(0, -1).join('_')\n        const parentPosition = this.moveBranchesTree.get(parentPositionKey)!\n        if (Math.abs(position.value! - parentPosition.value!) < .5 && parentPositionKey.length > 3) {\n            return this.handleCaseValueChangedNotably(parentPositionKey)\n        }\n        if (parentPositionKey === this.lastPlayerMove) {\n            return false\n        }\n        const grandParentKey = keyArr.slice(0, -2).join('_')\n        const {moves} = this.moveBranchesTree.get(grandParentKey)!\n        const unevaluatedMoves = moves.filter(m => Math.abs(m.branchValue) === 100) \n        if (unevaluatedMoves.length) {\n            this.stepForward(grandParentKey)\n        } else if (grandParentKey.length > 3) {\n            return this.handleCaseValueChangedNotably(grandParentKey)\n        } else { \n            return false\n        }\n        return true\n    }\n\n    stepBackward = (key: string) => {\n        const keyArr = key.split('_')\n        const { lastResult: {value}, moveBranchesTree} = this\n        const parentBranch = moveBranchesTree.get(keyArr.slice(0, -1).join('_'))\n        const rootBranch = moveBranchesTree.get(this.lastPlayerMove)\n        if (!this.evaluationStarted || !parentBranch || !rootBranch) {\n            return\n        }\n        if (rootBranch.baseValue! <= value) {\n            if (value > parentBranch.baseValue!) {\n                this.stepBackForUnevaluatedBranchPlayer(keyArr.slice(0, -2))\n            } else {\n                this.stepBackForUnevaluatedBranchEngine(keyArr.slice(0, -1))\n            }\n        } else {\n            if (value <= parentBranch.baseValue!) {\n                this.stepBackForUnevaluatedBranchEngine(keyArr.slice(0, -1))\n            } else {\n                this.stepBackForUnevaluatedBranchEngine(keyArr.slice(0, -1))\n            }\n        }\n    }\n\n    updateMoves = (branch: IBranch, move: string, branchValue: number): IBranch => {\n\n        const moves = branch.moves.map((m: IMove) => {\n            if (m.move === move) {\n                return {...m, branchValue}\n            }\n            return {...m}\n        })\n        return {...branch, moves} as IBranch\n    }\n\n    updateParentBranches = (key: string[], branchValue: number): void => {\n        const branchKey = key.slice(0, -1).join('_')\n        const move = key.slice(-1)[0]\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(branchKey)) {\n            return\n        }\n        const branch = this.moveBranchesTree.get(branchKey) as IBranch\n        const updatedBranch = this.updateMoves(branch, move, branchValue)\n        this.moveBranchesTree.set(branchKey, updatedBranch)\n        if (branchKey === this.lastPlayerMove) {\n            return\n        }\n        const passingValue = branch.engineMoveLast \n            ? this.getBestForPlayer(updatedBranch.moves).branchValue \n            : this.getBestForEngine(updatedBranch.moves).branchValue\n        return this.updateParentBranches(key.slice(0, -1), passingValue)\n    }\n\n    lastLineEvaluation = (branchKey: string) => {\n        if (!this.evaluationStarted || !this.moveBranchesTree.get(branchKey)) {\n            return\n        }\n        const lastBranch = this.moveBranchesTree.get(branchKey)!\n        const moves = lastBranch.moves.map((m: IMove) => {\n            const {position} = m\n            const value = this.evaluator.evaluateCurrentPosition(position)\n            const nextPositionKey = `${branchKey}_${m.move}`\n            const availableMoves = mmr.lookForAllMoves(this.engineColor, position)\n            const nextBranchMoves = availableMoves.map((mr: IMMRResult) => {\n                    const {move, position} = mr\n                    return {move, branchValue: 100, position}\n                })\n            const nextBranch: IBranch = {\n                moves: nextBranchMoves,\n                board: position,\n                engineMoveLast: false,\n                baseValue: value,\n                value,\n            }\n            this.moveBranchesTree.set(nextPositionKey, nextBranch)\n          \n            return {...m, branchValue: value}\n        })\n        this.lastResult = {value: this.getBestForPlayer(moves).branchValue, movesBranch: branchKey}\n        this.updateParentBranches(branchKey.split('_'), this.lastResult.value)\n        const updatedBranch = {...lastBranch, moves}\n        this.moveBranchesTree.set(branchKey, updatedBranch)\n        this.stepBackward(branchKey)\n    }\n\n    getBestMove = (moves: IMove[], engineMoveLast: boolean) => {\n        return engineMoveLast ? this.getBestForPlayer(moves) : this.getBestForEngine(moves)\n    }\n\n    getBestForPlayer = (arr: IMove[]) => arr.slice(1).reduce((acc: IMove, i: IMove) => {\n        if (i.branchValue < acc.branchValue) {\n            acc = i\n        }\n        return acc\n    }, arr[0])\n\n    getBestForEngine = (arr: IMove[]) => arr.slice(1).reduce((acc: IMove, i: IMove) => {\n        if (i.branchValue > acc.branchValue) {\n            acc = i\n        }\n        return acc\n    }, arr[0])\n}\n\nconst bms = new BestMoveSeeker()\n\nexport default bms\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"sourceRoot":""}